
trabalhofinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba0  08003ba0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba0  08003ba0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba0  08003ba0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba0  08003ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000048  08003bf0  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08003bf0  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9a8  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000226f  00000000  00000000  0002ea19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  00030c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  00031920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000194ac  00000000  00000000  000324a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbae  00000000  00000000  0004b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dc5d  00000000  00000000  000574fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5157  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003288  00000000  00000000  000e51d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a34 	.word	0x08003a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08003a34 	.word	0x08003a34

0800014c <tempo>:
/**
 * @brief Função temporizadora
 *
 * Função de tempo necessaria para o funcionamento do lcd.
 */
void tempo(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, E, GPIO_PIN_SET);//E
 8000150:	4b09      	ldr	r3, [pc, #36]	; (8000178 <tempo+0x2c>)
 8000152:	881b      	ldrh	r3, [r3, #0]
 8000154:	2201      	movs	r2, #1
 8000156:	4619      	mov	r1, r3
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <tempo+0x30>)
 800015a:	f002 f823 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800015e:	2005      	movs	r0, #5
 8000160:	f001 fa2c 	bl	80015bc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, E, GPIO_PIN_RESET);
 8000164:	4b04      	ldr	r3, [pc, #16]	; (8000178 <tempo+0x2c>)
 8000166:	881b      	ldrh	r3, [r3, #0]
 8000168:	2200      	movs	r2, #0
 800016a:	4619      	mov	r1, r3
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <tempo+0x30>)
 800016e:	f002 f819 	bl	80021a4 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000008 	.word	0x20000008
 800017c:	40010c00 	.word	0x40010c00

08000180 <inicializa>:
 * Essa função é responsavel por fazer a configuração inicial do display.
 * Ele é inicializado como 16x2, sem cursor e escreve deslocando o cursor para a direita.
 * Também irá carregar as carracteres especiais criadas para a CGRAM.
 */

void inicializa (void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	//Intruções de inicialização
	instrucoes(0x33);
 8000184:	2033      	movs	r0, #51	; 0x33
 8000186:	f000 f83d 	bl	8000204 <instrucoes>
	instrucoes(0x32);
 800018a:	2032      	movs	r0, #50	; 0x32
 800018c:	f000 f83a 	bl	8000204 <instrucoes>
	instrucoes(0x28);
 8000190:	2028      	movs	r0, #40	; 0x28
 8000192:	f000 f837 	bl	8000204 <instrucoes>
	instrucoes(0x0C);
 8000196:	200c      	movs	r0, #12
 8000198:	f000 f834 	bl	8000204 <instrucoes>

	//instruções para escrever na CGRAM
	caracteres_especiais(cg0, &cd);
 800019c:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <inicializa+0x5c>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	490f      	ldr	r1, [pc, #60]	; (80001e0 <inicializa+0x60>)
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 f8e3 	bl	800036e <caracteres_especiais>
	caracteres_especiais(cg1, &ac);
 80001a8:	4b0e      	ldr	r3, [pc, #56]	; (80001e4 <inicializa+0x64>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	490e      	ldr	r1, [pc, #56]	; (80001e8 <inicializa+0x68>)
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 f8dd 	bl	800036e <caracteres_especiais>
	caracteres_especiais(cg2, &ec);
 80001b4:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <inicializa+0x6c>)
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	490d      	ldr	r1, [pc, #52]	; (80001f0 <inicializa+0x70>)
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f8d7 	bl	800036e <caracteres_especiais>
	caracteres_especiais(cg3, &at);
 80001c0:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <inicializa+0x74>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	490c      	ldr	r1, [pc, #48]	; (80001f8 <inicializa+0x78>)
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 f8d1 	bl	800036e <caracteres_especiais>
	caracteres_especiais(cg4, &ot);
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <inicializa+0x7c>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	490b      	ldr	r1, [pc, #44]	; (8000200 <inicializa+0x80>)
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 f8cb 	bl	800036e <caracteres_especiais>

}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	20000014 	.word	0x20000014
 80001e4:	2000000d 	.word	0x2000000d
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	2000000e 	.word	0x2000000e
 80001f0:	20000024 	.word	0x20000024
 80001f4:	2000000f 	.word	0x2000000f
 80001f8:	2000002c 	.word	0x2000002c
 80001fc:	20000010 	.word	0x20000010
 8000200:	20000034 	.word	0x20000034

08000204 <instrucoes>:
 * Essa função aciona o modo de instução do lcd no pino RS e carrega os dados da instução.
 *
 * @param[in] hexa: char com o valor em hexadecimal da instução a ser executada.
 */

void instrucoes(char hexa){
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]

	int8_t conv_b[8];
	int16_t x = hexa; //converte pra inteiro
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	82fb      	strh	r3, [r7, #22]

	//converte para binario
	conversorB(hexa, &conv_b);
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	b21b      	sxth	r3, r3
 8000216:	f107 020c 	add.w	r2, r7, #12
 800021a:	4611      	mov	r1, r2
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f873 	bl	8000308 <conversorB>

	HAL_GPIO_WritePin(GPIOB, E, GPIO_PIN_RESET); //Desabilita o chip select
 8000222:	4b32      	ldr	r3, [pc, #200]	; (80002ec <instrucoes+0xe8>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	2200      	movs	r2, #0
 8000228:	4619      	mov	r1, r3
 800022a:	4831      	ldr	r0, [pc, #196]	; (80002f0 <instrucoes+0xec>)
 800022c:	f001 ffba 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RS, GPIO_PIN_RESET); //Habilita a seleção de instrução
 8000230:	4b30      	ldr	r3, [pc, #192]	; (80002f4 <instrucoes+0xf0>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	2200      	movs	r2, #0
 8000236:	4619      	mov	r1, r3
 8000238:	482d      	ldr	r0, [pc, #180]	; (80002f0 <instrucoes+0xec>)
 800023a:	f001 ffb3 	bl	80021a4 <HAL_GPIO_WritePin>


	// Manda para o barramento de dados os 4 primeiros bit.
	HAL_GPIO_WritePin(GPIOB, D7, conv_b[0]);
 800023e:	4b2e      	ldr	r3, [pc, #184]	; (80002f8 <instrucoes+0xf4>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	4619      	mov	r1, r3
 800024a:	4829      	ldr	r0, [pc, #164]	; (80002f0 <instrucoes+0xec>)
 800024c:	f001 ffaa 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6, conv_b[1]);
 8000250:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <instrucoes+0xf8>)
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000258:	b2d2      	uxtb	r2, r2
 800025a:	4619      	mov	r1, r3
 800025c:	4824      	ldr	r0, [pc, #144]	; (80002f0 <instrucoes+0xec>)
 800025e:	f001 ffa1 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5, conv_b[2]);
 8000262:	4b27      	ldr	r3, [pc, #156]	; (8000300 <instrucoes+0xfc>)
 8000264:	881b      	ldrh	r3, [r3, #0]
 8000266:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800026a:	b2d2      	uxtb	r2, r2
 800026c:	4619      	mov	r1, r3
 800026e:	4820      	ldr	r0, [pc, #128]	; (80002f0 <instrucoes+0xec>)
 8000270:	f001 ff98 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4, conv_b[3]);
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <instrucoes+0x100>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	4619      	mov	r1, r3
 8000280:	481b      	ldr	r0, [pc, #108]	; (80002f0 <instrucoes+0xec>)
 8000282:	f001 ff8f 	bl	80021a4 <HAL_GPIO_WritePin>
	tempo();
 8000286:	f7ff ff61 	bl	800014c <tempo>

	// Manda para o barramento de dados os 4 ultimos bit.
	HAL_GPIO_WritePin(GPIOB, D7, conv_b[4]);
 800028a:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <instrucoes+0xf4>)
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	4619      	mov	r1, r3
 8000296:	4816      	ldr	r0, [pc, #88]	; (80002f0 <instrucoes+0xec>)
 8000298:	f001 ff84 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6, conv_b[5]);
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <instrucoes+0xf8>)
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	f997 2011 	ldrsb.w	r2, [r7, #17]
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	4619      	mov	r1, r3
 80002a8:	4811      	ldr	r0, [pc, #68]	; (80002f0 <instrucoes+0xec>)
 80002aa:	f001 ff7b 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5, conv_b[6]);
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <instrucoes+0xfc>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	f997 2012 	ldrsb.w	r2, [r7, #18]
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	4619      	mov	r1, r3
 80002ba:	480d      	ldr	r0, [pc, #52]	; (80002f0 <instrucoes+0xec>)
 80002bc:	f001 ff72 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4, conv_b[7]);
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <instrucoes+0x100>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	4619      	mov	r1, r3
 80002cc:	4808      	ldr	r0, [pc, #32]	; (80002f0 <instrucoes+0xec>)
 80002ce:	f001 ff69 	bl	80021a4 <HAL_GPIO_WritePin>
	tempo();
 80002d2:	f7ff ff3b 	bl	800014c <tempo>

	HAL_GPIO_WritePin(GPIOB, RS, GPIO_PIN_SET);//Habilita a seleção de dados
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <instrucoes+0xf0>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	2201      	movs	r2, #1
 80002dc:	4619      	mov	r1, r3
 80002de:	4804      	ldr	r0, [pc, #16]	; (80002f0 <instrucoes+0xec>)
 80002e0:	f001 ff60 	bl	80021a4 <HAL_GPIO_WritePin>
}
 80002e4:	bf00      	nop
 80002e6:	3718      	adds	r7, #24
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000008 	.word	0x20000008
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	2000000a 	.word	0x2000000a
 80002f8:	20000006 	.word	0x20000006
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000002 	.word	0x20000002
 8000304:	20000000 	.word	0x20000000

08000308 <conversorB>:
 *Essa função converte um valor inteiro para um vetor de binarios.
 *
 *@param[in] inte: unsigned int de 16 bits, contendo o valor a ser convertido.
 *@param[in] *convB: ponteiro para um unsigned int de 8 bits, que será armazenado o valor convertido.
 */
void conversorB(int16_t inte, int8_t *convB){
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	6039      	str	r1, [r7, #0]
 8000312:	80fb      	strh	r3, [r7, #6]
	int16_t teste= inte;
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	81bb      	strh	r3, [r7, #12]
	for (int16_t i=7; i>= 0 ; i --){
 8000318:	2307      	movs	r3, #7
 800031a:	81fb      	strh	r3, [r7, #14]
 800031c:	e01e      	b.n	800035c <conversorB+0x54>
		if((inte % 2)==0 )convB[i]=0;
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	f003 0301 	and.w	r3, r3, #1
 8000324:	b29b      	uxth	r3, r3
 8000326:	2b00      	cmp	r3, #0
 8000328:	d106      	bne.n	8000338 <conversorB+0x30>
 800032a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	4413      	add	r3, r2
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
 8000336:	e005      	b.n	8000344 <conversorB+0x3c>
		else convB[i]=1;
 8000338:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	4413      	add	r3, r2
 8000340:	2201      	movs	r2, #1
 8000342:	701a      	strb	r2, [r3, #0]
		inte=inte/2;
 8000344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000348:	0fda      	lsrs	r2, r3, #31
 800034a:	4413      	add	r3, r2
 800034c:	105b      	asrs	r3, r3, #1
 800034e:	80fb      	strh	r3, [r7, #6]
	for (int16_t i=7; i>= 0 ; i --){
 8000350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000354:	b29b      	uxth	r3, r3
 8000356:	3b01      	subs	r3, #1
 8000358:	b29b      	uxth	r3, r3
 800035a:	81fb      	strh	r3, [r7, #14]
 800035c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000360:	2b00      	cmp	r3, #0
 8000362:	dadc      	bge.n	800031e <conversorB+0x16>
	}
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <caracteres_especiais>:
 * Chama a função que para armazenar os 8 bytes do caractere.
 *
 * param[in]posicao: char contendo o endereço que deve ser gravado os dados.
 * param[in]caracter: char contendo o desenho da caractere
 */
void caracteres_especiais(char posicao, char *caracter){
 800036e:	b580      	push	{r7, lr}
 8000370:	b084      	sub	sp, #16
 8000372:	af00      	add	r7, sp, #0
 8000374:	4603      	mov	r3, r0
 8000376:	6039      	str	r1, [r7, #0]
 8000378:	71fb      	strb	r3, [r7, #7]

	instrucoes(posicao); //manda o endereço para as instruções iniciarem a CGRAM
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff41 	bl	8000204 <instrucoes>


	for(int8_t i=0; i < 8 ;i++){
 8000382:	2300      	movs	r3, #0
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	e00d      	b.n	80003a4 <caracteres_especiais+0x36>
		escreve_char(caracter[i]);
 8000388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	4413      	add	r3, r2
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f816 	bl	80003c4 <escreve_char>
	for(int8_t i=0; i < 8 ;i++){
 8000398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	3301      	adds	r3, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	73fb      	strb	r3, [r7, #15]
 80003a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003a8:	2b07      	cmp	r3, #7
 80003aa:	dded      	ble.n	8000388 <caracteres_especiais+0x1a>
	}
}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <limpar>:
/**
 *@brief Limpa o display
 *
 *Essa função limpa a tela do display.
 */
void limpar(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	instrucoes(0x01);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ff23 	bl	8000204 <instrucoes>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <escreve_char>:
 *
 *	Essa função escreve o valor do texto enviado no display
 *
 *	@param[in] texto: char contendo o texto que devera ser escrito no display.
 */
void escreve_char(char texto){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]


	int8_t bin[8];
	int16_t inte;
	inte = texto;
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	82fb      	strh	r3, [r7, #22]
	conversorB(inte, &bin);
 80003d2:	f107 020c 	add.w	r2, r7, #12
 80003d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003da:	4611      	mov	r1, r2
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ff93 	bl	8000308 <conversorB>


	HAL_GPIO_WritePin(GPIOB, RS, GPIO_PIN_SET); //Habilita a seleção de DADOS
 80003e2:	4b2b      	ldr	r3, [pc, #172]	; (8000490 <escreve_char+0xcc>)
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	2201      	movs	r2, #1
 80003e8:	4619      	mov	r1, r3
 80003ea:	482a      	ldr	r0, [pc, #168]	; (8000494 <escreve_char+0xd0>)
 80003ec:	f001 feda 	bl	80021a4 <HAL_GPIO_WritePin>

		// Manda para o barramento de dados os 4 primeiros bit.
	HAL_GPIO_WritePin(GPIOB, D7, bin[0]);
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <escreve_char+0xd4>)
 80003f2:	881b      	ldrh	r3, [r3, #0]
 80003f4:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	4619      	mov	r1, r3
 80003fc:	4825      	ldr	r0, [pc, #148]	; (8000494 <escreve_char+0xd0>)
 80003fe:	f001 fed1 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6, bin[1]);
 8000402:	4b26      	ldr	r3, [pc, #152]	; (800049c <escreve_char+0xd8>)
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800040a:	b2d2      	uxtb	r2, r2
 800040c:	4619      	mov	r1, r3
 800040e:	4821      	ldr	r0, [pc, #132]	; (8000494 <escreve_char+0xd0>)
 8000410:	f001 fec8 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5, bin[2]);
 8000414:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <escreve_char+0xdc>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800041c:	b2d2      	uxtb	r2, r2
 800041e:	4619      	mov	r1, r3
 8000420:	481c      	ldr	r0, [pc, #112]	; (8000494 <escreve_char+0xd0>)
 8000422:	f001 febf 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4, bin[3]);
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <escreve_char+0xe0>)
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800042e:	b2d2      	uxtb	r2, r2
 8000430:	4619      	mov	r1, r3
 8000432:	4818      	ldr	r0, [pc, #96]	; (8000494 <escreve_char+0xd0>)
 8000434:	f001 feb6 	bl	80021a4 <HAL_GPIO_WritePin>
	tempo();
 8000438:	f7ff fe88 	bl	800014c <tempo>

			// Manda para o barramento de dados os 4 ultimos bit.
	HAL_GPIO_WritePin(GPIOB, D7, bin[4]);
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <escreve_char+0xd4>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8000444:	b2d2      	uxtb	r2, r2
 8000446:	4619      	mov	r1, r3
 8000448:	4812      	ldr	r0, [pc, #72]	; (8000494 <escreve_char+0xd0>)
 800044a:	f001 feab 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6, bin[5]);
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <escreve_char+0xd8>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8000456:	b2d2      	uxtb	r2, r2
 8000458:	4619      	mov	r1, r3
 800045a:	480e      	ldr	r0, [pc, #56]	; (8000494 <escreve_char+0xd0>)
 800045c:	f001 fea2 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5, bin[6]);
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <escreve_char+0xdc>)
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4619      	mov	r1, r3
 800046c:	4809      	ldr	r0, [pc, #36]	; (8000494 <escreve_char+0xd0>)
 800046e:	f001 fe99 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4, bin[7]);
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <escreve_char+0xe0>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800047a:	b2d2      	uxtb	r2, r2
 800047c:	4619      	mov	r1, r3
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <escreve_char+0xd0>)
 8000480:	f001 fe90 	bl	80021a4 <HAL_GPIO_WritePin>
	tempo();
 8000484:	f7ff fe62 	bl	800014c <tempo>


}
 8000488:	bf00      	nop
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	2000000a 	.word	0x2000000a
 8000494:	40010c00 	.word	0x40010c00
 8000498:	20000006 	.word	0x20000006
 800049c:	20000004 	.word	0x20000004
 80004a0:	20000002 	.word	0x20000002
 80004a4:	20000000 	.word	0x20000000

080004a8 <escreve_string>:
 *	Essa função ira gerenciar a escria de uma string no display.
 *
 *	@param[in] posicao: char contendo a posição que deve ser escrita no display
 *	@param[in] *texto: ponteiro para um vetor de char contendo a string que deve ser escrita no display.
 */
void escreve_string(char posicao, char *texto){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	6039      	str	r1, [r7, #0]
 80004b2:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	81fb      	strh	r3, [r7, #14]
	uint8_t tes = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	737b      	strb	r3, [r7, #13]
	instrucoes(posicao);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fea0 	bl	8000204 <instrucoes>

	while(i < 17 & texto[i] != '\0'){
 80004c4:	e053      	b.n	800056e <escreve_string+0xc6>

		if(texto[i] == 195){
 80004c6:	89fb      	ldrh	r3, [r7, #14]
 80004c8:	683a      	ldr	r2, [r7, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2bc3      	cmp	r3, #195	; 0xc3
 80004d0:	d143      	bne.n	800055a <escreve_string+0xb2>
			if(texto[i+1] == 167){
 80004d2:	89fb      	ldrh	r3, [r7, #14]
 80004d4:	3301      	adds	r3, #1
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2ba7      	cmp	r3, #167	; 0xa7
 80004de:	d105      	bne.n	80004ec <escreve_string+0x44>
				texto[i+1]=0;
 80004e0:	89fb      	ldrh	r3, [r7, #14]
 80004e2:	3301      	adds	r3, #1
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
			}
			if(texto[i+1] == 161){
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	3301      	adds	r3, #1
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2ba1      	cmp	r3, #161	; 0xa1
 80004f8:	d105      	bne.n	8000506 <escreve_string+0x5e>
				texto[i+1]=1;
 80004fa:	89fb      	ldrh	r3, [r7, #14]
 80004fc:	3301      	adds	r3, #1
 80004fe:	683a      	ldr	r2, [r7, #0]
 8000500:	4413      	add	r3, r2
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
			}
			if(texto[i+1] == 169){
 8000506:	89fb      	ldrh	r3, [r7, #14]
 8000508:	3301      	adds	r3, #1
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	4413      	add	r3, r2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2ba9      	cmp	r3, #169	; 0xa9
 8000512:	d105      	bne.n	8000520 <escreve_string+0x78>
				texto[i+1]=2;
 8000514:	89fb      	ldrh	r3, [r7, #14]
 8000516:	3301      	adds	r3, #1
 8000518:	683a      	ldr	r2, [r7, #0]
 800051a:	4413      	add	r3, r2
 800051c:	2202      	movs	r2, #2
 800051e:	701a      	strb	r2, [r3, #0]
			}
			if(texto[i+1] == 163){
 8000520:	89fb      	ldrh	r3, [r7, #14]
 8000522:	3301      	adds	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	4413      	add	r3, r2
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2ba3      	cmp	r3, #163	; 0xa3
 800052c:	d105      	bne.n	800053a <escreve_string+0x92>
				texto[i+1]=3;
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	3301      	adds	r3, #1
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	4413      	add	r3, r2
 8000536:	2203      	movs	r2, #3
 8000538:	701a      	strb	r2, [r3, #0]
			}
			if(texto[i+1] == 181){
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2bb5      	cmp	r3, #181	; 0xb5
 8000546:	d105      	bne.n	8000554 <escreve_string+0xac>
				texto[i+1]=4;
 8000548:	89fb      	ldrh	r3, [r7, #14]
 800054a:	3301      	adds	r3, #1
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	4413      	add	r3, r2
 8000550:	2204      	movs	r2, #4
 8000552:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8000554:	89fb      	ldrh	r3, [r7, #14]
 8000556:	3301      	adds	r3, #1
 8000558:	81fb      	strh	r3, [r7, #14]
		}
		escreve_char(texto[i]);
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	4413      	add	r3, r2
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff2e 	bl	80003c4 <escreve_char>
		i++;
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	3301      	adds	r3, #1
 800056c:	81fb      	strh	r3, [r7, #14]
	while(i < 17 & texto[i] != '\0'){
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	2b10      	cmp	r3, #16
 8000572:	bf94      	ite	ls
 8000574:	2301      	movls	r3, #1
 8000576:	2300      	movhi	r3, #0
 8000578:	b2da      	uxtb	r2, r3
 800057a:	89fb      	ldrh	r3, [r7, #14]
 800057c:	6839      	ldr	r1, [r7, #0]
 800057e:	440b      	add	r3, r1
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	bf14      	ite	ne
 8000586:	2301      	movne	r3, #1
 8000588:	2300      	moveq	r3, #0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	4013      	ands	r3, r2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d198      	bne.n	80004c6 <escreve_string+0x1e>
	}
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <iniciar>:

void calibrar (void){
	  HAL_ADCEx_Calibration_Start(&hadc1);
}

void iniciar(void){
 800059c:	b490      	push	{r4, r7}
 800059e:	af00      	add	r7, sp, #0


	//Água natural em temperatura ambiente
	strcpy(capsula[0].nome, "água");
 80005a0:	4b59      	ldr	r3, [pc, #356]	; (8000708 <iniciar+0x16c>)
 80005a2:	4a5a      	ldr	r2, [pc, #360]	; (800070c <iniciar+0x170>)
 80005a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a8:	6018      	str	r0, [r3, #0]
 80005aa:	3304      	adds	r3, #4
 80005ac:	8019      	strh	r1, [r3, #0]
	capsula[0].temperatura = 0;
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <iniciar+0x16c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
	capsula[0].tempo = 2550; //tempo em ms com o tempo da bomba diminuido
 80005b4:	4b54      	ldr	r3, [pc, #336]	; (8000708 <iniciar+0x16c>)
 80005b6:	4a56      	ldr	r2, [pc, #344]	; (8000710 <iniciar+0x174>)
 80005b8:	615a      	str	r2, [r3, #20]
	capsula[0].gas = 0;
 80005ba:	4b53      	ldr	r3, [pc, #332]	; (8000708 <iniciar+0x16c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	761a      	strb	r2, [r3, #24]
	capsula[0].tipo = 0;
 80005c0:	4b51      	ldr	r3, [pc, #324]	; (8000708 <iniciar+0x16c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	835a      	strh	r2, [r3, #26]
	capsula[0].gast =0;
 80005c6:	4b50      	ldr	r3, [pc, #320]	; (8000708 <iniciar+0x16c>)
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]

	//Água natural aquecida
	strcpy(capsula[1].nome, "agua quente"); // nome da bebida
 80005ce:	4b51      	ldr	r3, [pc, #324]	; (8000714 <iniciar+0x178>)
 80005d0:	4a51      	ldr	r2, [pc, #324]	; (8000718 <iniciar+0x17c>)
 80005d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	capsula[1].temperatura = 60; //temperatura desejada
 80005d8:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <iniciar+0x16c>)
 80005da:	223c      	movs	r2, #60	; 0x3c
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
	capsula[1].tempo = 2550; //tempo em ms com o tempo da bomba diminuido
 80005de:	4b4a      	ldr	r3, [pc, #296]	; (8000708 <iniciar+0x16c>)
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <iniciar+0x174>)
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
	capsula[1].gas = 0; // sem gas
 80005e4:	4b48      	ldr	r3, [pc, #288]	; (8000708 <iniciar+0x16c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	capsula[1].tipo = 1; //aquecida
 80005ec:	4b46      	ldr	r3, [pc, #280]	; (8000708 <iniciar+0x16c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	875a      	strh	r2, [r3, #58]	; 0x3a
	capsula[1].gast =0; // sem gas
 80005f2:	4b45      	ldr	r3, [pc, #276]	; (8000708 <iniciar+0x16c>)
 80005f4:	f04f 0200 	mov.w	r2, #0
 80005f8:	63da      	str	r2, [r3, #60]	; 0x3c

	//Água natural resfriada
	strcpy(capsula[2].nome, "água gelada");
 80005fa:	4a48      	ldr	r2, [pc, #288]	; (800071c <iniciar+0x180>)
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <iniciar+0x184>)
 80005fe:	4614      	mov	r4, r2
 8000600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000602:	c407      	stmia	r4!, {r0, r1, r2}
 8000604:	7023      	strb	r3, [r4, #0]
	capsula[2].temperatura = 15;
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <iniciar+0x16c>)
 8000608:	220f      	movs	r2, #15
 800060a:	651a      	str	r2, [r3, #80]	; 0x50
	capsula[2].tempo = 2550; //tempo em ms com o tempo da bomba diminuido
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <iniciar+0x16c>)
 800060e:	4a40      	ldr	r2, [pc, #256]	; (8000710 <iniciar+0x174>)
 8000610:	655a      	str	r2, [r3, #84]	; 0x54
	capsula[2].gas = 0; //sem gas
 8000612:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <iniciar+0x16c>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	capsula[2].tipo = 2; //Gelada
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <iniciar+0x16c>)
 800061c:	2202      	movs	r2, #2
 800061e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	capsula[2].gast =0; // sem gas
 8000622:	4b39      	ldr	r3, [pc, #228]	; (8000708 <iniciar+0x16c>)
 8000624:	f04f 0200 	mov.w	r2, #0
 8000628:	65da      	str	r2, [r3, #92]	; 0x5c

	//Água com gás
	strcpy(capsula[3].nome, "água com gás");
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <iniciar+0x16c>)
 800062c:	4a3d      	ldr	r2, [pc, #244]	; (8000724 <iniciar+0x188>)
 800062e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000632:	4613      	mov	r3, r2
 8000634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000636:	c407      	stmia	r4!, {r0, r1, r2}
 8000638:	8023      	strh	r3, [r4, #0]
 800063a:	3402      	adds	r4, #2
 800063c:	0c1b      	lsrs	r3, r3, #16
 800063e:	7023      	strb	r3, [r4, #0]
	capsula[3].temperatura = 15;
 8000640:	4b31      	ldr	r3, [pc, #196]	; (8000708 <iniciar+0x16c>)
 8000642:	220f      	movs	r2, #15
 8000644:	671a      	str	r2, [r3, #112]	; 0x70
	capsula[3].tempo = 1050; //tempo em ms com o tempo da bomba diminuido
 8000646:	4b30      	ldr	r3, [pc, #192]	; (8000708 <iniciar+0x16c>)
 8000648:	4a37      	ldr	r2, [pc, #220]	; (8000728 <iniciar+0x18c>)
 800064a:	675a      	str	r2, [r3, #116]	; 0x74
	capsula[3].gas = 1; //COM GAS
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <iniciar+0x16c>)
 800064e:	2201      	movs	r2, #1
 8000650:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	capsula[3].tipo = 2; // GELADA
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <iniciar+0x16c>)
 8000656:	2202      	movs	r2, #2
 8000658:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	capsula[3].gast =1300; //1,5 SEGUNDOS - 200 MS DA BOMBA
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <iniciar+0x16c>)
 800065e:	4a33      	ldr	r2, [pc, #204]	; (800072c <iniciar+0x190>)
 8000660:	67da      	str	r2, [r3, #124]	; 0x7c

	//Chá gelado
	strcpy(capsula[4].nome, "chá gelado");
 8000662:	4b33      	ldr	r3, [pc, #204]	; (8000730 <iniciar+0x194>)
 8000664:	4a33      	ldr	r2, [pc, #204]	; (8000734 <iniciar+0x198>)
 8000666:	ca07      	ldmia	r2, {r0, r1, r2}
 8000668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	capsula[4].temperatura = 20;
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <iniciar+0x16c>)
 800066e:	2214      	movs	r2, #20
 8000670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	capsula[4].tempo = 2250; //2,7 segundos - 450 ms da bomba
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <iniciar+0x16c>)
 8000676:	4a30      	ldr	r2, [pc, #192]	; (8000738 <iniciar+0x19c>)
 8000678:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	capsula[4].gas = 0; //SEM GAS
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <iniciar+0x16c>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	capsula[4].tipo = 2; // GELADA
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <iniciar+0x16c>)
 8000686:	2202      	movs	r2, #2
 8000688:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	capsula[4].gast =0; // SEM GAS
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <iniciar+0x16c>)
 800068e:	f04f 0200 	mov.w	r2, #0
 8000692:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	//Chá quente
	strcpy(capsula[5].nome, "chá quente");
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <iniciar+0x1a0>)
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <iniciar+0x1a4>)
 800069a:	ca07      	ldmia	r2, {r0, r1, r2}
 800069c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	capsula[5].temperatura = 60;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <iniciar+0x16c>)
 80006a2:	223c      	movs	r2, #60	; 0x3c
 80006a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	capsula[5].tempo = 2250; //2,7S -450 MS DA BOMBA
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <iniciar+0x16c>)
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <iniciar+0x19c>)
 80006ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	capsula[5].gas = 0;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <iniciar+0x16c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	capsula[5].tipo = 1;// QUENTE
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <iniciar+0x16c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	capsula[5].gast =0;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <iniciar+0x16c>)
 80006c2:	f04f 0200 	mov.w	r2, #0
 80006c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//Refrigerante
	strcpy(capsula[6].nome, "refrigerante");
 80006ca:	4a1e      	ldr	r2, [pc, #120]	; (8000744 <iniciar+0x1a8>)
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <iniciar+0x1ac>)
 80006ce:	4614      	mov	r4, r2
 80006d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d2:	c407      	stmia	r4!, {r0, r1, r2}
 80006d4:	7023      	strb	r3, [r4, #0]
	capsula[6].temperatura = 17;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <iniciar+0x16c>)
 80006d8:	2211      	movs	r2, #17
 80006da:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	capsula[6].tempo = (3550-2360); //4S - 450 MS DA BOMBA - TEMPO DO GAS
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <iniciar+0x16c>)
 80006e0:	4a1a      	ldr	r2, [pc, #104]	; (800074c <iniciar+0x1b0>)
 80006e2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	capsula[6].gas = 0;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <iniciar+0x16c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	capsula[6].tipo = 2;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <iniciar+0x16c>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	capsula[6].gast =2360;
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <iniciar+0x16c>)
 80006f8:	4a15      	ldr	r2, [pc, #84]	; (8000750 <iniciar+0x1b4>)
 80006fa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc90      	pop	{r4, r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000ec 	.word	0x200000ec
 800070c:	08003a4c 	.word	0x08003a4c
 8000710:	451f6000 	.word	0x451f6000
 8000714:	2000010c 	.word	0x2000010c
 8000718:	08003a54 	.word	0x08003a54
 800071c:	2000012c 	.word	0x2000012c
 8000720:	08003a60 	.word	0x08003a60
 8000724:	08003a70 	.word	0x08003a70
 8000728:	44834000 	.word	0x44834000
 800072c:	44a28000 	.word	0x44a28000
 8000730:	2000016c 	.word	0x2000016c
 8000734:	08003a80 	.word	0x08003a80
 8000738:	450ca000 	.word	0x450ca000
 800073c:	2000018c 	.word	0x2000018c
 8000740:	08003a8c 	.word	0x08003a8c
 8000744:	200001ac 	.word	0x200001ac
 8000748:	08003a98 	.word	0x08003a98
 800074c:	4494c000 	.word	0x4494c000
 8000750:	45138000 	.word	0x45138000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fece 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f846 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 faba 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000764:	f000 fa9a 	bl	8000c9c <MX_DMA_Init>
  MX_ADC1_Init();
 8000768:	f000 f898 	bl	800089c <MX_ADC1_Init>
  MX_TIM2_Init();
 800076c:	f000 f98c 	bl	8000a88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000770:	f000 f9f8 	bl	8000b64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000774:	f000 fa44 	bl	8000c00 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000778:	2100      	movs	r1, #0
 800077a:	4818      	ldr	r0, [pc, #96]	; (80007dc <main+0x88>)
 800077c:	f002 fad6 	bl	8002d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000780:	2104      	movs	r1, #4
 8000782:	4816      	ldr	r0, [pc, #88]	; (80007dc <main+0x88>)
 8000784:	f002 fad2 	bl	8002d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000788:	2108      	movs	r1, #8
 800078a:	4814      	ldr	r0, [pc, #80]	; (80007dc <main+0x88>)
 800078c:	f002 face 	bl	8002d2c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <main+0x8c>)
 8000792:	f002 fa29 	bl	8002be8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000796:	4813      	ldr	r0, [pc, #76]	; (80007e4 <main+0x90>)
 8000798:	f002 fa26 	bl	8002be8 <HAL_TIM_Base_Start_IT>
  inicializa();
 800079c:	f7ff fcf0 	bl	8000180 <inicializa>
  iniciar();
 80007a0:	f7ff fefc 	bl	800059c <iniciar>
  capsulaEscolhida(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fd47 	bl	8001238 <capsulaEscolhida>
  capsulaEscolhida(2);
 80007aa:	2002      	movs	r0, #2
 80007ac:	f000 fd44 	bl	8001238 <capsulaEscolhida>
  capsulaEscolhida(3);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 fd41 	bl	8001238 <capsulaEscolhida>
  capsulaEscolhida(4);
 80007b6:	2004      	movs	r0, #4
 80007b8:	f000 fd3e 	bl	8001238 <capsulaEscolhida>
  capsulaEscolhida(5);
 80007bc:	2005      	movs	r0, #5
 80007be:	f000 fd3b 	bl	8001238 <capsulaEscolhida>
  capsulaEscolhida(6);
 80007c2:	2006      	movs	r0, #6
 80007c4:	f000 fd38 	bl	8001238 <capsulaEscolhida>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 80007c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <main+0x94>)
 80007ce:	f001 fd01 	bl	80021d4 <HAL_GPIO_TogglePin>
	  //aguaNatural();
	  HAL_Delay(200);
 80007d2:	20c8      	movs	r0, #200	; 0xc8
 80007d4:	f000 fef2 	bl	80015bc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 80007d8:	e7f6      	b.n	80007c8 <main+0x74>
 80007da:	bf00      	nop
 80007dc:	200002c0 	.word	0x200002c0
 80007e0:	20000278 	.word	0x20000278
 80007e4:	20000230 	.word	0x20000230
 80007e8:	40010800 	.word	0x40010800

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 f912 	bl	8003a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800082c:	2300      	movs	r3, #0
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000830:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fce4 	bl	8002208 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000846:	f000 fb39 	bl	8000ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f001 ff4e 	bl	8002708 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000872:	f000 fb23 	bl	8000ebc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000876:	2302      	movs	r3, #2
 8000878:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800087a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800087e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f002 f8aa 	bl	80029dc <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800088e:	f000 fb15 	bl	8000ebc <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ac:	4b74      	ldr	r3, [pc, #464]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008ae:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <MX_ADC1_Init+0x1e8>)
 80008b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008b2:	4b73      	ldr	r3, [pc, #460]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ba:	4b71      	ldr	r3, [pc, #452]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c0:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b6e      	ldr	r3, [pc, #440]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ce:	4b6c      	ldr	r3, [pc, #432]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 80008d4:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008d6:	2210      	movs	r2, #16
 80008d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008da:	4869      	ldr	r0, [pc, #420]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008dc:	f000 fe90 	bl	8001600 <HAL_ADC_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80008e6:	f000 fae9 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4861      	ldr	r0, [pc, #388]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80008fc:	f000 ff58 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 fad9 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800090a:	2302      	movs	r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	485b      	ldr	r0, [pc, #364]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 8000914:	f000 ff4c 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800091e:	f000 facd 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000922:	2303      	movs	r3, #3
 8000924:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4619      	mov	r1, r3
 800092a:	4855      	ldr	r0, [pc, #340]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 800092c:	f000 ff40 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000936:	f000 fac1 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800093a:	2304      	movs	r3, #4
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	484f      	ldr	r0, [pc, #316]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 8000944:	f000 ff34 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800094e:	f000 fab5 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000952:	2305      	movs	r3, #5
 8000954:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4849      	ldr	r0, [pc, #292]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 800095c:	f000 ff28 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000966:	f000 faa9 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800096a:	2306      	movs	r3, #6
 800096c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4843      	ldr	r0, [pc, #268]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 8000974:	f000 ff1c 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800097e:	f000 fa9d 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000982:	2307      	movs	r3, #7
 8000984:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	483d      	ldr	r0, [pc, #244]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 800098c:	f000 ff10 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000996:	f000 fa91 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800099a:	2308      	movs	r3, #8
 800099c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4837      	ldr	r0, [pc, #220]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80009a4:	f000 ff04 	bl	80017b0 <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80009ae:	f000 fa85 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80009b6:	2309      	movs	r3, #9
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4830      	ldr	r0, [pc, #192]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80009c0:	f000 fef6 	bl	80017b0 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80009ca:	f000 fa77 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80009ce:	230a      	movs	r3, #10
 80009d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	482a      	ldr	r0, [pc, #168]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80009d8:	f000 feea 	bl	80017b0 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80009e2:	f000 fa6b 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80009e6:	230b      	movs	r3, #11
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4824      	ldr	r0, [pc, #144]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 80009f0:	f000 fede 	bl	80017b0 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80009fa:	f000 fa5f 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80009fe:	230c      	movs	r3, #12
 8000a00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	481e      	ldr	r0, [pc, #120]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 8000a08:	f000 fed2 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8000a12:	f000 fa53 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000a16:	230d      	movs	r3, #13
 8000a18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 8000a20:	f000 fec6 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000a2a:	f000 fa47 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000a2e:	230e      	movs	r3, #14
 8000a30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	4812      	ldr	r0, [pc, #72]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 8000a38:	f000 feba 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8000a42:	f000 fa3b 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000a46:	230f      	movs	r3, #15
 8000a48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 8000a50:	f000 feae 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 8000a5a:	f000 fa2f 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_ADC1_Init+0x1e4>)
 8000a68:	f000 fea2 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8000a72:	f000 fa23 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000068 	.word	0x20000068
 8000a84:	40012400 	.word	0x40012400

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
 8000aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000ac0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ac4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad2:	4823      	ldr	r0, [pc, #140]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000ad4:	f002 f8da 	bl	8002c8c <HAL_TIM_PWM_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ade:	f000 f9ed 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	4619      	mov	r1, r3
 8000af0:	481b      	ldr	r0, [pc, #108]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000af2:	f002 ff03 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000afc:	f000 f9de 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4812      	ldr	r0, [pc, #72]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000b18:	f002 fab2 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b22:	f000 f9cb 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000b2e:	f002 faa7 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b38:	f000 f9c0 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000b44:	f002 fa9c 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000b4e:	f000 f9b5 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <MX_TIM2_Init+0xd8>)
 8000b54:	f000 fab0 	bl	80010b8 <HAL_TIM_MspPostInit>

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200002c0 	.word	0x200002c0

08000b64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <MX_TIM3_Init+0x98>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5600-1;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000b88:	f241 52df 	movw	r2, #5599	; 0x15df
 8000b8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000b96:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000baa:	f001 ffcd 	bl	8002b48 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bb4:	f000 f982 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000bc6:	f002 fb19 	bl	80031fc <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bd0:	f000 f974 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_TIM3_Init+0x94>)
 8000be2:	f002 fe8b 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bec:	f000 f966 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000278 	.word	0x20000278
 8000bfc:	40000400 	.word	0x40000400

08000c00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <MX_TIM4_Init+0x98>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5600;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c24:	f44f 52af 	mov.w	r2, #5600	; 0x15e0
 8000c28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c32:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c44:	4813      	ldr	r0, [pc, #76]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c46:	f001 ff7f 	bl	8002b48 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000c50:	f000 f934 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c62:	f002 facb 	bl	80031fc <HAL_TIM_ConfigClockSource>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c6c:	f000 f926 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_TIM4_Init+0x94>)
 8000c7e:	f002 fe3d 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c88:	f000 f918 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000230 	.word	0x20000230
 8000c98:	40000800 	.word	0x40000800

08000c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_DMA_Init+0x38>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <MX_DMA_Init+0x38>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_DMA_Init+0x38>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	200b      	movs	r0, #11
 8000cc0:	f000 ff7f 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cc4:	200b      	movs	r0, #11
 8000cc6:	f000 ff98 	bl	8001bfa <HAL_NVIC_EnableIRQ>

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d04:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a38      	ldr	r2, [pc, #224]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <MX_GPIO_Init+0x12c>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d52:	482d      	ldr	r0, [pc, #180]	; (8000e08 <MX_GPIO_Init+0x130>)
 8000d54:	f001 fa26 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	21b8      	movs	r1, #184	; 0xb8
 8000d5c:	482b      	ldr	r0, [pc, #172]	; (8000e0c <MX_GPIO_Init+0x134>)
 8000d5e:	f001 fa21 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8000d68:	4829      	ldr	r0, [pc, #164]	; (8000e10 <MX_GPIO_Init+0x138>)
 8000d6a:	f001 fa1b 	bl	80021a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4820      	ldr	r0, [pc, #128]	; (8000e08 <MX_GPIO_Init+0x130>)
 8000d88:	f001 f8b2 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000d8c:	23b8      	movs	r3, #184	; 0xb8
 8000d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	481a      	ldr	r0, [pc, #104]	; (8000e0c <MX_GPIO_Init+0x134>)
 8000da4:	f001 f8a4 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000da8:	f44f 53f2 	mov.w	r3, #7744	; 0x1e40
 8000dac:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <MX_GPIO_Init+0x134>)
 8000dbe:	f001 f897 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000dc2:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8000dc6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <MX_GPIO_Init+0x138>)
 8000ddc:	f001 f888 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000de0:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4619      	mov	r1, r3
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_GPIO_Init+0x138>)
 8000df6:	f001 f87b 	bl	8001ef0 <HAL_GPIO_Init>

}
 8000dfa:	bf00      	nop
 8000dfc:	3720      	adds	r7, #32
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40010c00 	.word	0x40010c00

08000e14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

	if(htim == &htim3){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d132      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x76>
		segundos++;
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e26:	f993 3000 	ldrsb.w	r3, [r3]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e34:	701a      	strb	r2, [r3, #0]
		if(segundos == 60){
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e38:	f993 3000 	ldrsb.w	r3, [r3]
 8000e3c:	2b3c      	cmp	r3, #60	; 0x3c
 8000e3e:	d10b      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x44>
			minutos++;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e42:	f993 3000 	ldrsb.w	r3, [r3]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	b25a      	sxtb	r2, r3
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e50:	701a      	strb	r2, [r3, #0]
			segundos=0;
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		}
		if(minutos==60){
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5e:	2b3c      	cmp	r3, #60	; 0x3c
 8000e60:	d10b      	bne.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x66>
			horas++;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e64:	f993 3000 	ldrsb.w	r3, [r3]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	b25a      	sxtb	r2, r3
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e72:	701a      	strb	r2, [r3, #0]
			minutos=0;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
		}
		if(horas==24){
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e80:	2b18      	cmp	r3, #24
 8000e82:	d102      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x76>
			horas=00;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim == &htim4){
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d104      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e98:	f001 f99c 	bl	80021d4 <HAL_GPIO_TogglePin>
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000278 	.word	0x20000278
 8000ea8:	20000067 	.word	0x20000067
 8000eac:	200001ec 	.word	0x200001ec
 8000eb0:	20000064 	.word	0x20000064
 8000eb4:	20000230 	.word	0x20000230
 8000eb8:	40011000 	.word	0x40011000

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x5c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x60>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_MspInit+0x60>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000

08000f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <HAL_ADC_MspInit+0xbc>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d149      	bne.n	8000fe0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f4c:	4b27      	ldr	r3, [pc, #156]	; (8000fec <HAL_ADC_MspInit+0xc0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a26      	ldr	r2, [pc, #152]	; (8000fec <HAL_ADC_MspInit+0xc0>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <HAL_ADC_MspInit+0xc0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_ADC_MspInit+0xc0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <HAL_ADC_MspInit+0xc0>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_ADC_MspInit+0xc0>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f80:	2303      	movs	r3, #3
 8000f82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4819      	ldr	r0, [pc, #100]	; (8000ff0 <HAL_ADC_MspInit+0xc4>)
 8000f8c:	f000 ffb0 	bl	8001ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_ADC_MspInit+0xcc>)
 8000f94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000fba:	2220      	movs	r2, #32
 8000fbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000fc6:	f000 fe33 	bl	8001c30 <HAL_DMA_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000fd0:	f7ff ff74 	bl	8000ebc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000fd8:	621a      	str	r2, [r3, #32]
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_ADC_MspInit+0xc8>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40012400 	.word	0x40012400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	2000009c 	.word	0x2000009c
 8000ff8:	40020008 	.word	0x40020008

08000ffc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100c:	d10b      	bne.n	8001026 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_TIM_PWM_MspInit+0x34>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_TIM_PWM_MspInit+0x34>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_TIM_PWM_MspInit+0x34>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <HAL_TIM_Base_MspInit+0x78>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d114      	bne.n	8001070 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_TIM_Base_MspInit+0x7c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_TIM_Base_MspInit+0x7c>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_TIM_Base_MspInit+0x7c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	201d      	movs	r0, #29
 8001064:	f000 fdad 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001068:	201d      	movs	r0, #29
 800106a:	f000 fdc6 	bl	8001bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800106e:	e018      	b.n	80010a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_TIM_Base_MspInit+0x80>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d113      	bne.n	80010a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_TIM_Base_MspInit+0x7c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <HAL_TIM_Base_MspInit+0x7c>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_TIM_Base_MspInit+0x7c>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	201e      	movs	r0, #30
 8001098:	f000 fd93 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800109c:	201e      	movs	r0, #30
 800109e:	f000 fdac 	bl	8001bfa <HAL_NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40000400 	.word	0x40000400
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40000800 	.word	0x40000800

080010b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d6:	d142      	bne.n	800115e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_TIM_MspPostInit+0xb0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_TIM_MspPostInit+0xb0>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_TIM_MspPostInit+0xb0>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_TIM_MspPostInit+0xb0>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <HAL_TIM_MspPostInit+0xb0>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_TIM_MspPostInit+0xb0>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001108:	f248 0304 	movw	r3, #32772	; 0x8004
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4813      	ldr	r0, [pc, #76]	; (800116c <HAL_TIM_MspPostInit+0xb4>)
 800111e:	f000 fee7 	bl	8001ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001122:	2308      	movs	r3, #8
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2302      	movs	r3, #2
 800112c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	480e      	ldr	r0, [pc, #56]	; (8001170 <HAL_TIM_MspPostInit+0xb8>)
 8001136:	f000 fedb 	bl	8001ef0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_TIM_MspPostInit+0xbc>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_TIM_MspPostInit+0xbc>)
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40010000 	.word	0x40010000

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <HardFault_Handler+0x4>

0800118a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <MemManage_Handler+0x4>

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <BusFault_Handler+0x4>

08001196 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <UsageFault_Handler+0x4>

0800119c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 f9de 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <DMA1_Channel1_IRQHandler+0x10>)
 80011d2:	f000 fd87 	bl	8001ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000009c 	.word	0x2000009c

080011e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <TIM3_IRQHandler+0x10>)
 80011e6:	f001 fe43 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000278 	.word	0x20000278

080011f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM4_IRQHandler+0x10>)
 80011fa:	f001 fe39 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000230 	.word	0x20000230

08001208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <menuAgua>:
	limpar();
	escreve_string(0x80, "Resfriando...");
	escreve_string(0xC0, "Temp. Final:");
	variaveis(0xCC, tempDesejada);
}
 void menuAgua(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	limpar();
 8001218:	f7ff f8cc 	bl	80003b4 <limpar>
	escreve_string(0x80, "temperatura");
 800121c:	4904      	ldr	r1, [pc, #16]	; (8001230 <menuAgua+0x1c>)
 800121e:	2080      	movs	r0, #128	; 0x80
 8001220:	f7ff f942 	bl	80004a8 <escreve_string>
	escreve_string(0xc0, "Conf.| + - |Sair");
 8001224:	4903      	ldr	r1, [pc, #12]	; (8001234 <menuAgua+0x20>)
 8001226:	20c0      	movs	r0, #192	; 0xc0
 8001228:	f7ff f93e 	bl	80004a8 <escreve_string>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	08003ad8 	.word	0x08003ad8
 8001234:	08003ae4 	.word	0x08003ae4

08001238 <capsulaEscolhida>:
	limpar();
	escreve_string(0x80, "confirmar = C");
	escreve_string(0xc0, "Sair = S");
}

void capsulaEscolhida(int8_t tipo){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	switch (tipo){
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	3b01      	subs	r3, #1
 8001248:	2b05      	cmp	r3, #5
 800124a:	f200 811b 	bhi.w	8001484 <capsulaEscolhida+0x24c>
 800124e:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <capsulaEscolhida+0x1c>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	0800126d 	.word	0x0800126d
 8001258:	080012d7 	.word	0x080012d7
 800125c:	08001345 	.word	0x08001345
 8001260:	080013ab 	.word	0x080013ab
 8001264:	08001411 	.word	0x08001411
 8001268:	08001477 	.word	0x08001477
	case 1:
		limpar();
 800126c:	f7ff f8a2 	bl	80003b4 <limpar>
		escreve_string(0x84, "Capsula");
 8001270:	4986      	ldr	r1, [pc, #536]	; (800148c <capsulaEscolhida+0x254>)
 8001272:	2084      	movs	r0, #132	; 0x84
 8001274:	f7ff f918 	bl	80004a8 <escreve_string>
		escreve_string(0xC6, capsula[0].nome);
 8001278:	4985      	ldr	r1, [pc, #532]	; (8001490 <capsulaEscolhida+0x258>)
 800127a:	20c6      	movs	r0, #198	; 0xc6
 800127c:	f7ff f914 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 8001280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001284:	f000 f99a 	bl	80015bc <HAL_Delay>

		limpar();
 8001288:	f7ff f894 	bl	80003b4 <limpar>
		HAL_Delay(300);
 800128c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001290:	f000 f994 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 8001294:	497f      	ldr	r1, [pc, #508]	; (8001494 <capsulaEscolhida+0x25c>)
 8001296:	2084      	movs	r0, #132	; 0x84
 8001298:	f7ff f906 	bl	80004a8 <escreve_string>
		escreve_string(0xC6, capsula[0].nome);
 800129c:	497c      	ldr	r1, [pc, #496]	; (8001490 <capsulaEscolhida+0x258>)
 800129e:	20c6      	movs	r0, #198	; 0xc6
 80012a0:	f7ff f902 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 80012a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a8:	f000 f988 	bl	80015bc <HAL_Delay>

		limpar();
 80012ac:	f7ff f882 	bl	80003b4 <limpar>
		HAL_Delay(300);
 80012b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012b4:	f000 f982 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 80012b8:	4976      	ldr	r1, [pc, #472]	; (8001494 <capsulaEscolhida+0x25c>)
 80012ba:	2084      	movs	r0, #132	; 0x84
 80012bc:	f7ff f8f4 	bl	80004a8 <escreve_string>
		escreve_string(0xC6, capsula[0].nome);
 80012c0:	4973      	ldr	r1, [pc, #460]	; (8001490 <capsulaEscolhida+0x258>)
 80012c2:	20c6      	movs	r0, #198	; 0xc6
 80012c4:	f7ff f8f0 	bl	80004a8 <escreve_string>
		HAL_Delay(4000);
 80012c8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80012cc:	f000 f976 	bl	80015bc <HAL_Delay>

		menuAgua();
 80012d0:	f7ff ffa0 	bl	8001214 <menuAgua>
		break;
 80012d4:	e0d6      	b.n	8001484 <capsulaEscolhida+0x24c>
	case 2:
		limpar();
 80012d6:	f7ff f86d 	bl	80003b4 <limpar>
		HAL_Delay(300);
 80012da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012de:	f000 f96d 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula");
 80012e2:	496a      	ldr	r1, [pc, #424]	; (800148c <capsulaEscolhida+0x254>)
 80012e4:	2084      	movs	r0, #132	; 0x84
 80012e6:	f7ff f8df 	bl	80004a8 <escreve_string>
		escreve_string(0xC2, capsula[3].nome);
 80012ea:	496b      	ldr	r1, [pc, #428]	; (8001498 <capsulaEscolhida+0x260>)
 80012ec:	20c2      	movs	r0, #194	; 0xc2
 80012ee:	f7ff f8db 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 80012f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f6:	f000 f961 	bl	80015bc <HAL_Delay>

		limpar();
 80012fa:	f7ff f85b 	bl	80003b4 <limpar>
		HAL_Delay(300);
 80012fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001302:	f000 f95b 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 8001306:	4963      	ldr	r1, [pc, #396]	; (8001494 <capsulaEscolhida+0x25c>)
 8001308:	2084      	movs	r0, #132	; 0x84
 800130a:	f7ff f8cd 	bl	80004a8 <escreve_string>
		escreve_string(0xC2, capsula[3].nome);
 800130e:	4962      	ldr	r1, [pc, #392]	; (8001498 <capsulaEscolhida+0x260>)
 8001310:	20c2      	movs	r0, #194	; 0xc2
 8001312:	f7ff f8c9 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 8001316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131a:	f000 f94f 	bl	80015bc <HAL_Delay>

		limpar();
 800131e:	f7ff f849 	bl	80003b4 <limpar>
		HAL_Delay(300);
 8001322:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001326:	f000 f949 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 800132a:	495a      	ldr	r1, [pc, #360]	; (8001494 <capsulaEscolhida+0x25c>)
 800132c:	2084      	movs	r0, #132	; 0x84
 800132e:	f7ff f8bb 	bl	80004a8 <escreve_string>
		escreve_string(0xC2, capsula[3].nome);
 8001332:	4959      	ldr	r1, [pc, #356]	; (8001498 <capsulaEscolhida+0x260>)
 8001334:	20c2      	movs	r0, #194	; 0xc2
 8001336:	f7ff f8b7 	bl	80004a8 <escreve_string>
		HAL_Delay(4000);
 800133a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800133e:	f000 f93d 	bl	80015bc <HAL_Delay>

		//confirmacao();
		break;
 8001342:	e09f      	b.n	8001484 <capsulaEscolhida+0x24c>
	case 3:
		limpar();
 8001344:	f7ff f836 	bl	80003b4 <limpar>
		escreve_string(0x84, "Capsula");
 8001348:	4950      	ldr	r1, [pc, #320]	; (800148c <capsulaEscolhida+0x254>)
 800134a:	2084      	movs	r0, #132	; 0x84
 800134c:	f7ff f8ac 	bl	80004a8 <escreve_string>
		escreve_string(0xC3, capsula[4].nome);
 8001350:	4952      	ldr	r1, [pc, #328]	; (800149c <capsulaEscolhida+0x264>)
 8001352:	20c3      	movs	r0, #195	; 0xc3
 8001354:	f7ff f8a8 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 8001358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135c:	f000 f92e 	bl	80015bc <HAL_Delay>

		limpar();
 8001360:	f7ff f828 	bl	80003b4 <limpar>
		HAL_Delay(300);
 8001364:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001368:	f000 f928 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 800136c:	4949      	ldr	r1, [pc, #292]	; (8001494 <capsulaEscolhida+0x25c>)
 800136e:	2084      	movs	r0, #132	; 0x84
 8001370:	f7ff f89a 	bl	80004a8 <escreve_string>
		escreve_string(0xC3, capsula[4].nome);
 8001374:	4949      	ldr	r1, [pc, #292]	; (800149c <capsulaEscolhida+0x264>)
 8001376:	20c3      	movs	r0, #195	; 0xc3
 8001378:	f7ff f896 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 800137c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001380:	f000 f91c 	bl	80015bc <HAL_Delay>

		limpar();
 8001384:	f7ff f816 	bl	80003b4 <limpar>
		HAL_Delay(300);
 8001388:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800138c:	f000 f916 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 8001390:	4940      	ldr	r1, [pc, #256]	; (8001494 <capsulaEscolhida+0x25c>)
 8001392:	2084      	movs	r0, #132	; 0x84
 8001394:	f7ff f888 	bl	80004a8 <escreve_string>
		escreve_string(0xC3, capsula[4].nome);
 8001398:	4940      	ldr	r1, [pc, #256]	; (800149c <capsulaEscolhida+0x264>)
 800139a:	20c3      	movs	r0, #195	; 0xc3
 800139c:	f7ff f884 	bl	80004a8 <escreve_string>
		HAL_Delay(4000);
 80013a0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80013a4:	f000 f90a 	bl	80015bc <HAL_Delay>

		break;
 80013a8:	e06c      	b.n	8001484 <capsulaEscolhida+0x24c>
	case 4:
		limpar();
 80013aa:	f7ff f803 	bl	80003b4 <limpar>
		escreve_string(0x84, "Capsula");
 80013ae:	4937      	ldr	r1, [pc, #220]	; (800148c <capsulaEscolhida+0x254>)
 80013b0:	2084      	movs	r0, #132	; 0x84
 80013b2:	f7ff f879 	bl	80004a8 <escreve_string>
		escreve_string(0xC3, capsula[5].nome);
 80013b6:	493a      	ldr	r1, [pc, #232]	; (80014a0 <capsulaEscolhida+0x268>)
 80013b8:	20c3      	movs	r0, #195	; 0xc3
 80013ba:	f7ff f875 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 80013be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c2:	f000 f8fb 	bl	80015bc <HAL_Delay>

		limpar();
 80013c6:	f7fe fff5 	bl	80003b4 <limpar>
		HAL_Delay(300);
 80013ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013ce:	f000 f8f5 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 80013d2:	4930      	ldr	r1, [pc, #192]	; (8001494 <capsulaEscolhida+0x25c>)
 80013d4:	2084      	movs	r0, #132	; 0x84
 80013d6:	f7ff f867 	bl	80004a8 <escreve_string>
		escreve_string(0xC3, capsula[5].nome);
 80013da:	4931      	ldr	r1, [pc, #196]	; (80014a0 <capsulaEscolhida+0x268>)
 80013dc:	20c3      	movs	r0, #195	; 0xc3
 80013de:	f7ff f863 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 80013e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e6:	f000 f8e9 	bl	80015bc <HAL_Delay>

		limpar();
 80013ea:	f7fe ffe3 	bl	80003b4 <limpar>
		HAL_Delay(300);
 80013ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013f2:	f000 f8e3 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 80013f6:	4927      	ldr	r1, [pc, #156]	; (8001494 <capsulaEscolhida+0x25c>)
 80013f8:	2084      	movs	r0, #132	; 0x84
 80013fa:	f7ff f855 	bl	80004a8 <escreve_string>
		escreve_string(0xC3, capsula[5].nome);
 80013fe:	4928      	ldr	r1, [pc, #160]	; (80014a0 <capsulaEscolhida+0x268>)
 8001400:	20c3      	movs	r0, #195	; 0xc3
 8001402:	f7ff f851 	bl	80004a8 <escreve_string>
		HAL_Delay(4000);
 8001406:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800140a:	f000 f8d7 	bl	80015bc <HAL_Delay>

		break;
 800140e:	e039      	b.n	8001484 <capsulaEscolhida+0x24c>
	case 5:
		limpar();
 8001410:	f7fe ffd0 	bl	80003b4 <limpar>
		escreve_string(0x84, "Capsula");
 8001414:	491d      	ldr	r1, [pc, #116]	; (800148c <capsulaEscolhida+0x254>)
 8001416:	2084      	movs	r0, #132	; 0x84
 8001418:	f7ff f846 	bl	80004a8 <escreve_string>
		escreve_string(0xC2, capsula[6].nome);
 800141c:	4921      	ldr	r1, [pc, #132]	; (80014a4 <capsulaEscolhida+0x26c>)
 800141e:	20c2      	movs	r0, #194	; 0xc2
 8001420:	f7ff f842 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 8001424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001428:	f000 f8c8 	bl	80015bc <HAL_Delay>

		limpar();
 800142c:	f7fe ffc2 	bl	80003b4 <limpar>
		HAL_Delay(300);
 8001430:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001434:	f000 f8c2 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 8001438:	4916      	ldr	r1, [pc, #88]	; (8001494 <capsulaEscolhida+0x25c>)
 800143a:	2084      	movs	r0, #132	; 0x84
 800143c:	f7ff f834 	bl	80004a8 <escreve_string>
		escreve_string(0xC2, capsula[6].nome);
 8001440:	4918      	ldr	r1, [pc, #96]	; (80014a4 <capsulaEscolhida+0x26c>)
 8001442:	20c2      	movs	r0, #194	; 0xc2
 8001444:	f7ff f830 	bl	80004a8 <escreve_string>
		HAL_Delay(1000);
 8001448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800144c:	f000 f8b6 	bl	80015bc <HAL_Delay>

		limpar();
 8001450:	f7fe ffb0 	bl	80003b4 <limpar>
		HAL_Delay(300);
 8001454:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001458:	f000 f8b0 	bl	80015bc <HAL_Delay>
		escreve_string(0x84, "Capsula   ");
 800145c:	490d      	ldr	r1, [pc, #52]	; (8001494 <capsulaEscolhida+0x25c>)
 800145e:	2084      	movs	r0, #132	; 0x84
 8001460:	f7ff f822 	bl	80004a8 <escreve_string>
		escreve_string(0xC2, capsula[6].nome);
 8001464:	490f      	ldr	r1, [pc, #60]	; (80014a4 <capsulaEscolhida+0x26c>)
 8001466:	20c2      	movs	r0, #194	; 0xc2
 8001468:	f7ff f81e 	bl	80004a8 <escreve_string>
		HAL_Delay(4000);
 800146c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001470:	f000 f8a4 	bl	80015bc <HAL_Delay>

		break;
 8001474:	e006      	b.n	8001484 <capsulaEscolhida+0x24c>
	case 6:
		limpar();
 8001476:	f7fe ff9d 	bl	80003b4 <limpar>
		escreve_string(0x80, "Capsula vazia");
 800147a:	490b      	ldr	r1, [pc, #44]	; (80014a8 <capsulaEscolhida+0x270>)
 800147c:	2080      	movs	r0, #128	; 0x80
 800147e:	f7ff f813 	bl	80004a8 <escreve_string>
		break;
 8001482:	bf00      	nop
	}
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	08003b24 	.word	0x08003b24
 8001490:	200000ec 	.word	0x200000ec
 8001494:	08003b2c 	.word	0x08003b2c
 8001498:	2000014c 	.word	0x2000014c
 800149c:	2000016c 	.word	0x2000016c
 80014a0:	2000018c 	.word	0x2000018c
 80014a4:	200001ac 	.word	0x200001ac
 80014a8:	08003b38 	.word	0x08003b38

080014ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014ae:	e003      	b.n	80014b8 <LoopCopyDataInit>

080014b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014b6:	3104      	adds	r1, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014b8:	480a      	ldr	r0, [pc, #40]	; (80014e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014c0:	d3f6      	bcc.n	80014b0 <CopyDataInit>
  ldr r2, =_sbss
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014c4:	e002      	b.n	80014cc <LoopFillZerobss>

080014c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014c8:	f842 3b04 	str.w	r3, [r2], #4

080014cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014d0:	d3f9      	bcc.n	80014c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014d2:	f7ff fe99 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f002 fa81 	bl	80039dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014da:	f7ff f93b 	bl	8000754 <main>
  bx lr
 80014de:	4770      	bx	lr
  ldr r3, =_sidata
 80014e0:	08003ba8 	.word	0x08003ba8
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014e8:	20000048 	.word	0x20000048
  ldr r2, =_sbss
 80014ec:	20000048 	.word	0x20000048
  ldr r3, = _ebss
 80014f0:	2000030c 	.word	0x2000030c

080014f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC1_2_IRQHandler>
	...

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x28>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 fb4f 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fcd8 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40022000 	.word	0x40022000

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fb67 	bl	8001c16 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 fb2f 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000003c 	.word	0x2000003c
 800157c:	20000044 	.word	0x20000044
 8001580:	20000040 	.word	0x20000040

08001584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x1c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x20>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <HAL_IncTick+0x20>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000044 	.word	0x20000044
 80015a4:	20000308 	.word	0x20000308

080015a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <HAL_GetTick+0x10>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	20000308 	.word	0x20000308

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff fff0 	bl	80015a8 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_Delay+0x40>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffe0 	bl	80015a8 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000044 	.word	0x20000044

08001600 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0be      	b.n	80017a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	2b00      	cmp	r3, #0
 800162e:	d109      	bne.n	8001644 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fc74 	bl	8000f2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f9ab 	bl	80019a0 <ADC_ConversionStop_Disable>
 800164a:	4603      	mov	r3, r0
 800164c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 8099 	bne.w	800178e <HAL_ADC_Init+0x18e>
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 8095 	bne.w	800178e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800166c:	f023 0302 	bic.w	r3, r3, #2
 8001670:	f043 0202 	orr.w	r2, r3, #2
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001680:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7b1b      	ldrb	r3, [r3, #12]
 8001686:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001688:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4313      	orrs	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001698:	d003      	beq.n	80016a2 <HAL_ADC_Init+0xa2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d102      	bne.n	80016a8 <HAL_ADC_Init+0xa8>
 80016a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a6:	e000      	b.n	80016aa <HAL_ADC_Init+0xaa>
 80016a8:	2300      	movs	r3, #0
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7d1b      	ldrb	r3, [r3, #20]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d119      	bne.n	80016ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7b1b      	ldrb	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	035a      	lsls	r2, r3, #13
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	e00b      	b.n	80016ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f043 0220 	orr.w	r2, r3, #32
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <HAL_ADC_Init+0x1a8>)
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	430b      	orrs	r3, r1
 8001712:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800171c:	d003      	beq.n	8001726 <HAL_ADC_Init+0x126>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d104      	bne.n	8001730 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	3b01      	subs	r3, #1
 800172c:	051b      	lsls	r3, r3, #20
 800172e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	430a      	orrs	r2, r1
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_ADC_Init+0x1ac>)
 800174c:	4013      	ands	r3, r2
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d10b      	bne.n	800176c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800176a:	e018      	b.n	800179e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f023 0312 	bic.w	r3, r3, #18
 8001774:	f043 0210 	orr.w	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800178c:	e007      	b.n	800179e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	ffe1f7fd 	.word	0xffe1f7fd
 80017ac:	ff1f0efe 	.word	0xff1f0efe

080017b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x20>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0dc      	b.n	800198a <HAL_ADC_ConfigChannel+0x1da>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b06      	cmp	r3, #6
 80017de:	d81c      	bhi.n	800181a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b05      	subs	r3, #5
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b05      	subs	r3, #5
 800180c:	fa00 f203 	lsl.w	r2, r0, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	635a      	str	r2, [r3, #52]	; 0x34
 8001818:	e03c      	b.n	8001894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d81c      	bhi.n	800185c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b23      	subs	r3, #35	; 0x23
 8001834:	221f      	movs	r2, #31
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	4019      	ands	r1, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	3b23      	subs	r3, #35	; 0x23
 800184e:	fa00 f203 	lsl.w	r2, r0, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
 800185a:	e01b      	b.n	8001894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b41      	subs	r3, #65	; 0x41
 800186e:	221f      	movs	r2, #31
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	4019      	ands	r1, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b41      	subs	r3, #65	; 0x41
 8001888:	fa00 f203 	lsl.w	r2, r0, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d91c      	bls.n	80018d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	3b1e      	subs	r3, #30
 80018ae:	2207      	movs	r2, #7
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4019      	ands	r1, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	3b1e      	subs	r3, #30
 80018c8:	fa00 f203 	lsl.w	r2, r0, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	e019      	b.n	800190a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6919      	ldr	r1, [r3, #16]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	2207      	movs	r2, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4019      	ands	r1, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6898      	ldr	r0, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b10      	cmp	r3, #16
 8001910:	d003      	beq.n	800191a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001916:	2b11      	cmp	r3, #17
 8001918:	d132      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_ADC_ConfigChannel+0x1e4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d125      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d126      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001940:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d11a      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_ADC_ConfigChannel+0x1e8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_ADC_ConfigChannel+0x1ec>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9a      	lsrs	r2, r3, #18
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001960:	e002      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3b01      	subs	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x1b2>
 800196e:	e007      	b.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40012400 	.word	0x40012400
 8001998:	2000003c 	.word	0x2000003c
 800199c:	431bde83 	.word	0x431bde83

080019a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d127      	bne.n	8001a0a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ca:	f7ff fded 	bl	80015a8 <HAL_GetTick>
 80019ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019d0:	e014      	b.n	80019fc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019d2:	f7ff fde9 	bl	80015a8 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d90d      	bls.n	80019fc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	f043 0210 	orr.w	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e007      	b.n	8001a0c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d0e3      	beq.n	80019d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <__NVIC_EnableIRQ+0x34>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff90 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff2d 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff42 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff90 	bl	8001b04 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5f 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff35 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa2 	bl	8001b68 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e043      	b.n	8001cce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_DMA_Init+0xa8>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <HAL_DMA_Init+0xac>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	009a      	lsls	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <HAL_DMA_Init+0xb0>)
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	bffdfff8 	.word	0xbffdfff8
 8001cdc:	cccccccd 	.word	0xcccccccd
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2204      	movs	r2, #4
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d04f      	beq.n	8001dac <HAL_DMA_IRQHandler+0xc8>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d04a      	beq.n	8001dac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0204 	bic.w	r2, r2, #4
 8001d32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a66      	ldr	r2, [pc, #408]	; (8001ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d029      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xae>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_DMA_IRQHandler+0x1f4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xaa>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a63      	ldr	r2, [pc, #396]	; (8001edc <HAL_DMA_IRQHandler+0x1f8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01a      	beq.n	8001d88 <HAL_DMA_IRQHandler+0xa4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a62      	ldr	r2, [pc, #392]	; (8001ee0 <HAL_DMA_IRQHandler+0x1fc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d012      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x9e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a60      	ldr	r2, [pc, #384]	; (8001ee4 <HAL_DMA_IRQHandler+0x200>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00a      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x98>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_DMA_IRQHandler+0x204>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d102      	bne.n	8001d76 <HAL_DMA_IRQHandler+0x92>
 8001d70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d74:	e00e      	b.n	8001d94 <HAL_DMA_IRQHandler+0xb0>
 8001d76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d7a:	e00b      	b.n	8001d94 <HAL_DMA_IRQHandler+0xb0>
 8001d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d80:	e008      	b.n	8001d94 <HAL_DMA_IRQHandler+0xb0>
 8001d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d86:	e005      	b.n	8001d94 <HAL_DMA_IRQHandler+0xb0>
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	e002      	b.n	8001d94 <HAL_DMA_IRQHandler+0xb0>
 8001d8e:	2340      	movs	r3, #64	; 0x40
 8001d90:	e000      	b.n	8001d94 <HAL_DMA_IRQHandler+0xb0>
 8001d92:	2304      	movs	r3, #4
 8001d94:	4a55      	ldr	r2, [pc, #340]	; (8001eec <HAL_DMA_IRQHandler+0x208>)
 8001d96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8094 	beq.w	8001eca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001daa:	e08e      	b.n	8001eca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2202      	movs	r2, #2
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d056      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x186>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d051      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10b      	bne.n	8001dec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020a 	bic.w	r2, r2, #10
 8001de2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a38      	ldr	r2, [pc, #224]	; (8001ed4 <HAL_DMA_IRQHandler+0x1f0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d029      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x166>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a37      	ldr	r2, [pc, #220]	; (8001ed8 <HAL_DMA_IRQHandler+0x1f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d022      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x162>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a35      	ldr	r2, [pc, #212]	; (8001edc <HAL_DMA_IRQHandler+0x1f8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01a      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x15c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <HAL_DMA_IRQHandler+0x1fc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d012      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x156>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <HAL_DMA_IRQHandler+0x200>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00a      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x150>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a31      	ldr	r2, [pc, #196]	; (8001ee8 <HAL_DMA_IRQHandler+0x204>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d102      	bne.n	8001e2e <HAL_DMA_IRQHandler+0x14a>
 8001e28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e2c:	e00e      	b.n	8001e4c <HAL_DMA_IRQHandler+0x168>
 8001e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e32:	e00b      	b.n	8001e4c <HAL_DMA_IRQHandler+0x168>
 8001e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e38:	e008      	b.n	8001e4c <HAL_DMA_IRQHandler+0x168>
 8001e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3e:	e005      	b.n	8001e4c <HAL_DMA_IRQHandler+0x168>
 8001e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e44:	e002      	b.n	8001e4c <HAL_DMA_IRQHandler+0x168>
 8001e46:	2320      	movs	r3, #32
 8001e48:	e000      	b.n	8001e4c <HAL_DMA_IRQHandler+0x168>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_DMA_IRQHandler+0x208>)
 8001e4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d034      	beq.n	8001eca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e68:	e02f      	b.n	8001eca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2208      	movs	r2, #8
 8001e70:	409a      	lsls	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d028      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x1e8>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 020e 	bic.w	r2, r2, #14
 8001e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d004      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
    }
  }
  return;
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
}
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40020008 	.word	0x40020008
 8001ed8:	4002001c 	.word	0x4002001c
 8001edc:	40020030 	.word	0x40020030
 8001ee0:	40020044 	.word	0x40020044
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	4002006c 	.word	0x4002006c
 8001eec:	40020000 	.word	0x40020000

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b08b      	sub	sp, #44	; 0x2c
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e127      	b.n	8002154 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f04:	2201      	movs	r2, #1
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f040 8116 	bne.w	800214e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d034      	beq.n	8001f94 <HAL_GPIO_Init+0xa4>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d80d      	bhi.n	8001f4a <HAL_GPIO_Init+0x5a>
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d02b      	beq.n	8001f8a <HAL_GPIO_Init+0x9a>
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d804      	bhi.n	8001f40 <HAL_GPIO_Init+0x50>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d031      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d01c      	beq.n	8001f78 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3e:	e048      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d043      	beq.n	8001fcc <HAL_GPIO_Init+0xdc>
 8001f44:	2b11      	cmp	r3, #17
 8001f46:	d01b      	beq.n	8001f80 <HAL_GPIO_Init+0x90>
          break;
 8001f48:	e043      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f4a:	4a89      	ldr	r2, [pc, #548]	; (8002170 <HAL_GPIO_Init+0x280>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d026      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f50:	4a87      	ldr	r2, [pc, #540]	; (8002170 <HAL_GPIO_Init+0x280>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d806      	bhi.n	8001f64 <HAL_GPIO_Init+0x74>
 8001f56:	4a87      	ldr	r2, [pc, #540]	; (8002174 <HAL_GPIO_Init+0x284>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d020      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f5c:	4a86      	ldr	r2, [pc, #536]	; (8002178 <HAL_GPIO_Init+0x288>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01d      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
          break;
 8001f62:	e036      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f64:	4a85      	ldr	r2, [pc, #532]	; (800217c <HAL_GPIO_Init+0x28c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f6a:	4a85      	ldr	r2, [pc, #532]	; (8002180 <HAL_GPIO_Init+0x290>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d016      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f70:	4a84      	ldr	r2, [pc, #528]	; (8002184 <HAL_GPIO_Init+0x294>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
          break;
 8001f76:	e02c      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e028      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	3304      	adds	r3, #4
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e023      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	623b      	str	r3, [r7, #32]
          break;
 8001f92:	e01e      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	623b      	str	r3, [r7, #32]
          break;
 8001f9c:	e019      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	623b      	str	r3, [r7, #32]
          break;
 8001faa:	e012      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	611a      	str	r2, [r3, #16]
          break;
 8001fbe:	e008      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	615a      	str	r2, [r3, #20]
          break;
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2bff      	cmp	r3, #255	; 0xff
 8001fd6:	d801      	bhi.n	8001fdc <HAL_GPIO_Init+0xec>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	e001      	b.n	8001fe0 <HAL_GPIO_Init+0xf0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2bff      	cmp	r3, #255	; 0xff
 8001fe6:	d802      	bhi.n	8001fee <HAL_GPIO_Init+0xfe>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x104>
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	3b08      	subs	r3, #8
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	401a      	ands	r2, r3
 8002006:	6a39      	ldr	r1, [r7, #32]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	431a      	orrs	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8096 	beq.w	800214e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002022:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_GPIO_Init+0x298>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_GPIO_Init+0x298>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6193      	str	r3, [r2, #24]
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_GPIO_Init+0x298>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800203a:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_GPIO_Init+0x29c>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4b      	ldr	r2, [pc, #300]	; (8002190 <HAL_GPIO_Init+0x2a0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x19e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4a      	ldr	r2, [pc, #296]	; (8002194 <HAL_GPIO_Init+0x2a4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x19a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a49      	ldr	r2, [pc, #292]	; (8002198 <HAL_GPIO_Init+0x2a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x196>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a48      	ldr	r2, [pc, #288]	; (800219c <HAL_GPIO_Init+0x2ac>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x192>
 800207e:	2303      	movs	r3, #3
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x1a0>
 8002082:	2304      	movs	r3, #4
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x1a0>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x1a0>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x1a0>
 800208e:	2300      	movs	r3, #0
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020a0:	493a      	ldr	r1, [pc, #232]	; (800218c <HAL_GPIO_Init+0x29c>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4938      	ldr	r1, [pc, #224]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c8:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4933      	ldr	r1, [pc, #204]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	492e      	ldr	r1, [pc, #184]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
 80020ee:	e006      	b.n	80020fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4929      	ldr	r1, [pc, #164]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800210a:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4924      	ldr	r1, [pc, #144]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
 8002116:	e006      	b.n	8002126 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	43db      	mvns	r3, r3
 8002120:	491f      	ldr	r1, [pc, #124]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002122:	4013      	ands	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	491a      	ldr	r1, [pc, #104]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	60cb      	str	r3, [r1, #12]
 800213e:	e006      	b.n	800214e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4915      	ldr	r1, [pc, #84]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 800214a:	4013      	ands	r3, r2
 800214c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f aed0 	bne.w	8001f04 <HAL_GPIO_Init+0x14>
  }
}
 8002164:	bf00      	nop
 8002166:	372c      	adds	r7, #44	; 0x2c
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	10210000 	.word	0x10210000
 8002174:	10110000 	.word	0x10110000
 8002178:	10120000 	.word	0x10120000
 800217c:	10310000 	.word	0x10310000
 8002180:	10320000 	.word	0x10320000
 8002184:	10220000 	.word	0x10220000
 8002188:	40021000 	.word	0x40021000
 800218c:	40010000 	.word	0x40010000
 8002190:	40010800 	.word	0x40010800
 8002194:	40010c00 	.word	0x40010c00
 8002198:	40011000 	.word	0x40011000
 800219c:	40011400 	.word	0x40011400
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	611a      	str	r2, [r3, #16]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43d9      	mvns	r1, r3
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	400b      	ands	r3, r1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	611a      	str	r2, [r3, #16]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
	...

08002208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e26c      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8087 	beq.w	8002336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002228:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b04      	cmp	r3, #4
 8002232:	d00c      	beq.n	800224e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002234:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d112      	bne.n	8002266 <HAL_RCC_OscConfig+0x5e>
 8002240:	4b8c      	ldr	r3, [pc, #560]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d10b      	bne.n	8002266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224e:	4b89      	ldr	r3, [pc, #548]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d06c      	beq.n	8002334 <HAL_RCC_OscConfig+0x12c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d168      	bne.n	8002334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e246      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x76>
 8002270:	4b80      	ldr	r3, [pc, #512]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a7f      	ldr	r2, [pc, #508]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e02e      	b.n	80022dc <HAL_RCC_OscConfig+0xd4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x98>
 8002286:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a7a      	ldr	r2, [pc, #488]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b78      	ldr	r3, [pc, #480]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a77      	ldr	r2, [pc, #476]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0xd4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0xbc>
 80022aa:	4b72      	ldr	r3, [pc, #456]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a71      	ldr	r2, [pc, #452]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xd4>
 80022c4:	4b6b      	ldr	r3, [pc, #428]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a6a      	ldr	r2, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a67      	ldr	r2, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f960 	bl	80015a8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f95c 	bl	80015a8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1fa      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xe4>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f94c 	bl	80015a8 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff f948 	bl	80015a8 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1e6      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x10c>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002342:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800234e:	4b49      	ldr	r3, [pc, #292]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b08      	cmp	r3, #8
 8002358:	d11c      	bne.n	8002394 <HAL_RCC_OscConfig+0x18c>
 800235a:	4b46      	ldr	r3, [pc, #280]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	4b43      	ldr	r3, [pc, #268]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x176>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1ba      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4939      	ldr	r1, [pc, #228]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	e03a      	b.n	800240a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7ff f901 	bl	80015a8 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023aa:	f7ff f8fd 	bl	80015a8 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e19b      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4927      	ldr	r1, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7ff f8e0 	bl	80015a8 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ec:	f7ff f8dc 	bl	80015a8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e17a      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03a      	beq.n	800248c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d019      	beq.n	8002452 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7ff f8c0 	bl	80015a8 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff f8bc 	bl	80015a8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e15a      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800244a:	2001      	movs	r0, #1
 800244c:	f000 faa8 	bl	80029a0 <RCC_Delay>
 8002450:	e01c      	b.n	800248c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7ff f8a6 	bl	80015a8 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245e:	e00f      	b.n	8002480 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002460:	f7ff f8a2 	bl	80015a8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d908      	bls.n	8002480 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e140      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	42420000 	.word	0x42420000
 800247c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e9      	bne.n	8002460 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a6 	beq.w	80025e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4b97      	ldr	r3, [pc, #604]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b94      	ldr	r3, [pc, #592]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4a93      	ldr	r2, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	61d3      	str	r3, [r2, #28]
 80024b6:	4b91      	ldr	r3, [pc, #580]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b8e      	ldr	r3, [pc, #568]	; (8002700 <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d2:	4b8b      	ldr	r3, [pc, #556]	; (8002700 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a8a      	ldr	r2, [pc, #552]	; (8002700 <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7ff f863 	bl	80015a8 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7ff f85f 	bl	80015a8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b64      	cmp	r3, #100	; 0x64
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0fd      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x4f8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x312>
 800250c:	4b7b      	ldr	r3, [pc, #492]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a7a      	ldr	r2, [pc, #488]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6213      	str	r3, [r2, #32]
 8002518:	e02d      	b.n	8002576 <HAL_RCC_OscConfig+0x36e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x334>
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a75      	ldr	r2, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	4b73      	ldr	r3, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a72      	ldr	r2, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	e01c      	b.n	8002576 <HAL_RCC_OscConfig+0x36e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0x356>
 8002544:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a6c      	ldr	r2, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6213      	str	r3, [r2, #32]
 8002550:	4b6a      	ldr	r3, [pc, #424]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a69      	ldr	r2, [pc, #420]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	e00b      	b.n	8002576 <HAL_RCC_OscConfig+0x36e>
 800255e:	4b67      	ldr	r3, [pc, #412]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a66      	ldr	r2, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	4b64      	ldr	r3, [pc, #400]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a63      	ldr	r2, [pc, #396]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d015      	beq.n	80025aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7ff f813 	bl	80015a8 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7ff f80f 	bl	80015a8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0ab      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ee      	beq.n	8002586 <HAL_RCC_OscConfig+0x37e>
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7fe fffd 	bl	80015a8 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fff9 	bl	80015a8 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e095      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ee      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b48      	ldr	r3, [pc, #288]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	4a47      	ldr	r2, [pc, #284]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8081 	beq.w	80026f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d061      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d146      	bne.n	8002692 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002604:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_RCC_OscConfig+0x4fc>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe ffcd 	bl	80015a8 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe ffc9 	bl	80015a8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e067      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	492d      	ldr	r1, [pc, #180]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a19      	ldr	r1, [r3, #32]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	430b      	orrs	r3, r1
 800265e:	4927      	ldr	r1, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_RCC_OscConfig+0x4fc>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe ff9d 	bl	80015a8 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe ff99 	bl	80015a8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e037      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x46a>
 8002690:	e02f      	b.n	80026f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_RCC_OscConfig+0x4fc>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe ff86 	bl	80015a8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe ff82 	bl	80015a8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e020      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x498>
 80026be:	e018      	b.n	80026f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e013      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
 8002704:	42420060 	.word	0x42420060

08002708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d0      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800276e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d040      	beq.n	8002828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e073      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4936      	ldr	r1, [pc, #216]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fed6 	bl	80015a8 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7fe fed2 	bl	80015a8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e053      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d1eb      	bne.n	8002800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d210      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4601      	mov	r1, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	fa21 f303 	lsr.w	r3, r1, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1cc>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1d0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fe34 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08003b90 	.word	0x08003b90
 80028d4:	2000003c 	.word	0x2000003c
 80028d8:	20000040 	.word	0x20000040

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b490      	push	{r4, r7}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028e4:	1d3c      	adds	r4, r7, #4
 80028e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002906:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x46>
 800291a:	e02d      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800291e:	623b      	str	r3, [r7, #32]
      break;
 8002920:	e02d      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	0c9b      	lsrs	r3, r3, #18
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800292e:	4413      	add	r3, r2
 8002930:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002934:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	0c5b      	lsrs	r3, r3, #17
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800294e:	4413      	add	r3, r2
 8002950:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002954:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800295a:	fb02 f203 	mul.w	r2, r2, r3
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	e004      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_RCC_GetSysClockFreq+0xc0>)
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	623b      	str	r3, [r7, #32]
      break;
 8002976:	e002      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800297a:	623b      	str	r3, [r7, #32]
      break;
 800297c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297e:	6a3b      	ldr	r3, [r7, #32]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3728      	adds	r7, #40	; 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bc90      	pop	{r4, r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	08003b7c 	.word	0x08003b7c
 8002990:	08003b8c 	.word	0x08003b8c
 8002994:	40021000 	.word	0x40021000
 8002998:	007a1200 	.word	0x007a1200
 800299c:	003d0900 	.word	0x003d0900

080029a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <RCC_Delay+0x34>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <RCC_Delay+0x38>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0a5b      	lsrs	r3, r3, #9
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029bc:	bf00      	nop
  }
  while (Delay --);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1e5a      	subs	r2, r3, #1
 80029c2:	60fa      	str	r2, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f9      	bne.n	80029bc <RCC_Delay+0x1c>
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	2000003c 	.word	0x2000003c
 80029d8:	10624dd3 	.word	0x10624dd3

080029dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d07d      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10d      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a4b      	ldr	r2, [pc, #300]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
 8002a14:	4b49      	ldr	r3, [pc, #292]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d118      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a30:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a42      	ldr	r2, [pc, #264]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fdb4 	bl	80015a8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	e008      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe fdb0 	bl	80015a8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e06d      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a62:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d02e      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d027      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a80:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a90:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a96:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d014      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fd7f 	bl	80015a8 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe fd7b 	bl	80015a8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e036      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ee      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4917      	ldr	r1, [pc, #92]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	490b      	ldr	r1, [pc, #44]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4904      	ldr	r1, [pc, #16]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42420440 	.word	0x42420440

08002b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e041      	b.n	8002bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe fa60 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 fc14 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d001      	beq.n	8002c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e03a      	b.n	8002c76 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <HAL_TIM_Base_Start_IT+0x98>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x58>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2a:	d009      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x58>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x58>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d111      	bne.n	8002c64 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d010      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c62:	e007      	b.n	8002c74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800

08002c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e041      	b.n	8002d22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe f9a2 	bl	8000ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f000 fb72 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_TIM_PWM_Start+0x24>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e022      	b.n	8002d96 <HAL_TIM_PWM_Start+0x6a>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d109      	bne.n	8002d6a <HAL_TIM_PWM_Start+0x3e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e015      	b.n	8002d96 <HAL_TIM_PWM_Start+0x6a>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d109      	bne.n	8002d84 <HAL_TIM_PWM_Start+0x58>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	bf14      	ite	ne
 8002d7c:	2301      	movne	r3, #1
 8002d7e:	2300      	moveq	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e008      	b.n	8002d96 <HAL_TIM_PWM_Start+0x6a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e05e      	b.n	8002e5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_PWM_Start+0x82>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dac:	e013      	b.n	8002dd6 <HAL_TIM_PWM_Start+0xaa>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x92>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dbc:	e00b      	b.n	8002dd6 <HAL_TIM_PWM_Start+0xaa>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_PWM_Start+0xa2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dcc:	e003      	b.n	8002dd6 <HAL_TIM_PWM_Start+0xaa>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fd68 	bl	80038b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_TIM_PWM_Start+0x138>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_TIM_PWM_Start+0x138>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_TIM_PWM_Start+0xfa>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_PWM_Start+0xfa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_TIM_PWM_Start+0x13c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_TIM_PWM_Start+0xfa>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <HAL_TIM_PWM_Start+0x140>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d111      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d010      	beq.n	8002e5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	e007      	b.n	8002e5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800

08002e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0202 	mvn.w	r2, #2
 8002e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa62 	bl	800337c <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa55 	bl	800336a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fa64 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d122      	bne.n	8002f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d11b      	bne.n	8002f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0204 	mvn.w	r2, #4
 8002ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa38 	bl	800337c <HAL_TIM_IC_CaptureCallback>
 8002f0c:	e005      	b.n	8002f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fa2b 	bl	800336a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fa3a 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0208 	mvn.w	r2, #8
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa0e 	bl	800337c <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa01 	bl	800336a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fa10 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0210 	mvn.w	r2, #16
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9e4 	bl	800337c <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9d7 	bl	800336a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f9e6 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0201 	mvn.w	r2, #1
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd ff10 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	2b80      	cmp	r3, #128	; 0x80
 8003000:	d10e      	bne.n	8003020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d107      	bne.n	8003020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fcd5 	bl	80039ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9aa 	bl	80033a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b20      	cmp	r3, #32
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b20      	cmp	r3, #32
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0220 	mvn.w	r2, #32
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fca0 	bl	80039b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003096:	2302      	movs	r3, #2
 8003098:	e0ac      	b.n	80031f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	f200 809f 	bhi.w	80031e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	080031e9 	.word	0x080031e9
 80030b8:	080031e9 	.word	0x080031e9
 80030bc:	080031e9 	.word	0x080031e9
 80030c0:	08003125 	.word	0x08003125
 80030c4:	080031e9 	.word	0x080031e9
 80030c8:	080031e9 	.word	0x080031e9
 80030cc:	080031e9 	.word	0x080031e9
 80030d0:	08003167 	.word	0x08003167
 80030d4:	080031e9 	.word	0x080031e9
 80030d8:	080031e9 	.word	0x080031e9
 80030dc:	080031e9 	.word	0x080031e9
 80030e0:	080031a7 	.word	0x080031a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f9c4 	bl	8003478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0208 	orr.w	r2, r2, #8
 80030fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0204 	bic.w	r2, r2, #4
 800310e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6999      	ldr	r1, [r3, #24]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	619a      	str	r2, [r3, #24]
      break;
 8003122:	e062      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fa0a 	bl	8003544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6999      	ldr	r1, [r3, #24]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	021a      	lsls	r2, r3, #8
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	619a      	str	r2, [r3, #24]
      break;
 8003164:	e041      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fa53 	bl	8003618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0208 	orr.w	r2, r2, #8
 8003180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0204 	bic.w	r2, r2, #4
 8003190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69d9      	ldr	r1, [r3, #28]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	61da      	str	r2, [r3, #28]
      break;
 80031a4:	e021      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fa9d 	bl	80036ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69d9      	ldr	r1, [r3, #28]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	021a      	lsls	r2, r3, #8
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	61da      	str	r2, [r3, #28]
      break;
 80031e6:	e000      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80031e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_TIM_ConfigClockSource+0x18>
 8003210:	2302      	movs	r3, #2
 8003212:	e0a6      	b.n	8003362 <HAL_TIM_ConfigClockSource+0x166>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d067      	beq.n	800331c <HAL_TIM_ConfigClockSource+0x120>
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d80b      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x6c>
 8003250:	2b10      	cmp	r3, #16
 8003252:	d073      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x140>
 8003254:	2b10      	cmp	r3, #16
 8003256:	d802      	bhi.n	800325e <HAL_TIM_ConfigClockSource+0x62>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d06f      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800325c:	e078      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800325e:	2b20      	cmp	r3, #32
 8003260:	d06c      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x140>
 8003262:	2b30      	cmp	r3, #48	; 0x30
 8003264:	d06a      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003266:	e073      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d00d      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0x8c>
 800326c:	2b70      	cmp	r3, #112	; 0x70
 800326e:	d804      	bhi.n	800327a <HAL_TIM_ConfigClockSource+0x7e>
 8003270:	2b50      	cmp	r3, #80	; 0x50
 8003272:	d033      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0xe0>
 8003274:	2b60      	cmp	r3, #96	; 0x60
 8003276:	d041      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003278:	e06a      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327e:	d066      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x152>
 8003280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003284:	d017      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003286:	e063      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f000 faed 	bl	8003876 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	609a      	str	r2, [r3, #8]
      break;
 80032b4:	e04c      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f000 fad6 	bl	8003876 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d8:	609a      	str	r2, [r3, #8]
      break;
 80032da:	e039      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	461a      	mov	r2, r3
 80032ea:	f000 fa4d 	bl	8003788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2150      	movs	r1, #80	; 0x50
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 faa4 	bl	8003842 <TIM_ITRx_SetConfig>
      break;
 80032fa:	e029      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	461a      	mov	r2, r3
 800330a:	f000 fa6b 	bl	80037e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2160      	movs	r1, #96	; 0x60
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fa94 	bl	8003842 <TIM_ITRx_SetConfig>
      break;
 800331a:	e019      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	461a      	mov	r2, r3
 800332a:	f000 fa2d 	bl	8003788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2140      	movs	r1, #64	; 0x40
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fa84 	bl	8003842 <TIM_ITRx_SetConfig>
      break;
 800333a:	e009      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 fa7b 	bl	8003842 <TIM_ITRx_SetConfig>
        break;
 800334c:	e000      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800334e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
	...

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a29      	ldr	r2, [pc, #164]	; (800346c <TIM_Base_SetConfig+0xb8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00b      	beq.n	80033e4 <TIM_Base_SetConfig+0x30>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d007      	beq.n	80033e4 <TIM_Base_SetConfig+0x30>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a26      	ldr	r2, [pc, #152]	; (8003470 <TIM_Base_SetConfig+0xbc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d003      	beq.n	80033e4 <TIM_Base_SetConfig+0x30>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a25      	ldr	r2, [pc, #148]	; (8003474 <TIM_Base_SetConfig+0xc0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d108      	bne.n	80033f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <TIM_Base_SetConfig+0xb8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00b      	beq.n	8003416 <TIM_Base_SetConfig+0x62>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003404:	d007      	beq.n	8003416 <TIM_Base_SetConfig+0x62>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a19      	ldr	r2, [pc, #100]	; (8003470 <TIM_Base_SetConfig+0xbc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d003      	beq.n	8003416 <TIM_Base_SetConfig+0x62>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <TIM_Base_SetConfig+0xc0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d108      	bne.n	8003428 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a07      	ldr	r2, [pc, #28]	; (800346c <TIM_Base_SetConfig+0xb8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	615a      	str	r2, [r3, #20]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800

08003478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f023 0201 	bic.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f023 0302 	bic.w	r3, r3, #2
 80034c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <TIM_OC1_SetConfig+0xc8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10c      	bne.n	80034ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0308 	bic.w	r3, r3, #8
 80034da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <TIM_OC1_SetConfig+0xc8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d111      	bne.n	800351a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	621a      	str	r2, [r3, #32]
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40012c00 	.word	0x40012c00

08003544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f023 0210 	bic.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0320 	bic.w	r3, r3, #32
 800358e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <TIM_OC2_SetConfig+0xd0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10d      	bne.n	80035c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a14      	ldr	r2, [pc, #80]	; (8003614 <TIM_OC2_SetConfig+0xd0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d113      	bne.n	80035f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	40012c00 	.word	0x40012c00

08003618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <TIM_OC3_SetConfig+0xd0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10d      	bne.n	8003692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800367c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <TIM_OC3_SetConfig+0xd0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d113      	bne.n	80036c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	621a      	str	r2, [r3, #32]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40012c00 	.word	0x40012c00

080036ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	031b      	lsls	r3, r3, #12
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <TIM_OC4_SetConfig+0x98>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d109      	bne.n	8003760 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	40012c00 	.word	0x40012c00

08003788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0201 	bic.w	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f023 030a 	bic.w	r3, r3, #10
 80037c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f023 0210 	bic.w	r2, r3, #16
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800380e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	031b      	lsls	r3, r3, #12
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003820:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	621a      	str	r2, [r3, #32]
}
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	f043 0307 	orr.w	r3, r3, #7
 8003864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003876:	b480      	push	{r7}
 8003878:	b087      	sub	sp, #28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003890:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	021a      	lsls	r2, r3, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	431a      	orrs	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	609a      	str	r2, [r3, #8]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2201      	movs	r2, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	401a      	ands	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003910:	2302      	movs	r3, #2
 8003912:	e046      	b.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d009      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10c      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800

080039b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <__libc_init_array>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	2500      	movs	r5, #0
 80039e0:	4e0c      	ldr	r6, [pc, #48]	; (8003a14 <__libc_init_array+0x38>)
 80039e2:	4c0d      	ldr	r4, [pc, #52]	; (8003a18 <__libc_init_array+0x3c>)
 80039e4:	1ba4      	subs	r4, r4, r6
 80039e6:	10a4      	asrs	r4, r4, #2
 80039e8:	42a5      	cmp	r5, r4
 80039ea:	d109      	bne.n	8003a00 <__libc_init_array+0x24>
 80039ec:	f000 f822 	bl	8003a34 <_init>
 80039f0:	2500      	movs	r5, #0
 80039f2:	4e0a      	ldr	r6, [pc, #40]	; (8003a1c <__libc_init_array+0x40>)
 80039f4:	4c0a      	ldr	r4, [pc, #40]	; (8003a20 <__libc_init_array+0x44>)
 80039f6:	1ba4      	subs	r4, r4, r6
 80039f8:	10a4      	asrs	r4, r4, #2
 80039fa:	42a5      	cmp	r5, r4
 80039fc:	d105      	bne.n	8003a0a <__libc_init_array+0x2e>
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a04:	4798      	blx	r3
 8003a06:	3501      	adds	r5, #1
 8003a08:	e7ee      	b.n	80039e8 <__libc_init_array+0xc>
 8003a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a0e:	4798      	blx	r3
 8003a10:	3501      	adds	r5, #1
 8003a12:	e7f2      	b.n	80039fa <__libc_init_array+0x1e>
 8003a14:	08003ba0 	.word	0x08003ba0
 8003a18:	08003ba0 	.word	0x08003ba0
 8003a1c:	08003ba0 	.word	0x08003ba0
 8003a20:	08003ba4 	.word	0x08003ba4

08003a24 <memset>:
 8003a24:	4603      	mov	r3, r0
 8003a26:	4402      	add	r2, r0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d100      	bne.n	8003a2e <memset+0xa>
 8003a2c:	4770      	bx	lr
 8003a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a32:	e7f9      	b.n	8003a28 <memset+0x4>

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr
