
trabalhofinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005554  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800594c  0800594c  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800594c  0800594c  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800594c  0800594c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08005954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000218  08005b6c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08005b6c  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8a6  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000248b  00000000  00000000  0002fae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  00031f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  00032c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019518  00000000  00000000  00033820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c672  00000000  00000000  0004cd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008db79  00000000  00000000  000593aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6f23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036dc  00000000  00000000  000e6fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800564c 	.word	0x0800564c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800564c 	.word	0x0800564c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_f2uiz>:
 800093c:	0042      	lsls	r2, r0, #1
 800093e:	d20e      	bcs.n	800095e <__aeabi_f2uiz+0x22>
 8000940:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000944:	d30b      	bcc.n	800095e <__aeabi_f2uiz+0x22>
 8000946:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800094a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800094e:	d409      	bmi.n	8000964 <__aeabi_f2uiz+0x28>
 8000950:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000958:	fa23 f002 	lsr.w	r0, r3, r2
 800095c:	4770      	bx	lr
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	4770      	bx	lr
 8000964:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000968:	d101      	bne.n	800096e <__aeabi_f2uiz+0x32>
 800096a:	0242      	lsls	r2, r0, #9
 800096c:	d102      	bne.n	8000974 <__aeabi_f2uiz+0x38>
 800096e:	f04f 30ff 	mov.w	r0, #4294967295
 8000972:	4770      	bx	lr
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <aguaNatural>:
 * @brief Água temperatura ambiente
 *
 *
 * Essa função é reponsavel por gerenciar as funções necessarias para a produção de agua sem gás em temperatura ambiente.
 */
void aguaNatural(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	pressostatoFiltro();
 8000980:	f000 fbb6 	bl	80010f0 <pressostatoFiltro>
	if(presF == 0){
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <aguaNatural+0x48>)
 8000986:	f993 3000 	ldrsb.w	r3, [r3]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <aguaNatural+0x18>
		filtroSaturado();
 800098e:	f001 fee7 	bl	8002760 <filtroSaturado>
		HAL_GPIO_WritePin(GPIOA, Y3, GPIO_PIN_SET);
		bomba(0);
		HAL_GPIO_WritePin(GPIOA, Y3, GPIO_PIN_RESET);
		final();
	}
}
 8000992:	e014      	b.n	80009be <aguaNatural+0x42>
		limpar();
 8000994:	f000 fa7e 	bl	8000e94 <limpar>
		escreve_string(0x80, "Preparando...");
 8000998:	490b      	ldr	r1, [pc, #44]	; (80009c8 <aguaNatural+0x4c>)
 800099a:	2080      	movs	r0, #128	; 0x80
 800099c:	f000 faf4 	bl	8000f88 <escreve_string>
		HAL_GPIO_WritePin(GPIOA, Y3, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2120      	movs	r1, #32
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <aguaNatural+0x50>)
 80009a6:	f003 f8f2 	bl	8003b8e <HAL_GPIO_WritePin>
		bomba(0);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 fbb2 	bl	8001114 <bomba>
		HAL_GPIO_WritePin(GPIOA, Y3, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <aguaNatural+0x50>)
 80009b6:	f003 f8ea 	bl	8003b8e <HAL_GPIO_WritePin>
		final();
 80009ba:	f001 ff49 	bl	8002850 <final>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200002ae 	.word	0x200002ae
 80009c8:	08005664 	.word	0x08005664
 80009cc:	40010800 	.word	0x40010800

080009d0 <aguaQuente>:
/**
 * @brief Água quente
 *
 * Essa função é responsavel por gerenciar as funções para a produção de agua quente.
 */
void aguaQuente(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	pressostatoFiltro();
 80009d4:	f000 fb8c 	bl	80010f0 <pressostatoFiltro>
	if(presF == 0){
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <aguaQuente+0x50>)
 80009da:	f993 3000 	ldrsb.w	r3, [r3]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <aguaQuente+0x18>
		filtroSaturado();
 80009e2:	f001 febd 	bl	8002760 <filtroSaturado>
		HAL_GPIO_WritePin(GPIOA, Y1, GPIO_PIN_SET);
		bomba(1);
		HAL_GPIO_WritePin(GPIOA, Y1, GPIO_PIN_RESET);
		final();
	}
}
 80009e6:	e019      	b.n	8000a1c <aguaQuente+0x4c>
		aquecer(capsula[1].temperatura);
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <aguaQuente+0x54>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fbef 	bl	80011d0 <aquecer>
		limpar();
 80009f2:	f000 fa4f 	bl	8000e94 <limpar>
		escreve_string(0x80, "Preparando...");
 80009f6:	490c      	ldr	r1, [pc, #48]	; (8000a28 <aguaQuente+0x58>)
 80009f8:	2080      	movs	r0, #128	; 0x80
 80009fa:	f000 fac5 	bl	8000f88 <escreve_string>
		HAL_GPIO_WritePin(GPIOA, Y1, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2108      	movs	r1, #8
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <aguaQuente+0x5c>)
 8000a04:	f003 f8c3 	bl	8003b8e <HAL_GPIO_WritePin>
		bomba(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 fb83 	bl	8001114 <bomba>
		HAL_GPIO_WritePin(GPIOA, Y1, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2108      	movs	r1, #8
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <aguaQuente+0x5c>)
 8000a14:	f003 f8bb 	bl	8003b8e <HAL_GPIO_WritePin>
		final();
 8000a18:	f001 ff1a 	bl	8002850 <final>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200002ae 	.word	0x200002ae
 8000a24:	200002b0 	.word	0x200002b0
 8000a28:	08005664 	.word	0x08005664
 8000a2c:	40010800 	.word	0x40010800

08000a30 <aguaGelada>:
/**
 * @brief Água gelada
 *
 * Essa função é responsavel por gerenciar as funções para a produção de agua gelada
 */
void aguaGelada(void){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	pressostatoFiltro();
 8000a34:	f000 fb5c 	bl	80010f0 <pressostatoFiltro>
		if(presF == 0){
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <aguaGelada+0x50>)
 8000a3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <aguaGelada+0x18>
			filtroSaturado();
 8000a42:	f001 fe8d 	bl	8002760 <filtroSaturado>
			HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_SET);
			bomba(2);
			HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_RESET);
			final();
		}
}
 8000a46:	e019      	b.n	8000a7c <aguaGelada+0x4c>
			resfriar(capsula[2].temperatura);
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <aguaGelada+0x54>)
 8000a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fc63 	bl	8001318 <resfriar>
			limpar();
 8000a52:	f000 fa1f 	bl	8000e94 <limpar>
			escreve_string(0x80, "Preparando...");
 8000a56:	490c      	ldr	r1, [pc, #48]	; (8000a88 <aguaGelada+0x58>)
 8000a58:	2080      	movs	r0, #128	; 0x80
 8000a5a:	f000 fa95 	bl	8000f88 <escreve_string>
			HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2110      	movs	r1, #16
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <aguaGelada+0x5c>)
 8000a64:	f003 f893 	bl	8003b8e <HAL_GPIO_WritePin>
			bomba(2);
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f000 fb53 	bl	8001114 <bomba>
			HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2110      	movs	r1, #16
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <aguaGelada+0x5c>)
 8000a74:	f003 f88b 	bl	8003b8e <HAL_GPIO_WritePin>
			final();
 8000a78:	f001 feea 	bl	8002850 <final>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200002ae 	.word	0x200002ae
 8000a84:	200002b0 	.word	0x200002b0
 8000a88:	08005664 	.word	0x08005664
 8000a8c:	40010800 	.word	0x40010800

08000a90 <chaGelado>:
/**
 * @brief Chá Gelado
 *
 *Essa função é responsavel por gerenciar as funções para a produção de chá gelado
 */
void chaGelado(void){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	pressostatoFiltro();
 8000a94:	f000 fb2c 	bl	80010f0 <pressostatoFiltro>
	if(presF ==0){
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <chaGelado+0x54>)
 8000a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <chaGelado+0x18>
		filtroSaturado();
 8000aa2:	f001 fe5d 	bl	8002760 <filtroSaturado>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_SET);
		bomba(4);
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_RESET);
		final();
	}
}
 8000aa6:	e01a      	b.n	8000ade <chaGelado+0x4e>
		resfriar(capsula[4].temperatura);
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <chaGelado+0x58>)
 8000aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fc32 	bl	8001318 <resfriar>
		limpar();
 8000ab4:	f000 f9ee 	bl	8000e94 <limpar>
		escreve_string(0x80, "Preparando...");
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <chaGelado+0x5c>)
 8000aba:	2080      	movs	r0, #128	; 0x80
 8000abc:	f000 fa64 	bl	8000f88 <escreve_string>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <chaGelado+0x60>)
 8000ac6:	f003 f862 	bl	8003b8e <HAL_GPIO_WritePin>
		bomba(4);
 8000aca:	2004      	movs	r0, #4
 8000acc:	f000 fb22 	bl	8001114 <bomba>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <chaGelado+0x60>)
 8000ad6:	f003 f85a 	bl	8003b8e <HAL_GPIO_WritePin>
		final();
 8000ada:	f001 feb9 	bl	8002850 <final>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200002ae 	.word	0x200002ae
 8000ae8:	200002b0 	.word	0x200002b0
 8000aec:	08005664 	.word	0x08005664
 8000af0:	40010800 	.word	0x40010800

08000af4 <chaQuente>:
/**
 * @brief Chá Quente
 *
 *Essa função é responsavel por gerenciar as funções para a produção de chá quente
 */
void chaQuente(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	pressostatoFiltro();
 8000af8:	f000 fafa 	bl	80010f0 <pressostatoFiltro>
	if(presF ==0){
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <chaQuente+0x54>)
 8000afe:	f993 3000 	ldrsb.w	r3, [r3]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <chaQuente+0x18>
		filtroSaturado();
 8000b06:	f001 fe2b 	bl	8002760 <filtroSaturado>
		HAL_GPIO_WritePin(GPIOA, Y1, GPIO_PIN_SET);
		bomba(5);
		HAL_GPIO_WritePin(GPIOA, Y1, GPIO_PIN_RESET);
		final();
	}
}
 8000b0a:	e01a      	b.n	8000b42 <chaQuente+0x4e>
		aquecer(capsula[5].temperatura);
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <chaQuente+0x58>)
 8000b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fb5c 	bl	80011d0 <aquecer>
		limpar();
 8000b18:	f000 f9bc 	bl	8000e94 <limpar>
		escreve_string(0x80, "Preparando...");
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <chaQuente+0x5c>)
 8000b1e:	2080      	movs	r0, #128	; 0x80
 8000b20:	f000 fa32 	bl	8000f88 <escreve_string>
		HAL_GPIO_WritePin(GPIOA, Y1, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2108      	movs	r1, #8
 8000b28:	480a      	ldr	r0, [pc, #40]	; (8000b54 <chaQuente+0x60>)
 8000b2a:	f003 f830 	bl	8003b8e <HAL_GPIO_WritePin>
		bomba(5);
 8000b2e:	2005      	movs	r0, #5
 8000b30:	f000 faf0 	bl	8001114 <bomba>
		HAL_GPIO_WritePin(GPIOA, Y1, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2108      	movs	r1, #8
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <chaQuente+0x60>)
 8000b3a:	f003 f828 	bl	8003b8e <HAL_GPIO_WritePin>
		final();
 8000b3e:	f001 fe87 	bl	8002850 <final>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200002ae 	.word	0x200002ae
 8000b4c:	200002b0 	.word	0x200002b0
 8000b50:	08005664 	.word	0x08005664
 8000b54:	40010800 	.word	0x40010800

08000b58 <aguaComGas>:
 * @brief Água com gás
 *
 *
 * Essa função é reponsavel por gerenciar as funções necessarias para a produção de agua com gás gelada.
 */
void aguaComGas(void){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	pressostatoFiltro();
 8000b5c:	f000 fac8 	bl	80010f0 <pressostatoFiltro>
	pressostadoCO2();
 8000b60:	f000 fd56 	bl	8001610 <pressostadoCO2>
	if(presF==0){
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <aguaComGas+0x58>)
 8000b66:	f993 3000 	ldrsb.w	r3, [r3]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <aguaComGas+0x1c>
		filtroSaturado();
 8000b6e:	f001 fdf7 	bl	8002760 <filtroSaturado>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_SET);
		bombaGas(3);
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_RESET);
		final();
	}
}
 8000b72:	e01b      	b.n	8000bac <aguaComGas+0x54>
	}else if(presCO2 ==0){
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <aguaComGas+0x5c>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <aguaComGas+0x2c>
		CO2Saturado();
 8000b7e:	f001 fe2b 	bl	80027d8 <CO2Saturado>
}
 8000b82:	e013      	b.n	8000bac <aguaComGas+0x54>
		resfriar(capsula[3].temperatura);
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <aguaComGas+0x60>)
 8000b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fbc5 	bl	8001318 <resfriar>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2110      	movs	r1, #16
 8000b92:	480a      	ldr	r0, [pc, #40]	; (8000bbc <aguaComGas+0x64>)
 8000b94:	f002 fffb 	bl	8003b8e <HAL_GPIO_WritePin>
		bombaGas(3);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 fd49 	bl	8001630 <bombaGas>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <aguaComGas+0x64>)
 8000ba4:	f002 fff3 	bl	8003b8e <HAL_GPIO_WritePin>
		final();
 8000ba8:	f001 fe52 	bl	8002850 <final>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200002ae 	.word	0x200002ae
 8000bb4:	200002ac 	.word	0x200002ac
 8000bb8:	200002b0 	.word	0x200002b0
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <refrigerante>:
 * @brief Refrigerante
 *
 *
 * Essa função é reponsavel por gerenciar as funções necessarias para a produção de refrigerante.
 */
void refrigerante(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	pressostatoFiltro();
 8000bc4:	f000 fa94 	bl	80010f0 <pressostatoFiltro>
	pressostadoCO2();
 8000bc8:	f000 fd22 	bl	8001610 <pressostadoCO2>
	if(presF==0){
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <refrigerante+0x5c>)
 8000bce:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <refrigerante+0x1c>
		filtroSaturado();
 8000bd6:	f001 fdc3 	bl	8002760 <filtroSaturado>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_SET);
		bombaGas(6);
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_RESET);
		final();
	}
}
 8000bda:	e01c      	b.n	8000c16 <refrigerante+0x56>
	}else if(presCO2 ==0){
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <refrigerante+0x60>)
 8000bde:	f993 3000 	ldrsb.w	r3, [r3]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <refrigerante+0x2c>
		CO2Saturado();
 8000be6:	f001 fdf7 	bl	80027d8 <CO2Saturado>
}
 8000bea:	e014      	b.n	8000c16 <refrigerante+0x56>
		resfriar(capsula[6].temperatura);
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <refrigerante+0x64>)
 8000bee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fb90 	bl	8001318 <resfriar>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <refrigerante+0x68>)
 8000bfe:	f002 ffc6 	bl	8003b8e <HAL_GPIO_WritePin>
		bombaGas(6);
 8000c02:	2006      	movs	r0, #6
 8000c04:	f000 fd14 	bl	8001630 <bombaGas>
		HAL_GPIO_WritePin(GPIOA, Y2, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <refrigerante+0x68>)
 8000c0e:	f002 ffbe 	bl	8003b8e <HAL_GPIO_WritePin>
		final();
 8000c12:	f001 fe1d 	bl	8002850 <final>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200002ae 	.word	0x200002ae
 8000c20:	200002ac 	.word	0x200002ac
 8000c24:	200002b0 	.word	0x200002b0
 8000c28:	40010800 	.word	0x40010800

08000c2c <tempo>:
/**
 * @brief Função temporizadora
 *
 * Função de tempo necessaria para o funcionamento do lcd.
 */
void tempo(void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, E, GPIO_PIN_SET);//E
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <tempo+0x2c>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	2201      	movs	r2, #1
 8000c36:	4619      	mov	r1, r3
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <tempo+0x30>)
 8000c3a:	f002 ffa8 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000c3e:	2005      	movs	r0, #5
 8000c40:	f001 ff64 	bl	8002b0c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, E, GPIO_PIN_RESET);
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <tempo+0x2c>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <tempo+0x30>)
 8000c4e:	f002 ff9e 	bl	8003b8e <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	40010c00 	.word	0x40010c00

08000c60 <inicializa>:
 * Essa função é responsavel por fazer a configuração inicial do display.
 * Ele é inicializado como 16x2, sem cursor e escreve deslocando o cursor para a direita.
 * Também irá carregar as carracteres especiais criadas para a CGRAM.
 */

void inicializa (void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	//Intruções de inicialização
	instrucoes(0x33);
 8000c64:	2033      	movs	r0, #51	; 0x33
 8000c66:	f000 f83d 	bl	8000ce4 <instrucoes>
	instrucoes(0x32);
 8000c6a:	2032      	movs	r0, #50	; 0x32
 8000c6c:	f000 f83a 	bl	8000ce4 <instrucoes>
	instrucoes(0x28);
 8000c70:	2028      	movs	r0, #40	; 0x28
 8000c72:	f000 f837 	bl	8000ce4 <instrucoes>
	instrucoes(0x0C);
 8000c76:	200c      	movs	r0, #12
 8000c78:	f000 f834 	bl	8000ce4 <instrucoes>

	//instruções para escrever na CGRAM
	caracteres_especiais(cg0, &cd);
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <inicializa+0x5c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	490f      	ldr	r1, [pc, #60]	; (8000cc0 <inicializa+0x60>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f8e3 	bl	8000e4e <caracteres_especiais>
	caracteres_especiais(cg1, &ac);
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <inicializa+0x64>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <inicializa+0x68>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f8dd 	bl	8000e4e <caracteres_especiais>
	caracteres_especiais(cg2, &ec);
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <inicializa+0x6c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <inicializa+0x70>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f8d7 	bl	8000e4e <caracteres_especiais>
	caracteres_especiais(cg3, &at);
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <inicializa+0x74>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <inicializa+0x78>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f8d1 	bl	8000e4e <caracteres_especiais>
	caracteres_especiais(cg4, &ot);
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <inicializa+0x7c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	490b      	ldr	r1, [pc, #44]	; (8000ce0 <inicializa+0x80>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f8cb 	bl	8000e4e <caracteres_especiais>

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000000c 	.word	0x2000000c
 8000cc0:	20000014 	.word	0x20000014
 8000cc4:	2000000d 	.word	0x2000000d
 8000cc8:	2000001c 	.word	0x2000001c
 8000ccc:	2000000e 	.word	0x2000000e
 8000cd0:	20000024 	.word	0x20000024
 8000cd4:	2000000f 	.word	0x2000000f
 8000cd8:	2000002c 	.word	0x2000002c
 8000cdc:	20000010 	.word	0x20000010
 8000ce0:	20000034 	.word	0x20000034

08000ce4 <instrucoes>:
 * Essa função aciona o modo de instução do lcd no pino RS e carrega os dados da instução.
 *
 * @param[in] hexa: char com o valor em hexadecimal da instução a ser executada.
 */

void instrucoes(char hexa){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]

	int8_t conv_b[8];
	int16_t x = hexa; //converte pra inteiro
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	82fb      	strh	r3, [r7, #22]

	//converte para binario
	conversorB(hexa, &conv_b);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	f107 020c 	add.w	r2, r7, #12
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f873 	bl	8000de8 <conversorB>

	HAL_GPIO_WritePin(GPIOB, E, GPIO_PIN_RESET); //Desabilita o chip select
 8000d02:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <instrucoes+0xe8>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4831      	ldr	r0, [pc, #196]	; (8000dd0 <instrucoes+0xec>)
 8000d0c:	f002 ff3f 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RS, GPIO_PIN_RESET); //Habilita a seleção de instrução
 8000d10:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <instrucoes+0xf0>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	482d      	ldr	r0, [pc, #180]	; (8000dd0 <instrucoes+0xec>)
 8000d1a:	f002 ff38 	bl	8003b8e <HAL_GPIO_WritePin>


	// Manda para o barramento de dados os 4 primeiros bit.
	HAL_GPIO_WritePin(GPIOB, D7, conv_b[0]);
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <instrucoes+0xf4>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <instrucoes+0xec>)
 8000d2c:	f002 ff2f 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6, conv_b[1]);
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <instrucoes+0xf8>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <instrucoes+0xec>)
 8000d3e:	f002 ff26 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5, conv_b[2]);
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <instrucoes+0xfc>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <instrucoes+0xec>)
 8000d50:	f002 ff1d 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4, conv_b[3]);
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <instrucoes+0x100>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <instrucoes+0xec>)
 8000d62:	f002 ff14 	bl	8003b8e <HAL_GPIO_WritePin>
	tempo();
 8000d66:	f7ff ff61 	bl	8000c2c <tempo>

	// Manda para o barramento de dados os 4 ultimos bit.
	HAL_GPIO_WritePin(GPIOB, D7, conv_b[4]);
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <instrucoes+0xf4>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	4619      	mov	r1, r3
 8000d76:	4816      	ldr	r0, [pc, #88]	; (8000dd0 <instrucoes+0xec>)
 8000d78:	f002 ff09 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6, conv_b[5]);
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <instrucoes+0xf8>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <instrucoes+0xec>)
 8000d8a:	f002 ff00 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5, conv_b[6]);
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <instrucoes+0xfc>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <instrucoes+0xec>)
 8000d9c:	f002 fef7 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4, conv_b[7]);
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <instrucoes+0x100>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <instrucoes+0xec>)
 8000dae:	f002 feee 	bl	8003b8e <HAL_GPIO_WritePin>
	tempo();
 8000db2:	f7ff ff3b 	bl	8000c2c <tempo>

	HAL_GPIO_WritePin(GPIOB, RS, GPIO_PIN_SET);//Habilita a seleção de dados
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <instrucoes+0xf0>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <instrucoes+0xec>)
 8000dc0:	f002 fee5 	bl	8003b8e <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	2000000a 	.word	0x2000000a
 8000dd8:	20000006 	.word	0x20000006
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	20000002 	.word	0x20000002
 8000de4:	20000000 	.word	0x20000000

08000de8 <conversorB>:
 *Essa função converte um valor inteiro para um vetor de binarios.
 *
 *@param[in] inte: unsigned int de 16 bits, contendo o valor a ser convertido.
 *@param[in] *convB: ponteiro para um unsigned int de 8 bits, que será armazenado o valor convertido.
 */
void conversorB(int16_t inte, int8_t *convB){
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	80fb      	strh	r3, [r7, #6]
	int16_t teste= inte;
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	81bb      	strh	r3, [r7, #12]
	for (int16_t i=7; i>= 0 ; i --){
 8000df8:	2307      	movs	r3, #7
 8000dfa:	81fb      	strh	r3, [r7, #14]
 8000dfc:	e01e      	b.n	8000e3c <conversorB+0x54>
		if((inte % 2)==0 )convB[i]=0;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <conversorB+0x30>
 8000e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e005      	b.n	8000e24 <conversorB+0x3c>
		else convB[i]=1;
 8000e18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
		inte=inte/2;
 8000e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e28:	0fda      	lsrs	r2, r3, #31
 8000e2a:	4413      	add	r3, r2
 8000e2c:	105b      	asrs	r3, r3, #1
 8000e2e:	80fb      	strh	r3, [r7, #6]
	for (int16_t i=7; i>= 0 ; i --){
 8000e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	81fb      	strh	r3, [r7, #14]
 8000e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dadc      	bge.n	8000dfe <conversorB+0x16>
	}
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <caracteres_especiais>:
 * Chama a função que para armazenar os 8 bytes do caractere.
 *
 * param[in]posicao: char contendo o endereço que deve ser gravado os dados.
 * param[in]caracter: char contendo o desenho da caractere
 */
void caracteres_especiais(char posicao, char *caracter){
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	6039      	str	r1, [r7, #0]
 8000e58:	71fb      	strb	r3, [r7, #7]

	instrucoes(posicao); //manda o endereço para as instruções iniciarem a CGRAM
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff41 	bl	8000ce4 <instrucoes>


	for(int8_t i=0; i < 8 ;i++){
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e00d      	b.n	8000e84 <caracteres_especiais+0x36>
		escreve_char(caracter[i]);
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f816 	bl	8000ea4 <escreve_char>
	for(int8_t i=0; i < 8 ;i++){
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	dded      	ble.n	8000e68 <caracteres_especiais+0x1a>
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <limpar>:
/**
 *@brief Limpa o display
 *
 *Essa função limpa a tela do display.
 */
void limpar(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	instrucoes(0x01);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff23 	bl	8000ce4 <instrucoes>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <escreve_char>:
 *
 *	Essa função escreve o valor do texto enviado no display
 *
 *	@param[in] texto: char contendo o texto que devera ser escrito no display.
 */
void escreve_char(char texto){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]


	int8_t bin[8];
	int16_t inte;
	inte = texto;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	82fb      	strh	r3, [r7, #22]
	conversorB(inte, &bin);
 8000eb2:	f107 020c 	add.w	r2, r7, #12
 8000eb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff93 	bl	8000de8 <conversorB>


	HAL_GPIO_WritePin(GPIOB, RS, GPIO_PIN_SET); //Habilita a seleção de DADOS
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <escreve_char+0xcc>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4619      	mov	r1, r3
 8000eca:	482a      	ldr	r0, [pc, #168]	; (8000f74 <escreve_char+0xd0>)
 8000ecc:	f002 fe5f 	bl	8003b8e <HAL_GPIO_WritePin>

		// Manda para o barramento de dados os 4 primeiros bit.
	HAL_GPIO_WritePin(GPIOB, D7, bin[0]);
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <escreve_char+0xd4>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	4825      	ldr	r0, [pc, #148]	; (8000f74 <escreve_char+0xd0>)
 8000ede:	f002 fe56 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6, bin[1]);
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <escreve_char+0xd8>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	4821      	ldr	r0, [pc, #132]	; (8000f74 <escreve_char+0xd0>)
 8000ef0:	f002 fe4d 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5, bin[2]);
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <escreve_char+0xdc>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	481c      	ldr	r0, [pc, #112]	; (8000f74 <escreve_char+0xd0>)
 8000f02:	f002 fe44 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4, bin[3]);
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <escreve_char+0xe0>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	4818      	ldr	r0, [pc, #96]	; (8000f74 <escreve_char+0xd0>)
 8000f14:	f002 fe3b 	bl	8003b8e <HAL_GPIO_WritePin>
	tempo();
 8000f18:	f7ff fe88 	bl	8000c2c <tempo>

			// Manda para o barramento de dados os 4 ultimos bit.
	HAL_GPIO_WritePin(GPIOB, D7, bin[4]);
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <escreve_char+0xd4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	4812      	ldr	r0, [pc, #72]	; (8000f74 <escreve_char+0xd0>)
 8000f2a:	f002 fe30 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6, bin[5]);
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <escreve_char+0xd8>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <escreve_char+0xd0>)
 8000f3c:	f002 fe27 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5, bin[6]);
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <escreve_char+0xdc>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <escreve_char+0xd0>)
 8000f4e:	f002 fe1e 	bl	8003b8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4, bin[7]);
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <escreve_char+0xe0>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <escreve_char+0xd0>)
 8000f60:	f002 fe15 	bl	8003b8e <HAL_GPIO_WritePin>
	tempo();
 8000f64:	f7ff fe62 	bl	8000c2c <tempo>


}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000000a 	.word	0x2000000a
 8000f74:	40010c00 	.word	0x40010c00
 8000f78:	20000006 	.word	0x20000006
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000002 	.word	0x20000002
 8000f84:	20000000 	.word	0x20000000

08000f88 <escreve_string>:
 *	Essa função ira gerenciar a escria de uma string no display.
 *
 *	@param[in] posicao: char contendo a posição que deve ser escrita no display
 *	@param[in] *texto: ponteiro para um vetor de char contendo a string que deve ser escrita no display.
 */
void escreve_string(char posicao, char *texto){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	81fb      	strh	r3, [r7, #14]
	uint8_t tes = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	737b      	strb	r3, [r7, #13]
	instrucoes(posicao);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fea0 	bl	8000ce4 <instrucoes>

	while(i < 17 & texto[i] != '\0'){
 8000fa4:	e053      	b.n	800104e <escreve_string+0xc6>

		if(texto[i] == 195){
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2bc3      	cmp	r3, #195	; 0xc3
 8000fb0:	d143      	bne.n	800103a <escreve_string+0xb2>
			if(texto[i+1] == 167){
 8000fb2:	89fb      	ldrh	r3, [r7, #14]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2ba7      	cmp	r3, #167	; 0xa7
 8000fbe:	d105      	bne.n	8000fcc <escreve_string+0x44>
				texto[i+1]=0;
 8000fc0:	89fb      	ldrh	r3, [r7, #14]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
			}
			if(texto[i+1] == 161){
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2ba1      	cmp	r3, #161	; 0xa1
 8000fd8:	d105      	bne.n	8000fe6 <escreve_string+0x5e>
				texto[i+1]=1;
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
			}
			if(texto[i+1] == 169){
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2ba9      	cmp	r3, #169	; 0xa9
 8000ff2:	d105      	bne.n	8001000 <escreve_string+0x78>
				texto[i+1]=2;
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	701a      	strb	r2, [r3, #0]
			}
			if(texto[i+1] == 163){
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	3301      	adds	r3, #1
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2ba3      	cmp	r3, #163	; 0xa3
 800100c:	d105      	bne.n	800101a <escreve_string+0x92>
				texto[i+1]=3;
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	3301      	adds	r3, #1
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	2203      	movs	r2, #3
 8001018:	701a      	strb	r2, [r3, #0]
			}
			if(texto[i+1] == 181){
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	3301      	adds	r3, #1
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2bb5      	cmp	r3, #181	; 0xb5
 8001026:	d105      	bne.n	8001034 <escreve_string+0xac>
				texto[i+1]=4;
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	3301      	adds	r3, #1
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	2204      	movs	r2, #4
 8001032:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	3301      	adds	r3, #1
 8001038:	81fb      	strh	r3, [r7, #14]
		}
		escreve_char(texto[i]);
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff2e 	bl	8000ea4 <escreve_char>
		i++;
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	3301      	adds	r3, #1
 800104c:	81fb      	strh	r3, [r7, #14]
	while(i < 17 & texto[i] != '\0'){
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	2b10      	cmp	r3, #16
 8001052:	bf94      	ite	ls
 8001054:	2301      	movls	r3, #1
 8001056:	2300      	movhi	r3, #0
 8001058:	b2da      	uxtb	r2, r3
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	6839      	ldr	r1, [r7, #0]
 800105e:	440b      	add	r3, r1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	bf14      	ite	ne
 8001066:	2301      	movne	r3, #1
 8001068:	2300      	moveq	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4013      	ands	r3, r2
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d198      	bne.n	8000fa6 <escreve_string+0x1e>
	}
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <variaveis>:
/**
 * @brief Escreve variaveis int
 *
 * Essa função é responsavel por escrever as variaveis no display
 */
void variaveis (char posicao, int32_t valor){
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 8001088:	2300      	movs	r3, #0
 800108a:	83fb      	strh	r3, [r7, #30]
	char texto[17];

	itoa(valor, texto, 10);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	220a      	movs	r2, #10
 8001092:	4619      	mov	r1, r3
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f004 f9d5 	bl	8005444 <itoa>

	instrucoes(posicao);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fe21 	bl	8000ce4 <instrucoes>

	while (i<17 & texto[i] != '\0'){
 80010a2:	e00b      	b.n	80010bc <variaveis+0x40>
		escreve_char(texto[i]);
 80010a4:	8bfb      	ldrh	r3, [r7, #30]
 80010a6:	f107 0220 	add.w	r2, r7, #32
 80010aa:	4413      	add	r3, r2
 80010ac:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fef7 	bl	8000ea4 <escreve_char>
		i++;
 80010b6:	8bfb      	ldrh	r3, [r7, #30]
 80010b8:	3301      	adds	r3, #1
 80010ba:	83fb      	strh	r3, [r7, #30]
	while (i<17 & texto[i] != '\0'){
 80010bc:	8bfb      	ldrh	r3, [r7, #30]
 80010be:	2b10      	cmp	r3, #16
 80010c0:	bf94      	ite	ls
 80010c2:	2301      	movls	r3, #1
 80010c4:	2300      	movhi	r3, #0
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	8bfb      	ldrh	r3, [r7, #30]
 80010ca:	f107 0120 	add.w	r1, r7, #32
 80010ce:	440b      	add	r3, r1
 80010d0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4013      	ands	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1de      	bne.n	80010a4 <variaveis+0x28>
	}
}
 80010e6:	bf00      	nop
 80010e8:	3720      	adds	r7, #32
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <pressostatoFiltro>:
/**
 * @brief Leitura do pressostado do filtro
 *
 * Essa função lê o pino P1 onde esta ligado o pressostato do filtro de agua
 */
void pressostatoFiltro(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	presF= HAL_GPIO_ReadPin(GPIOB, P1);
 80010f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <pressostatoFiltro+0x1c>)
 80010fa:	f002 fd31 	bl	8003b60 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	b25a      	sxtb	r2, r3
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <pressostatoFiltro+0x20>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010c00 	.word	0x40010c00
 8001110:	200002ae 	.word	0x200002ae

08001114 <bomba>:
 * @brief Bomba de bebidas sem gás
 *
 * Essa função é responsavel por gerenciar a bomba das bebidas sem gás.
 * @param[in] tipo :Valor corespondente ao tipo de bebida que será produzida.
 */
void bomba(int8_t tipo){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	int16_t i;
	int16_t contador = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	81bb      	strh	r3, [r7, #12]

		HAL_GPIO_WritePin(GPIOB, SAIDA, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001128:	4826      	ldr	r0, [pc, #152]	; (80011c4 <bomba+0xb0>)
 800112a:	f002 fd30 	bl	8003b8e <HAL_GPIO_WritePin>
		for(i=0; i < 200; i++){// aceleração
 800112e:	2300      	movs	r3, #0
 8001130:	81fb      	strh	r3, [r7, #14]
 8001132:	e011      	b.n	8001158 <bomba+0x44>
			TIM2->CCR1 = contador;
 8001134:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001138:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800113c:	6353      	str	r3, [r2, #52]	; 0x34
			contador +=10;
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	330a      	adds	r3, #10
 8001142:	b29b      	uxth	r3, r3
 8001144:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 fce0 	bl	8002b0c <HAL_Delay>
		for(i=0; i < 200; i++){// aceleração
 800114c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001150:	b29b      	uxth	r3, r3
 8001152:	3301      	adds	r3, #1
 8001154:	b29b      	uxth	r3, r3
 8001156:	81fb      	strh	r3, [r7, #14]
 8001158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800115c:	2bc7      	cmp	r3, #199	; 0xc7
 800115e:	dde9      	ble.n	8001134 <bomba+0x20>
		}
		HAL_Delay(capsula[tipo].tempo);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <bomba+0xb4>)
 8001166:	015b      	lsls	r3, r3, #5
 8001168:	4413      	add	r3, r2
 800116a:	3314      	adds	r3, #20
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fbe4 	bl	800093c <__aeabi_f2uiz>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fcc8 	bl	8002b0c <HAL_Delay>
		for(i=0; i<250;i++){
 800117c:	2300      	movs	r3, #0
 800117e:	81fb      	strh	r3, [r7, #14]
 8001180:	e011      	b.n	80011a6 <bomba+0x92>
			TIM2->CCR1 = contador;
 8001182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001186:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800118a:	6353      	str	r3, [r2, #52]	; 0x34
			contador -=8;
 800118c:	89bb      	ldrh	r3, [r7, #12]
 800118e:	3b08      	subs	r3, #8
 8001190:	b29b      	uxth	r3, r3
 8001192:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f001 fcb9 	bl	8002b0c <HAL_Delay>
		for(i=0; i<250;i++){
 800119a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	81fb      	strh	r3, [r7, #14]
 80011a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011aa:	2bf9      	cmp	r3, #249	; 0xf9
 80011ac:	dde9      	ble.n	8001182 <bomba+0x6e>
		}
		HAL_GPIO_WritePin(GPIOB, SAIDA, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <bomba+0xb0>)
 80011b6:	f002 fcea 	bl	8003b8e <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	200002b0 	.word	0x200002b0
 80011cc:	00000000 	.word	0x00000000

080011d0 <aquecer>:
 * @brief Aquecimento
 *
 * Essa função é responsavel por aquecer a água para produção de bebidas quentes
 * @param[in] temperatura :Temperatura final que a bebida deve atingir.
 */
void aquecer(int32_t temperatura){
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08b      	sub	sp, #44	; 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	int8_t i, j;
	int32_t adc1, t1=0, t1f=0, erro;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
	int32_t pwm = 500, kp =27;
 80011e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	231b      	movs	r3, #27
 80011e8:	613b      	str	r3, [r7, #16]
	aquecendo();
 80011ea:	f001 f891 	bl	8002310 <aquecendo>
	do{
		for(i=0; i<4; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011f4:	e036      	b.n	8001264 <aquecer+0x94>
			HAL_ADC_Start_DMA(&hadc1, adcData, NUMBER_OF_CONVERSION);
 80011f6:	2210      	movs	r2, #16
 80011f8:	4943      	ldr	r1, [pc, #268]	; (8001308 <aquecer+0x138>)
 80011fa:	4844      	ldr	r0, [pc, #272]	; (800130c <aquecer+0x13c>)
 80011fc:	f001 fd80 	bl	8002d00 <HAL_ADC_Start_DMA>
			while(!flag);
 8001200:	bf00      	nop
 8001202:	4b43      	ldr	r3, [pc, #268]	; (8001310 <aquecer+0x140>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0fb      	beq.n	8001202 <aquecer+0x32>
			flag = 1;
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <aquecer+0x140>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
			adc1=0;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
			for(j=0; j <NUMBER_OF_CONVERSION/2; j++){
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800121a:	e00e      	b.n	800123a <aquecer+0x6a>
				adc1+= adcData[i];
 800121c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001220:	4a39      	ldr	r2, [pc, #228]	; (8001308 <aquecer+0x138>)
 8001222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	4413      	add	r3, r2
 800122a:	623b      	str	r3, [r7, #32]
			for(j=0; j <NUMBER_OF_CONVERSION/2; j++){
 800122c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3301      	adds	r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800123a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800123e:	2b07      	cmp	r3, #7
 8001240:	ddec      	ble.n	800121c <aquecer+0x4c>
			}
			adc1/= (NUMBER_OF_CONVERSION/2);
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da00      	bge.n	800124a <aquecer+0x7a>
 8001248:	3307      	adds	r3, #7
 800124a:	10db      	asrs	r3, r3, #3
 800124c:	623b      	str	r3, [r7, #32]
			t1+=adc1;
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	4413      	add	r3, r2
 8001254:	61fb      	str	r3, [r7, #28]
		for(i=0; i<4; i++){
 8001256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3301      	adds	r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001268:	2b03      	cmp	r3, #3
 800126a:	ddc4      	ble.n	80011f6 <aquecer+0x26>
		}
		t1 /= 4;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <aquecer+0xa4>
 8001272:	3303      	adds	r3, #3
 8001274:	109b      	asrs	r3, r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
		t1f = t1*graus+5;
 8001278:	69f8      	ldr	r0, [r7, #28]
 800127a:	f7ff f8bb 	bl	80003f4 <__aeabi_i2d>
 800127e:	a320      	add	r3, pc, #128	; (adr r3, 8001300 <aquecer+0x130>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff f920 	bl	80004c8 <__aeabi_dmul>
 8001288:	4603      	mov	r3, r0
 800128a:	460c      	mov	r4, r1
 800128c:	4618      	mov	r0, r3
 800128e:	4621      	mov	r1, r4
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <aquecer+0x144>)
 8001296:	f7fe ff61 	bl	800015c <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff fb23 	bl	80008ec <__aeabi_d2iz>
 80012a6:	4603      	mov	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]
		if(t1f>100)t1f = 100;
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b64      	cmp	r3, #100	; 0x64
 80012ae:	dd01      	ble.n	80012b4 <aquecer+0xe4>
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	61bb      	str	r3, [r7, #24]
		variaveis(0xCD, t1f);
 80012b4:	69b9      	ldr	r1, [r7, #24]
 80012b6:	20cd      	movs	r0, #205	; 0xcd
 80012b8:	f7ff fee0 	bl	800107c <variaveis>
		erro = temperatura - t1f;
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	60fb      	str	r3, [r7, #12]
		if(erro > 0){
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dd08      	ble.n	80012dc <aquecer+0x10c>
			TIM2->CCR2 = pwm+(erro*kp);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	fb02 f203 	mul.w	r2, r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	441a      	add	r2, r3
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	639a      	str	r2, [r3, #56]	; 0x38
		}
		HAL_Delay(50);
 80012dc:	2032      	movs	r0, #50	; 0x32
 80012de:	f001 fc15 	bl	8002b0c <HAL_Delay>
	}while(t1f < temperatura);
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	db81      	blt.n	80011ee <aquecer+0x1e>
	TIM2->CCR2 =0; //???
 80012ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ee:	2200      	movs	r2, #0
 80012f0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012f2:	bf00      	nop
 80012f4:	372c      	adds	r7, #44	; 0x2c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	14a14a15 	.word	0x14a14a15
 8001304:	3fc4a14a 	.word	0x3fc4a14a
 8001308:	200003b4 	.word	0x200003b4
 800130c:	20000238 	.word	0x20000238
 8001310:	20000235 	.word	0x20000235
 8001314:	40140000 	.word	0x40140000

08001318 <resfriar>:
 * @brief Resfriamento
 *
 * Essa função é responsavel por resfriar a água para produção de bebidas geladas
 * @param[in] temperatura :Temperatura final que a bebida deve atingir.
 */
void resfriar(int32_t temperatura){
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	int8_t i, j;
	int32_t adc2, t2, t2f, erro;
	int32_t pwm = 50, kp =4;
 8001320:	2332      	movs	r3, #50	; 0x32
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	2304      	movs	r3, #4
 8001326:	613b      	str	r3, [r7, #16]
	resfriando();
 8001328:	f001 f804 	bl	8002334 <resfriando>
	do{
		for(i=0; i<4; i++){
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001332:	e037      	b.n	80013a4 <resfriar+0x8c>
			HAL_ADC_Start_DMA(&hadc1, adcData, NUMBER_OF_CONVERSION);
 8001334:	2210      	movs	r2, #16
 8001336:	4944      	ldr	r1, [pc, #272]	; (8001448 <resfriar+0x130>)
 8001338:	4844      	ldr	r0, [pc, #272]	; (800144c <resfriar+0x134>)
 800133a:	f001 fce1 	bl	8002d00 <HAL_ADC_Start_DMA>
			while(!flag);
 800133e:	bf00      	nop
 8001340:	4b43      	ldr	r3, [pc, #268]	; (8001450 <resfriar+0x138>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0fb      	beq.n	8001340 <resfriar+0x28>
			flag = 1;
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <resfriar+0x138>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
			adc2=0;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
			for(j=0; j <NUMBER_OF_CONVERSION/2; j++){
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001358:	e00f      	b.n	800137a <resfriar+0x62>
				adc2+= adcData[i+8];
 800135a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800135e:	3308      	adds	r3, #8
 8001360:	4a39      	ldr	r2, [pc, #228]	; (8001448 <resfriar+0x130>)
 8001362:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	4413      	add	r3, r2
 800136a:	623b      	str	r3, [r7, #32]
			for(j=0; j <NUMBER_OF_CONVERSION/2; j++){
 800136c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3301      	adds	r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800137a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800137e:	2b07      	cmp	r3, #7
 8001380:	ddeb      	ble.n	800135a <resfriar+0x42>
			}
			adc2/= (NUMBER_OF_CONVERSION/2);
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	2b00      	cmp	r3, #0
 8001386:	da00      	bge.n	800138a <resfriar+0x72>
 8001388:	3307      	adds	r3, #7
 800138a:	10db      	asrs	r3, r3, #3
 800138c:	623b      	str	r3, [r7, #32]
			t2+=adc2;
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	4413      	add	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]
		for(i=0; i<4; i++){
 8001396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3301      	adds	r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	ddc3      	ble.n	8001334 <resfriar+0x1c>
		}
		t2 /= 4;
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da00      	bge.n	80013b4 <resfriar+0x9c>
 80013b2:	3303      	adds	r3, #3
 80013b4:	109b      	asrs	r3, r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
		t2f = t2*graus+5; //testar o maximo
 80013b8:	69f8      	ldr	r0, [r7, #28]
 80013ba:	f7ff f81b 	bl	80003f4 <__aeabi_i2d>
 80013be:	a320      	add	r3, pc, #128	; (adr r3, 8001440 <resfriar+0x128>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f880 	bl	80004c8 <__aeabi_dmul>
 80013c8:	4603      	mov	r3, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	4618      	mov	r0, r3
 80013ce:	4621      	mov	r1, r4
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <resfriar+0x13c>)
 80013d6:	f7fe fec1 	bl	800015c <__adddf3>
 80013da:	4603      	mov	r3, r0
 80013dc:	460c      	mov	r4, r1
 80013de:	4618      	mov	r0, r3
 80013e0:	4621      	mov	r1, r4
 80013e2:	f7ff fa83 	bl	80008ec <__aeabi_d2iz>
 80013e6:	4603      	mov	r3, r0
 80013e8:	61bb      	str	r3, [r7, #24]
		if(t2f>50)t2f = 50;
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b32      	cmp	r3, #50	; 0x32
 80013ee:	dd01      	ble.n	80013f4 <resfriar+0xdc>
 80013f0:	2332      	movs	r3, #50	; 0x32
 80013f2:	61bb      	str	r3, [r7, #24]
		variaveis(0xCD, t2f);
 80013f4:	69b9      	ldr	r1, [r7, #24]
 80013f6:	20cd      	movs	r0, #205	; 0xcd
 80013f8:	f7ff fe40 	bl	800107c <variaveis>
		erro = t2f - temperatura;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	60fb      	str	r3, [r7, #12]
		if(erro > 0){
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	dd08      	ble.n	800141c <resfriar+0x104>
			TIM2->CCR3 = pwm+(erro*kp);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	fb02 f203 	mul.w	r2, r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	441a      	add	r2, r3
 8001416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		HAL_Delay(50);
 800141c:	2032      	movs	r0, #50	; 0x32
 800141e:	f001 fb75 	bl	8002b0c <HAL_Delay>
	}while(t2f > temperatura);
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	dc80      	bgt.n	800132c <resfriar+0x14>
	TIM2->CCR3 =0; //
 800142a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142e:	2200      	movs	r2, #0
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001432:	bf00      	nop
 8001434:	372c      	adds	r7, #44	; 0x2c
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	f3af 8000 	nop.w
 8001440:	14a14a15 	.word	0x14a14a15
 8001444:	3fc4a14a 	.word	0x3fc4a14a
 8001448:	200003b4 	.word	0x200003b4
 800144c:	20000238 	.word	0x20000238
 8001450:	20000235 	.word	0x20000235
 8001454:	40140000 	.word	0x40140000

08001458 <iniciar>:
/**
 * @brief Inicialização das capsulas
 *
 * Essa função é responsavel por iniciar os valores das capsulas e o timer do relogio
 */
void iniciar(void){
 8001458:	b490      	push	{r4, r7}
 800145a:	af00      	add	r7, sp, #0


	//Água natural em temperatura ambiente
	strcpy(capsula[0].nome, "água");
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <iniciar+0x16c>)
 800145e:	4a5a      	ldr	r2, [pc, #360]	; (80015c8 <iniciar+0x170>)
 8001460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001464:	6018      	str	r0, [r3, #0]
 8001466:	3304      	adds	r3, #4
 8001468:	8019      	strh	r1, [r3, #0]
	capsula[0].temperatura = 0;
 800146a:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <iniciar+0x16c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
	capsula[0].tempo = 2550; //tempo em ms com o tempo da bomba diminuido
 8001470:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <iniciar+0x16c>)
 8001472:	4a56      	ldr	r2, [pc, #344]	; (80015cc <iniciar+0x174>)
 8001474:	615a      	str	r2, [r3, #20]
	capsula[0].gas = 0;
 8001476:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <iniciar+0x16c>)
 8001478:	2200      	movs	r2, #0
 800147a:	761a      	strb	r2, [r3, #24]
	capsula[0].tipo = 0;
 800147c:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <iniciar+0x16c>)
 800147e:	2200      	movs	r2, #0
 8001480:	835a      	strh	r2, [r3, #26]
	capsula[0].gast =0;
 8001482:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <iniciar+0x16c>)
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	61da      	str	r2, [r3, #28]

	//Água natural aquecida
	strcpy(capsula[1].nome, "agua quente"); // nome da bebida
 800148a:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <iniciar+0x178>)
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <iniciar+0x17c>)
 800148e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001490:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	capsula[1].temperatura = 60; //temperatura desejada
 8001494:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <iniciar+0x16c>)
 8001496:	223c      	movs	r2, #60	; 0x3c
 8001498:	631a      	str	r2, [r3, #48]	; 0x30
	capsula[1].tempo = 2550; //tempo em ms com o tempo da bomba diminuido
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <iniciar+0x16c>)
 800149c:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <iniciar+0x174>)
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
	capsula[1].gas = 0; // sem gas
 80014a0:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <iniciar+0x16c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	capsula[1].tipo = 1; //aquecida
 80014a8:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <iniciar+0x16c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	875a      	strh	r2, [r3, #58]	; 0x3a
	capsula[1].gast =0; // sem gas
 80014ae:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <iniciar+0x16c>)
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	63da      	str	r2, [r3, #60]	; 0x3c

	//Água natural resfriada
	strcpy(capsula[2].nome, "água gelada");
 80014b6:	4a48      	ldr	r2, [pc, #288]	; (80015d8 <iniciar+0x180>)
 80014b8:	4b48      	ldr	r3, [pc, #288]	; (80015dc <iniciar+0x184>)
 80014ba:	4614      	mov	r4, r2
 80014bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014be:	c407      	stmia	r4!, {r0, r1, r2}
 80014c0:	7023      	strb	r3, [r4, #0]
	capsula[2].temperatura = 15;
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <iniciar+0x16c>)
 80014c4:	220f      	movs	r2, #15
 80014c6:	651a      	str	r2, [r3, #80]	; 0x50
	capsula[2].tempo = 2550; //tempo em ms com o tempo da bomba diminuido
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <iniciar+0x16c>)
 80014ca:	4a40      	ldr	r2, [pc, #256]	; (80015cc <iniciar+0x174>)
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
	capsula[2].gas = 0; //sem gas
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <iniciar+0x16c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	capsula[2].tipo = 2; //Gelada
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <iniciar+0x16c>)
 80014d8:	2202      	movs	r2, #2
 80014da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	capsula[2].gast =0; // sem gas
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <iniciar+0x16c>)
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c

	//Água com gás
	strcpy(capsula[3].nome, "água com gás");
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <iniciar+0x16c>)
 80014e8:	4a3d      	ldr	r2, [pc, #244]	; (80015e0 <iniciar+0x188>)
 80014ea:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80014ee:	4613      	mov	r3, r2
 80014f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f2:	c407      	stmia	r4!, {r0, r1, r2}
 80014f4:	8023      	strh	r3, [r4, #0]
 80014f6:	3402      	adds	r4, #2
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	7023      	strb	r3, [r4, #0]
	capsula[3].temperatura = 15;
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <iniciar+0x16c>)
 80014fe:	220f      	movs	r2, #15
 8001500:	671a      	str	r2, [r3, #112]	; 0x70
	capsula[3].tempo = 1050; //tempo em ms com o tempo da bomba diminuido
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <iniciar+0x16c>)
 8001504:	4a37      	ldr	r2, [pc, #220]	; (80015e4 <iniciar+0x18c>)
 8001506:	675a      	str	r2, [r3, #116]	; 0x74
	capsula[3].gas = 1; //COM GAS
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <iniciar+0x16c>)
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	capsula[3].tipo = 2; // GELADA
 8001510:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <iniciar+0x16c>)
 8001512:	2202      	movs	r2, #2
 8001514:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	capsula[3].gast =1300; //1,5 SEGUNDOS - 200 MS DA BOMBA
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <iniciar+0x16c>)
 800151a:	4a33      	ldr	r2, [pc, #204]	; (80015e8 <iniciar+0x190>)
 800151c:	67da      	str	r2, [r3, #124]	; 0x7c

	//Chá gelado
	strcpy(capsula[4].nome, "chá gelado");
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <iniciar+0x194>)
 8001520:	4a33      	ldr	r2, [pc, #204]	; (80015f0 <iniciar+0x198>)
 8001522:	ca07      	ldmia	r2, {r0, r1, r2}
 8001524:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	capsula[4].temperatura = 20;
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <iniciar+0x16c>)
 800152a:	2214      	movs	r2, #20
 800152c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	capsula[4].tempo = 2250; //2,7 segundos - 450 ms da bomba
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <iniciar+0x16c>)
 8001532:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <iniciar+0x19c>)
 8001534:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	capsula[4].gas = 0; //SEM GAS
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <iniciar+0x16c>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	capsula[4].tipo = 2; // GELADA
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <iniciar+0x16c>)
 8001542:	2202      	movs	r2, #2
 8001544:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	capsula[4].gast =0; // SEM GAS
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <iniciar+0x16c>)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	//Chá quente
	strcpy(capsula[5].nome, "chá quente");
 8001552:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <iniciar+0x1a0>)
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <iniciar+0x1a4>)
 8001556:	ca07      	ldmia	r2, {r0, r1, r2}
 8001558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	capsula[5].temperatura = 60;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <iniciar+0x16c>)
 800155e:	223c      	movs	r2, #60	; 0x3c
 8001560:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	capsula[5].tempo = 2250; //2,7S -450 MS DA BOMBA
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <iniciar+0x16c>)
 8001566:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <iniciar+0x19c>)
 8001568:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	capsula[5].gas = 0;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <iniciar+0x16c>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	capsula[5].tipo = 1;// QUENTE
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <iniciar+0x16c>)
 8001576:	2201      	movs	r2, #1
 8001578:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	capsula[5].gast =0;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <iniciar+0x16c>)
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//Refrigerante
	strcpy(capsula[6].nome, "refrigerante");
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <iniciar+0x1a8>)
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <iniciar+0x1ac>)
 800158a:	4614      	mov	r4, r2
 800158c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158e:	c407      	stmia	r4!, {r0, r1, r2}
 8001590:	7023      	strb	r3, [r4, #0]
	capsula[6].temperatura = 17;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <iniciar+0x16c>)
 8001594:	2211      	movs	r2, #17
 8001596:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	capsula[6].tempo = (3550-2360); //4S - 450 MS DA BOMBA - TEMPO DO GAS
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <iniciar+0x16c>)
 800159c:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <iniciar+0x1b0>)
 800159e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	capsula[6].gas = 0;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <iniciar+0x16c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	capsula[6].tipo = 2;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <iniciar+0x16c>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	capsula[6].gast =2360;
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <iniciar+0x16c>)
 80015b4:	4a15      	ldr	r2, [pc, #84]	; (800160c <iniciar+0x1b4>)
 80015b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc90      	pop	{r4, r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200002b0 	.word	0x200002b0
 80015c8:	08005674 	.word	0x08005674
 80015cc:	451f6000 	.word	0x451f6000
 80015d0:	200002d0 	.word	0x200002d0
 80015d4:	0800567c 	.word	0x0800567c
 80015d8:	200002f0 	.word	0x200002f0
 80015dc:	08005688 	.word	0x08005688
 80015e0:	08005698 	.word	0x08005698
 80015e4:	44834000 	.word	0x44834000
 80015e8:	44a28000 	.word	0x44a28000
 80015ec:	20000330 	.word	0x20000330
 80015f0:	080056a8 	.word	0x080056a8
 80015f4:	450ca000 	.word	0x450ca000
 80015f8:	20000350 	.word	0x20000350
 80015fc:	080056b4 	.word	0x080056b4
 8001600:	20000370 	.word	0x20000370
 8001604:	080056c0 	.word	0x080056c0
 8001608:	4494c000 	.word	0x4494c000
 800160c:	45138000 	.word	0x45138000

08001610 <pressostadoCO2>:

void pressostadoCO2(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	presCO2= HAL_GPIO_ReadPin(GPIOA, P2);
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	4804      	ldr	r0, [pc, #16]	; (8001628 <pressostadoCO2+0x18>)
 8001618:	f002 faa2 	bl	8003b60 <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	b25a      	sxtb	r2, r3
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <pressostadoCO2+0x1c>)
 8001622:	701a      	strb	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40010800 	.word	0x40010800
 800162c:	200002ac 	.word	0x200002ac

08001630 <bombaGas>:
 * @brief Bomba de bebidas com gás
 *
 * Essa função é responsavel por gerenciar a bomba das bebidas com gás.
 * @param[in] tipo :Valor corespondente ao tipo de bebida que será produzida.
 */
void bombaGas(int8_t tipo){
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	int16_t i;
		int16_t contador = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	81bb      	strh	r3, [r7, #12]
		limpar();
 800163e:	f7ff fc29 	bl	8000e94 <limpar>
		misturando(tipo);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fef3 	bl	8002430 <misturando>
		HAL_GPIO_WritePin(GPIOA, Y4, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	4833      	ldr	r0, [pc, #204]	; (800171c <bombaGas+0xec>)
 8001650:	f002 fa9d 	bl	8003b8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SAIDA, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	4831      	ldr	r0, [pc, #196]	; (8001720 <bombaGas+0xf0>)
 800165c:	f002 fa97 	bl	8003b8e <HAL_GPIO_WritePin>
		for(i=0; i < 200; i++){// aceleração
 8001660:	2300      	movs	r3, #0
 8001662:	81fb      	strh	r3, [r7, #14]
 8001664:	e011      	b.n	800168a <bombaGas+0x5a>
			TIM2->CCR1 = contador;
 8001666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800166e:	6353      	str	r3, [r2, #52]	; 0x34
			contador +=10;
 8001670:	89bb      	ldrh	r3, [r7, #12]
 8001672:	330a      	adds	r3, #10
 8001674:	b29b      	uxth	r3, r3
 8001676:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(1);
 8001678:	2001      	movs	r0, #1
 800167a:	f001 fa47 	bl	8002b0c <HAL_Delay>
		for(i=0; i < 200; i++){// aceleração
 800167e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001682:	b29b      	uxth	r3, r3
 8001684:	3301      	adds	r3, #1
 8001686:	b29b      	uxth	r3, r3
 8001688:	81fb      	strh	r3, [r7, #14]
 800168a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800168e:	2bc7      	cmp	r3, #199	; 0xc7
 8001690:	dde9      	ble.n	8001666 <bombaGas+0x36>
		}
		HAL_Delay(capsula[tipo].gast);
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <bombaGas+0xf4>)
 8001698:	015b      	lsls	r3, r3, #5
 800169a:	4413      	add	r3, r2
 800169c:	331c      	adds	r3, #28
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff f94b 	bl	800093c <__aeabi_f2uiz>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fa2f 	bl	8002b0c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, Y4, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	481a      	ldr	r0, [pc, #104]	; (800171c <bombaGas+0xec>)
 80016b4:	f002 fa6b 	bl	8003b8e <HAL_GPIO_WritePin>
		HAL_Delay(capsula[tipo].tempo);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <bombaGas+0xf4>)
 80016be:	015b      	lsls	r3, r3, #5
 80016c0:	4413      	add	r3, r2
 80016c2:	3314      	adds	r3, #20
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f938 	bl	800093c <__aeabi_f2uiz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fa1c 	bl	8002b0c <HAL_Delay>

		for(i=0; i<250;i++){
 80016d4:	2300      	movs	r3, #0
 80016d6:	81fb      	strh	r3, [r7, #14]
 80016d8:	e011      	b.n	80016fe <bombaGas+0xce>
			TIM2->CCR1 = contador;
 80016da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016e2:	6353      	str	r3, [r2, #52]	; 0x34
			contador -=8;
 80016e4:	89bb      	ldrh	r3, [r7, #12]
 80016e6:	3b08      	subs	r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f001 fa0d 	bl	8002b0c <HAL_Delay>
		for(i=0; i<250;i++){
 80016f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3301      	adds	r3, #1
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	81fb      	strh	r3, [r7, #14]
 80016fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001702:	2bf9      	cmp	r3, #249	; 0xf9
 8001704:	dde9      	ble.n	80016da <bombaGas+0xaa>
		}
		HAL_GPIO_WritePin(GPIOB, SAIDA, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <bombaGas+0xf0>)
 800170e:	f002 fa3e 	bl	8003b8e <HAL_GPIO_WritePin>
	}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40010800 	.word	0x40010800
 8001720:	40010c00 	.word	0x40010c00
 8001724:	200002b0 	.word	0x200002b0

08001728 <botoes>:
 * Essa função é responsavel pela leitura do teclado
 *
 * @retval Valores de 1 a 4 para o controle das entradas
 *
 */
uint8_t botoes(void){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	while(1){
		if(HAL_GPIO_ReadPin(GPIOA, canc)==0){
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	4813      	ldr	r0, [pc, #76]	; (8001780 <botoes+0x58>)
 8001732:	f002 fa15 	bl	8003b60 <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <botoes+0x18>
			return 1;
 800173c:	2301      	movs	r3, #1
 800173e:	e01c      	b.n	800177a <botoes+0x52>
		}
		if(HAL_GPIO_ReadPin(GPIOA, mais)==0){
 8001740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001744:	480e      	ldr	r0, [pc, #56]	; (8001780 <botoes+0x58>)
 8001746:	f002 fa0b 	bl	8003b60 <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <botoes+0x2c>
			return 2;
 8001750:	2302      	movs	r3, #2
 8001752:	e012      	b.n	800177a <botoes+0x52>
		}
		if(HAL_GPIO_ReadPin(GPIOA, menos)==0){
 8001754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <botoes+0x58>)
 800175a:	f002 fa01 	bl	8003b60 <HAL_GPIO_ReadPin>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <botoes+0x40>
			return 3;
 8001764:	2303      	movs	r3, #3
 8001766:	e008      	b.n	800177a <botoes+0x52>
		}
		if(HAL_GPIO_ReadPin(GPIOA, sair)==0){
 8001768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <botoes+0x58>)
 800176e:	f002 f9f7 	bl	8003b60 <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1d9      	bne.n	800172c <botoes+0x4>
			return 4;
 8001778:	2304      	movs	r3, #4
		}
	}
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40010800 	.word	0x40010800

08001784 <lerBits>:
/**
 * @brief Leitura da capsula
 *
 * Essa função le os 3 bits para a seleção das capsulas
 */
void lerBits(void){
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
	int bit1Temporario, bit2Temporario, bit3Temporario;
	bit1Temporario= HAL_GPIO_ReadPin(GPIOB, Bit1);
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <lerBits+0x54>)
 8001790:	f002 f9e6 	bl	8003b60 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	60fb      	str	r3, [r7, #12]
	bit2Temporario= HAL_GPIO_ReadPin(GPIOB, Bit2);
 8001798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179c:	480e      	ldr	r0, [pc, #56]	; (80017d8 <lerBits+0x54>)
 800179e:	f002 f9df 	bl	8003b60 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	60bb      	str	r3, [r7, #8]
	bit3Temporario= HAL_GPIO_ReadPin(GPIOB, Bit3);
 80017a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <lerBits+0x54>)
 80017ac:	f002 f9d8 	bl	8003b60 <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	607b      	str	r3, [r7, #4]
	bn1 = bit1Temporario*4+ bit2Temporario*2+ bit3Temporario;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	005a      	lsls	r2, r3, #1
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <lerBits+0x58>)
 80017ce:	701a      	strb	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	200002ad 	.word	0x200002ad

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e6:	f001 f92f 	bl	8002a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 f86f 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f000 fae3 	bl	8001db8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017f2:	f000 fac3 	bl	8001d7c <MX_DMA_Init>
  MX_ADC1_Init();
 80017f6:	f000 f8c1 	bl	800197c <MX_ADC1_Init>
  MX_TIM2_Init();
 80017fa:	f000 f9b5 	bl	8001b68 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017fe:	f000 fa21 	bl	8001c44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001802:	f000 fa6d 	bl	8001ce0 <MX_TIM4_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001806:	4828      	ldr	r0, [pc, #160]	; (80018a8 <main+0xc8>)
 8001808:	f002 fee2 	bl	80045d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800180c:	4827      	ldr	r0, [pc, #156]	; (80018ac <main+0xcc>)
 800180e:	f002 fedf 	bl	80045d0 <HAL_TIM_Base_Start_IT>
  horas=minutos=segundos=0;
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <main+0xd0>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <main+0xd0>)
 800181a:	f993 2000 	ldrsb.w	r2, [r3]
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <main+0xd4>)
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <main+0xd4>)
 8001824:	f993 2000 	ldrsb.w	r2, [r3]
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <main+0xd8>)
 800182a:	701a      	strb	r2, [r3, #0]
	strcpy(aux, __TIME__);
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4a23      	ldr	r2, [pc, #140]	; (80018bc <main+0xdc>)
 8001830:	ca07      	ldmia	r2, {r0, r1, r2}
 8001832:	c303      	stmia	r3!, {r0, r1}
 8001834:	701a      	strb	r2, [r3, #0]
	horas= atoi(aux);
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fdc3 	bl	80053c4 <atoi>
 800183e:	4603      	mov	r3, r0
 8001840:	b25a      	sxtb	r2, r3
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <main+0xd8>)
 8001844:	701a      	strb	r2, [r3, #0]
	strcpy(aux, __TIME__ +3);
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <main+0xe0>)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fe03 	bl	8005458 <strcpy>
	minutos = atoi(aux);
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fdb5 	bl	80053c4 <atoi>
 800185a:	4603      	mov	r3, r0
 800185c:	b25a      	sxtb	r2, r3
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <main+0xd4>)
 8001860:	701a      	strb	r2, [r3, #0]
	strcpy(aux, __TIME__+6);
 8001862:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <main+0xe4>)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fdf5 	bl	8005458 <strcpy>
	segundos = atoi(aux);
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fda7 	bl	80053c4 <atoi>
 8001876:	4603      	mov	r3, r0
 8001878:	b25a      	sxtb	r2, r3
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <main+0xd0>)
 800187c:	701a      	strb	r2, [r3, #0]
  iniciar();// Inicializa as variaveis das capsulas
 800187e:	f7ff fdeb 	bl	8001458 <iniciar>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001882:	2100      	movs	r1, #0
 8001884:	4810      	ldr	r0, [pc, #64]	; (80018c8 <main+0xe8>)
 8001886:	f002 ff45 	bl	8004714 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800188a:	2104      	movs	r1, #4
 800188c:	480e      	ldr	r0, [pc, #56]	; (80018c8 <main+0xe8>)
 800188e:	f002 ff41 	bl	8004714 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001892:	2108      	movs	r1, #8
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <main+0xe8>)
 8001896:	f002 ff3d 	bl	8004714 <HAL_TIM_PWM_Start>
  inicializa(); // Inicializa o display
 800189a:	f7ff f9e1 	bl	8000c60 <inicializa>
  limpar(); // limpa o display
 800189e:	f7ff faf9 	bl	8000e94 <limpar>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 relogio(); // chama o relogio
 80018a2:	f000 ffef 	bl	8002884 <relogio>
 80018a6:	e7fc      	b.n	80018a2 <main+0xc2>
 80018a8:	2000043c 	.word	0x2000043c
 80018ac:	200003f4 	.word	0x200003f4
 80018b0:	20000236 	.word	0x20000236
 80018b4:	200003b0 	.word	0x200003b0
 80018b8:	20000234 	.word	0x20000234
 80018bc:	080056d0 	.word	0x080056d0
 80018c0:	080056d3 	.word	0x080056d3
 80018c4:	080056d6 	.word	0x080056d6
 80018c8:	20000484 	.word	0x20000484

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b094      	sub	sp, #80	; 0x50
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	2228      	movs	r2, #40	; 0x28
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fdb4 	bl	8005448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001904:	2310      	movs	r3, #16
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001908:	2302      	movs	r3, #2
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800190c:	2300      	movs	r3, #0
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8001910:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001914:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191a:	4618      	mov	r0, r3
 800191c:	f002 f968 	bl	8003bf0 <HAL_RCC_OscConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001926:	f000 fb47 	bl	8001fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192a:	230f      	movs	r3, #15
 800192c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2102      	movs	r1, #2
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fbd2 	bl	80040f0 <HAL_RCC_ClockConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001952:	f000 fb31 	bl	8001fb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001956:	2302      	movs	r3, #2
 8001958:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800195a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fd2e 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800196e:	f000 fb23 	bl	8001fb8 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3750      	adds	r7, #80	; 0x50
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800198c:	4b74      	ldr	r3, [pc, #464]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 800198e:	4a75      	ldr	r2, [pc, #468]	; (8001b64 <MX_ADC1_Init+0x1e8>)
 8001990:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001992:	4b73      	ldr	r3, [pc, #460]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001998:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800199a:	4b71      	ldr	r3, [pc, #452]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 800199c:	2200      	movs	r2, #0
 800199e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a0:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a6:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 80019a8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ae:	4b6c      	ldr	r3, [pc, #432]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 80019b4:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 80019b6:	2210      	movs	r2, #16
 80019b8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ba:	4869      	ldr	r0, [pc, #420]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 80019bc:	f001 f8c8 	bl	8002b50 <HAL_ADC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80019c6:	f000 faf7 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4861      	ldr	r0, [pc, #388]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 80019dc:	f001 fa80 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019e6:	f000 fae7 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	485b      	ldr	r0, [pc, #364]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 80019f4:	f001 fa74 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80019fe:	f000 fadb 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a02:	2303      	movs	r3, #3
 8001a04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4855      	ldr	r0, [pc, #340]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001a0c:	f001 fa68 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001a16:	f000 facf 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	484f      	ldr	r0, [pc, #316]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001a24:	f001 fa5c 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001a2e:	f000 fac3 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a32:	2305      	movs	r3, #5
 8001a34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4849      	ldr	r0, [pc, #292]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001a3c:	f001 fa50 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001a46:	f000 fab7 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4843      	ldr	r0, [pc, #268]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001a54:	f001 fa44 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001a5e:	f000 faab 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001a62:	2307      	movs	r3, #7
 8001a64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	483d      	ldr	r0, [pc, #244]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001a6c:	f001 fa38 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001a76:	f000 fa9f 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4837      	ldr	r0, [pc, #220]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001a84:	f001 fa2c 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001a8e:	f000 fa93 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001a96:	2309      	movs	r3, #9
 8001a98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4830      	ldr	r0, [pc, #192]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001aa0:	f001 fa1e 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001aaa:	f000 fa85 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001aae:	230a      	movs	r3, #10
 8001ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	482a      	ldr	r0, [pc, #168]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001ab8:	f001 fa12 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001ac2:	f000 fa79 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001ac6:	230b      	movs	r3, #11
 8001ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4824      	ldr	r0, [pc, #144]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001ad0:	f001 fa06 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8001ada:	f000 fa6d 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001ade:	230c      	movs	r3, #12
 8001ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	481e      	ldr	r0, [pc, #120]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001ae8:	f001 f9fa 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8001af2:	f000 fa61 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001af6:	230d      	movs	r3, #13
 8001af8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4818      	ldr	r0, [pc, #96]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001b00:	f001 f9ee 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8001b0a:	f000 fa55 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001b0e:	230e      	movs	r3, #14
 8001b10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4812      	ldr	r0, [pc, #72]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001b18:	f001 f9e2 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8001b22:	f000 fa49 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001b26:	230f      	movs	r3, #15
 8001b28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001b30:	f001 f9d6 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 8001b3a:	f000 fa3d 	bl	8001fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_ADC1_Init+0x1e4>)
 8001b48:	f001 f9ca 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8001b52:	f000 fa31 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000238 	.word	0x20000238
 8001b64:	40012400 	.word	0x40012400

08001b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 0320 	add.w	r3, r7, #32
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001b8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001ba0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb2:	4823      	ldr	r0, [pc, #140]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001bb4:	f002 fd5e 	bl	8004674 <HAL_TIM_PWM_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001bbe:	f000 f9fb 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481b      	ldr	r0, [pc, #108]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001bd2:	f003 fb87 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001bdc:	f000 f9ec 	bl	8001fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be0:	2360      	movs	r3, #96	; 0x60
 8001be2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001bf8:	f002 ff36 	bl	8004a68 <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c02:	f000 f9d9 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001c0e:	f002 ff2b 	bl	8004a68 <HAL_TIM_PWM_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c18:	f000 f9ce 	bl	8001fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2208      	movs	r2, #8
 8001c20:	4619      	mov	r1, r3
 8001c22:	4807      	ldr	r0, [pc, #28]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001c24:	f002 ff20 	bl	8004a68 <HAL_TIM_PWM_ConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001c2e:	f000 f9c3 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c32:	4803      	ldr	r0, [pc, #12]	; (8001c40 <MX_TIM2_Init+0xd8>)
 8001c34:	f000 fabe 	bl	80021b4 <HAL_TIM_MspPostInit>

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000484 	.word	0x20000484

08001c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c62:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <MX_TIM3_Init+0x98>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5600-1;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c68:	f241 52df 	movw	r2, #5599	; 0x15df
 8001c6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c76:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c88:	4813      	ldr	r0, [pc, #76]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c8a:	f002 fc51 	bl	8004530 <HAL_TIM_Base_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c94:	f000 f990 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001ca6:	f002 ff9d 	bl	8004be4 <HAL_TIM_ConfigClockSource>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001cb0:	f000 f982 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001cc2:	f003 fb0f 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ccc:	f000 f974 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2000043c 	.word	0x2000043c
 8001cdc:	40000400 	.word	0x40000400

08001ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <MX_TIM4_Init+0x98>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5600;
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001d04:	f44f 52af 	mov.w	r2, #5600	; 0x15e0
 8001d08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001d12:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d24:	4813      	ldr	r0, [pc, #76]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001d26:	f002 fc03 	bl	8004530 <HAL_TIM_Base_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001d30:	f000 f942 	bl	8001fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001d42:	f002 ff4f 	bl	8004be4 <HAL_TIM_ConfigClockSource>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001d4c:	f000 f934 	bl	8001fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d50:	2300      	movs	r3, #0
 8001d52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d58:	463b      	mov	r3, r7
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_TIM4_Init+0x94>)
 8001d5e:	f003 fac1 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001d68:	f000 f926 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200003f4 	.word	0x200003f4
 8001d78:	40000800 	.word	0x40000800

08001d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_DMA_Init+0x38>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <MX_DMA_Init+0x38>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6153      	str	r3, [r2, #20]
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_DMA_Init+0x38>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	200b      	movs	r0, #11
 8001da0:	f001 fb5f 	bl	8003462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001da4:	200b      	movs	r0, #11
 8001da6:	f001 fb78 	bl	800349a <HAL_NVIC_EnableIRQ>

}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a44      	ldr	r2, [pc, #272]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de4:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a3e      	ldr	r2, [pc, #248]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dea:	f043 0320 	orr.w	r3, r3, #32
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a38      	ldr	r2, [pc, #224]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e1a:	f043 0308 	orr.w	r3, r3, #8
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e32:	482d      	ldr	r0, [pc, #180]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001e34:	f001 feab 	bl	8003b8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	21b8      	movs	r1, #184	; 0xb8
 8001e3c:	482b      	ldr	r0, [pc, #172]	; (8001eec <MX_GPIO_Init+0x134>)
 8001e3e:	f001 fea6 	bl	8003b8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8001e48:	4829      	ldr	r0, [pc, #164]	; (8001ef0 <MX_GPIO_Init+0x138>)
 8001e4a:	f001 fea0 	bl	8003b8e <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4619      	mov	r1, r3
 8001e66:	4820      	ldr	r0, [pc, #128]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001e68:	f001 fd20 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001e6c:	23b8      	movs	r3, #184	; 0xb8
 8001e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	4619      	mov	r1, r3
 8001e82:	481a      	ldr	r0, [pc, #104]	; (8001eec <MX_GPIO_Init+0x134>)
 8001e84:	f001 fd12 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e88:	f44f 53f2 	mov.w	r3, #7744	; 0x1e40
 8001e8c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4813      	ldr	r0, [pc, #76]	; (8001eec <MX_GPIO_Init+0x134>)
 8001e9e:	f001 fd05 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001ea2:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8001ea6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <MX_GPIO_Init+0x138>)
 8001ebc:	f001 fcf6 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001ec0:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <MX_GPIO_Init+0x138>)
 8001ed6:	f001 fce9 	bl	80038ac <HAL_GPIO_Init>

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40011000 	.word	0x40011000
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40010c00 	.word	0x40010c00

08001ef4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

	/**Testa qual timer gerou a interupção se for o timer 3, adiciona 1s ao timer do relogio
	 * Se timer 4 pisca o led da placa, C13**/
	if(htim == &htim3){
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d132      	bne.n	8001f6a <HAL_TIM_PeriodElapsedCallback+0x76>
		segundos++;
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001f06:	f993 3000 	ldrsb.w	r3, [r3]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	b25a      	sxtb	r2, r3
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001f14:	701a      	strb	r2, [r3, #0]
		if(segundos == 60){
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001f18:	f993 3000 	ldrsb.w	r3, [r3]
 8001f1c:	2b3c      	cmp	r3, #60	; 0x3c
 8001f1e:	d10b      	bne.n	8001f38 <HAL_TIM_PeriodElapsedCallback+0x44>
			minutos++;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f22:	f993 3000 	ldrsb.w	r3, [r3]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f30:	701a      	strb	r2, [r3, #0]
			segundos=0;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
		}
		if(minutos==60){
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f3e:	2b3c      	cmp	r3, #60	; 0x3c
 8001f40:	d10b      	bne.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x66>
			horas++;
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001f44:	f993 3000 	ldrsb.w	r3, [r3]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	b25a      	sxtb	r2, r3
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001f52:	701a      	strb	r2, [r3, #0]
			minutos=0;
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
		}
		if(horas==24){
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001f5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f60:	2b18      	cmp	r3, #24
 8001f62:	d102      	bne.n	8001f6a <HAL_TIM_PeriodElapsedCallback+0x76>
			horas=00;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim == &htim4){
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d104      	bne.n	8001f7c <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f76:	4808      	ldr	r0, [pc, #32]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001f78:	f001 fe21 	bl	8003bbe <HAL_GPIO_TogglePin>
	}
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000043c 	.word	0x2000043c
 8001f88:	20000236 	.word	0x20000236
 8001f8c:	200003b0 	.word	0x200003b0
 8001f90:	20000234 	.word	0x20000234
 8001f94:	200003f4 	.word	0x200003f4
 8001f98:	40011000 	.word	0x40011000

08001f9c <HAL_ADC_ConvCpltCallback>:

//Libera a flag para leitura do DMA
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	flag=1;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_ADC_ConvCpltCallback+0x18>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	20000235 	.word	0x20000235

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_MspInit+0x5c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_MspInit+0x5c>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_MspInit+0x5c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_MspInit+0x5c>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_MspInit+0x60>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_MspInit+0x60>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000

08002028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <HAL_ADC_MspInit+0xbc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d149      	bne.n	80020dc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_ADC_MspInit+0xc0>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <HAL_ADC_MspInit+0xc0>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_ADC_MspInit+0xc0>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_ADC_MspInit+0xc0>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <HAL_ADC_MspInit+0xc0>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_ADC_MspInit+0xc0>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002078:	2303      	movs	r3, #3
 800207a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207c:	2303      	movs	r3, #3
 800207e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4619      	mov	r1, r3
 8002086:	4819      	ldr	r0, [pc, #100]	; (80020ec <HAL_ADC_MspInit+0xc4>)
 8002088:	f001 fc10 	bl	80038ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 800208e:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_ADC_MspInit+0xcc>)
 8002090:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 80020a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 80020ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 80020b6:	2220      	movs	r2, #32
 80020b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 80020c2:	f001 fa05 	bl	80034d0 <HAL_DMA_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80020cc:	f7ff ff74 	bl	8001fb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 80020d4:	621a      	str	r2, [r3, #32]
 80020d6:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <HAL_ADC_MspInit+0xc8>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40012400 	.word	0x40012400
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010800 	.word	0x40010800
 80020f0:	20000268 	.word	0x20000268
 80020f4:	40020008 	.word	0x40020008

080020f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d10b      	bne.n	8002122 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_TIM_PWM_MspInit+0x34>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_TIM_PWM_MspInit+0x34>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_TIM_PWM_MspInit+0x34>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <HAL_TIM_Base_MspInit+0x78>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d114      	bne.n	800216c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_TIM_Base_MspInit+0x7c>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_TIM_Base_MspInit+0x7c>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	61d3      	str	r3, [r2, #28]
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_TIM_Base_MspInit+0x7c>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	201d      	movs	r0, #29
 8002160:	f001 f97f 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002164:	201d      	movs	r0, #29
 8002166:	f001 f998 	bl	800349a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800216a:	e018      	b.n	800219e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_TIM_Base_MspInit+0x80>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d113      	bne.n	800219e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_TIM_Base_MspInit+0x7c>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <HAL_TIM_Base_MspInit+0x7c>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	61d3      	str	r3, [r2, #28]
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_TIM_Base_MspInit+0x7c>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2100      	movs	r1, #0
 8002192:	201e      	movs	r0, #30
 8002194:	f001 f965 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002198:	201e      	movs	r0, #30
 800219a:	f001 f97e 	bl	800349a <HAL_NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40000800 	.word	0x40000800

080021b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d142      	bne.n	800225a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021f2:	f043 0308 	orr.w	r3, r3, #8
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002204:	f248 0304 	movw	r3, #32772	; 0x8004
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2302      	movs	r3, #2
 8002210:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4813      	ldr	r0, [pc, #76]	; (8002268 <HAL_TIM_MspPostInit+0xb4>)
 800221a:	f001 fb47 	bl	80038ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800221e:	2308      	movs	r3, #8
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	480e      	ldr	r0, [pc, #56]	; (800226c <HAL_TIM_MspPostInit+0xb8>)
 8002232:	f001 fb3b 	bl	80038ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_TIM_MspPostInit+0xbc>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_TIM_MspPostInit+0xbc>)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	; 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	40010800 	.word	0x40010800
 800226c:	40010c00 	.word	0x40010c00
 8002270:	40010000 	.word	0x40010000

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <HardFault_Handler+0x4>

08002286 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <MemManage_Handler+0x4>

0800228c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <BusFault_Handler+0x4>

08002292 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <UsageFault_Handler+0x4>

08002298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c0:	f000 fc08 	bl	8002ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA1_Channel1_IRQHandler+0x10>)
 80022ce:	f001 f9b9 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000268 	.word	0x20000268

080022dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM3_IRQHandler+0x10>)
 80022e2:	f002 fab9 	bl	8004858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000043c 	.word	0x2000043c

080022f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <TIM4_IRQHandler+0x10>)
 80022f6:	f002 faaf 	bl	8004858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200003f4 	.word	0x200003f4

08002304 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <aquecendo>:
/**
 * @brief Display: Aquecendo
 *
 * Essa função é responsavel por mostrar no display quando o controlador está aquecendo e inicia a temperatura
 */
void aquecendo(void){
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	limpar();
 8002314:	f7fe fdbe 	bl	8000e94 <limpar>
	escreve_string(0x80, "Aquecendo...");
 8002318:	4904      	ldr	r1, [pc, #16]	; (800232c <aquecendo+0x1c>)
 800231a:	2080      	movs	r0, #128	; 0x80
 800231c:	f7fe fe34 	bl	8000f88 <escreve_string>
	escreve_string(0xC0, "Temp. atual: 0");
 8002320:	4903      	ldr	r1, [pc, #12]	; (8002330 <aquecendo+0x20>)
 8002322:	20c0      	movs	r0, #192	; 0xc0
 8002324:	f7fe fe30 	bl	8000f88 <escreve_string>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	080056dc 	.word	0x080056dc
 8002330:	080056ec 	.word	0x080056ec

08002334 <resfriando>:
/**
 * @brief Display: Resfriando
 *
 * Essa função é responsavel por mostrar no display quando o controlador está resfriando e inicia a temperatura
 */
void resfriando(void){
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	limpar();
 8002338:	f7fe fdac 	bl	8000e94 <limpar>
	escreve_string(0x80, "Resfriando...");
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <resfriando+0x1c>)
 800233e:	2080      	movs	r0, #128	; 0x80
 8002340:	f7fe fe22 	bl	8000f88 <escreve_string>
	escreve_string(0xC0, "Temp. atual:0");
 8002344:	4903      	ldr	r1, [pc, #12]	; (8002354 <resfriando+0x20>)
 8002346:	20c0      	movs	r0, #192	; 0xc0
 8002348:	f7fe fe1e 	bl	8000f88 <escreve_string>

}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	080056fc 	.word	0x080056fc
 8002354:	0800570c 	.word	0x0800570c

08002358 <menuAgua>:
/**
 * @brief Display: Temperatura da agua
 *
 * Essa função é responsavel pelo menu de escolha da temperatura da água sem gás.
 */
void menuAgua(void){
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
	int8_t valor, aux2;
	limpar();
 800235e:	f7fe fd99 	bl	8000e94 <limpar>
	escreve_string(0x80, "Natural");
 8002362:	4931      	ldr	r1, [pc, #196]	; (8002428 <menuAgua+0xd0>)
 8002364:	2080      	movs	r0, #128	; 0x80
 8002366:	f7fe fe0f 	bl	8000f88 <escreve_string>
	escreve_string(0xc0, "Conf.| + - |Sair");
 800236a:	4930      	ldr	r1, [pc, #192]	; (800242c <menuAgua+0xd4>)
 800236c:	20c0      	movs	r0, #192	; 0xc0
 800236e:	f7fe fe0b 	bl	8000f88 <escreve_string>
	aux2=0;
 8002372:	2300      	movs	r3, #0
 8002374:	71fb      	strb	r3, [r7, #7]
	while(1){
		valor = botoes();
 8002376:	f7ff f9d7 	bl	8001728 <botoes>
 800237a:	4603      	mov	r3, r0
 800237c:	71bb      	strb	r3, [r7, #6]
		switch(valor){
 800237e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d002      	beq.n	800238c <menuAgua+0x34>
 8002386:	2b04      	cmp	r3, #4
 8002388:	d013      	beq.n	80023b2 <menuAgua+0x5a>
 800238a:	e017      	b.n	80023bc <menuAgua+0x64>
		case 1:
			if(aux2 == 0 ) aguaNatural();
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <menuAgua+0x40>
 8002394:	f7fe faf2 	bl	800097c <aguaNatural>
			if(aux2 == 1 ) aguaQuente();
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <menuAgua+0x4c>
 80023a0:	f7fe fb16 	bl	80009d0 <aguaQuente>
			if(aux2 == 2 ) aguaGelada();
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d13b      	bne.n	8002424 <menuAgua+0xcc>
 80023ac:	f7fe fb40 	bl	8000a30 <aguaGelada>
			break;
 80023b0:	e038      	b.n	8002424 <menuAgua+0xcc>
		case 4:
			sairEscrever();
 80023b2:	f000 faff 	bl	80029b4 <sairEscrever>
			relogio();
 80023b6:	f000 fa65 	bl	8002884 <relogio>
			break;
 80023ba:	e034      	b.n	8002426 <menuAgua+0xce>
		default:
			if(valor == 2)aux2++;
 80023bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d105      	bne.n	80023d0 <menuAgua+0x78>
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	71fb      	strb	r3, [r7, #7]
			if(valor == 3)aux2--;
 80023d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d105      	bne.n	80023e4 <menuAgua+0x8c>
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	71fb      	strb	r3, [r7, #7]
			if(aux2== 3)aux2=0;
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d101      	bne.n	80023f0 <menuAgua+0x98>
 80023ec:	2300      	movs	r3, #0
 80023ee:	71fb      	strb	r3, [r7, #7]
			if(aux2== -1)aux2=2;
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d101      	bne.n	80023fe <menuAgua+0xa6>
 80023fa:	2302      	movs	r3, #2
 80023fc:	71fb      	strb	r3, [r7, #7]
			if(aux2==0)aguanEscrita();
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <menuAgua+0xb2>
 8002406:	f000 fae7 	bl	80029d8 <aguanEscrita>
			if(aux2==2)aguagEscrita();
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d101      	bne.n	8002416 <menuAgua+0xbe>
 8002412:	f000 faab 	bl	800296c <aguagEscrita>
			if(aux2==1)aguaqEscrita();
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d1ab      	bne.n	8002376 <menuAgua+0x1e>
 800241e:	f000 fab7 	bl	8002990 <aguaqEscrita>
 8002422:	e7a8      	b.n	8002376 <menuAgua+0x1e>
			break;
 8002424:	bf00      	nop
		valor = botoes();
 8002426:	e7a6      	b.n	8002376 <menuAgua+0x1e>
 8002428:	0800571c 	.word	0x0800571c
 800242c:	08005724 	.word	0x08005724

08002430 <misturando>:
 *
 * Essa função  mostra no display quando uma bebida de co2 está sendo produzida
 *
 * @param[in] num :Recebe o tipo da bomba para printar o nome da bebida no display
 */
void misturando(uint8_t num){
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
	limpar();
 800243a:	f7fe fd2b 	bl	8000e94 <limpar>
	escreve_string(0x80, "Misturando gas");
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <misturando+0x30>)
 8002440:	2080      	movs	r0, #128	; 0x80
 8002442:	f7fe fda1 	bl	8000f88 <escreve_string>
	escreve_string(0xc0, capsula[num].nome);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	015b      	lsls	r3, r3, #5
 800244a:	4a06      	ldr	r2, [pc, #24]	; (8002464 <misturando+0x34>)
 800244c:	4413      	add	r3, r2
 800244e:	4619      	mov	r1, r3
 8002450:	20c0      	movs	r0, #192	; 0xc0
 8002452:	f7fe fd99 	bl	8000f88 <escreve_string>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	08005738 	.word	0x08005738
 8002464:	200002b0 	.word	0x200002b0

08002468 <confirmacao>:
/**
 * @brief Display: Confirmação
 *
 * Essa função printa no display a fungiruação de confirmação dos botões.
 */
void confirmacao(void){
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	escreve_string(0xc0, " Conf=C | Sair=S");
 800246c:	4902      	ldr	r1, [pc, #8]	; (8002478 <confirmacao+0x10>)
 800246e:	20c0      	movs	r0, #192	; 0xc0
 8002470:	f7fe fd8a 	bl	8000f88 <escreve_string>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	08005748 	.word	0x08005748

0800247c <capsulaEscolhida>:
 * Alem de chamas as funções de menu para escolha da agua e conformação por meio do teclado
 * Também chama as funções de cada bebida se for o caso.
 *
 * @param[in] tipo :O numero correspondente do tipo da bebida, 1 agua, 2 agua com gas, 3 chá gelado, 4 cha quente, 5 refrigerante
 */
void capsulaEscolhida(int8_t tipo){
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	int8_t valor;
	switch (tipo){
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	3b01      	subs	r3, #1
 800248c:	2b04      	cmp	r3, #4
 800248e:	f200 8148 	bhi.w	8002722 <capsulaEscolhida+0x2a6>
 8002492:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <capsulaEscolhida+0x1c>)
 8002494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002498:	080024ad 	.word	0x080024ad
 800249c:	08002523 	.word	0x08002523
 80024a0:	080025a9 	.word	0x080025a9
 80024a4:	08002627 	.word	0x08002627
 80024a8:	080026a5 	.word	0x080026a5
	case 1:
		limpar();
 80024ac:	f7fe fcf2 	bl	8000e94 <limpar>
		escreve_string(0x86, capsula[0].nome);
 80024b0:	49a5      	ldr	r1, [pc, #660]	; (8002748 <capsulaEscolhida+0x2cc>)
 80024b2:	2086      	movs	r0, #134	; 0x86
 80024b4:	f7fe fd68 	bl	8000f88 <escreve_string>
		HAL_Delay(1000);
 80024b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024bc:	f000 fb26 	bl	8002b0c <HAL_Delay>

		limpar();
 80024c0:	f7fe fce8 	bl	8000e94 <limpar>
		HAL_Delay(300);
 80024c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024c8:	f000 fb20 	bl	8002b0c <HAL_Delay>
		escreve_string(0x86, capsula[0].nome);
 80024cc:	499e      	ldr	r1, [pc, #632]	; (8002748 <capsulaEscolhida+0x2cc>)
 80024ce:	2086      	movs	r0, #134	; 0x86
 80024d0:	f7fe fd5a 	bl	8000f88 <escreve_string>
		HAL_Delay(1000);
 80024d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d8:	f000 fb18 	bl	8002b0c <HAL_Delay>

		limpar();
 80024dc:	f7fe fcda 	bl	8000e94 <limpar>
		HAL_Delay(300);
 80024e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024e4:	f000 fb12 	bl	8002b0c <HAL_Delay>
		escreve_string(0x86, capsula[0].nome);
 80024e8:	4997      	ldr	r1, [pc, #604]	; (8002748 <capsulaEscolhida+0x2cc>)
 80024ea:	2086      	movs	r0, #134	; 0x86
 80024ec:	f7fe fd4c 	bl	8000f88 <escreve_string>
		confirmacao();
 80024f0:	f7ff ffba 	bl	8002468 <confirmacao>
		valor = botoes();
 80024f4:	f7ff f918 	bl	8001728 <botoes>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
		if(valor == 1){
 80024fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d102      	bne.n	800250a <capsulaEscolhida+0x8e>
			menuAgua();
 8002504:	f7ff ff28 	bl	8002358 <menuAgua>
			sairEscrever();
		}else{
			valor = botoes();
		}

		break;
 8002508:	e11a      	b.n	8002740 <capsulaEscolhida+0x2c4>
		}else if(valor==4){
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d102      	bne.n	8002518 <capsulaEscolhida+0x9c>
			sairEscrever();
 8002512:	f000 fa4f 	bl	80029b4 <sairEscrever>
		break;
 8002516:	e113      	b.n	8002740 <capsulaEscolhida+0x2c4>
			valor = botoes();
 8002518:	f7ff f906 	bl	8001728 <botoes>
 800251c:	4603      	mov	r3, r0
 800251e:	73fb      	strb	r3, [r7, #15]
		break;
 8002520:	e10e      	b.n	8002740 <capsulaEscolhida+0x2c4>
	case 2:
		limpar();
 8002522:	f7fe fcb7 	bl	8000e94 <limpar>
		HAL_Delay(300);
 8002526:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800252a:	f000 faef 	bl	8002b0c <HAL_Delay>
		escreve_string(0x82, capsula[3].nome);
 800252e:	4987      	ldr	r1, [pc, #540]	; (800274c <capsulaEscolhida+0x2d0>)
 8002530:	2082      	movs	r0, #130	; 0x82
 8002532:	f7fe fd29 	bl	8000f88 <escreve_string>
		confirmacao();
 8002536:	f7ff ff97 	bl	8002468 <confirmacao>
		HAL_Delay(1000);
 800253a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800253e:	f000 fae5 	bl	8002b0c <HAL_Delay>

		limpar();
 8002542:	f7fe fca7 	bl	8000e94 <limpar>
		HAL_Delay(300);
 8002546:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800254a:	f000 fadf 	bl	8002b0c <HAL_Delay>
		escreve_string(0x82, capsula[3].nome);
 800254e:	497f      	ldr	r1, [pc, #508]	; (800274c <capsulaEscolhida+0x2d0>)
 8002550:	2082      	movs	r0, #130	; 0x82
 8002552:	f7fe fd19 	bl	8000f88 <escreve_string>
		confirmacao();
 8002556:	f7ff ff87 	bl	8002468 <confirmacao>
		HAL_Delay(1000);
 800255a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800255e:	f000 fad5 	bl	8002b0c <HAL_Delay>

		limpar();
 8002562:	f7fe fc97 	bl	8000e94 <limpar>
		HAL_Delay(300);
 8002566:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800256a:	f000 facf 	bl	8002b0c <HAL_Delay>
		escreve_string(0x82, capsula[3].nome);
 800256e:	4977      	ldr	r1, [pc, #476]	; (800274c <capsulaEscolhida+0x2d0>)
 8002570:	2082      	movs	r0, #130	; 0x82
 8002572:	f7fe fd09 	bl	8000f88 <escreve_string>
		confirmacao();
 8002576:	f7ff ff77 	bl	8002468 <confirmacao>

		valor=botoes();
 800257a:	f7ff f8d5 	bl	8001728 <botoes>
 800257e:	4603      	mov	r3, r0
 8002580:	73fb      	strb	r3, [r7, #15]

		if(valor == 1){
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d102      	bne.n	8002590 <capsulaEscolhida+0x114>
			aguaComGas();
 800258a:	f7fe fae5 	bl	8000b58 <aguaComGas>
		}else if(valor==4){
			sairEscrever();
		}else{
			valor = botoes();
		}
		break;
 800258e:	e0d7      	b.n	8002740 <capsulaEscolhida+0x2c4>
		}else if(valor==4){
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d102      	bne.n	800259e <capsulaEscolhida+0x122>
			sairEscrever();
 8002598:	f000 fa0c 	bl	80029b4 <sairEscrever>
		break;
 800259c:	e0d0      	b.n	8002740 <capsulaEscolhida+0x2c4>
			valor = botoes();
 800259e:	f7ff f8c3 	bl	8001728 <botoes>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73fb      	strb	r3, [r7, #15]
		break;
 80025a6:	e0cb      	b.n	8002740 <capsulaEscolhida+0x2c4>

	case 3:
		limpar();
 80025a8:	f7fe fc74 	bl	8000e94 <limpar>
		escreve_string(0x83, capsula[4].nome);
 80025ac:	4968      	ldr	r1, [pc, #416]	; (8002750 <capsulaEscolhida+0x2d4>)
 80025ae:	2083      	movs	r0, #131	; 0x83
 80025b0:	f7fe fcea 	bl	8000f88 <escreve_string>
		confirmacao();
 80025b4:	f7ff ff58 	bl	8002468 <confirmacao>
		HAL_Delay(1000);
 80025b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025bc:	f000 faa6 	bl	8002b0c <HAL_Delay>

		limpar();
 80025c0:	f7fe fc68 	bl	8000e94 <limpar>
		HAL_Delay(300);
 80025c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025c8:	f000 faa0 	bl	8002b0c <HAL_Delay>
		escreve_string(0x83, capsula[4].nome);
 80025cc:	4960      	ldr	r1, [pc, #384]	; (8002750 <capsulaEscolhida+0x2d4>)
 80025ce:	2083      	movs	r0, #131	; 0x83
 80025d0:	f7fe fcda 	bl	8000f88 <escreve_string>
		confirmacao();
 80025d4:	f7ff ff48 	bl	8002468 <confirmacao>
		HAL_Delay(1000);
 80025d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025dc:	f000 fa96 	bl	8002b0c <HAL_Delay>

		limpar();
 80025e0:	f7fe fc58 	bl	8000e94 <limpar>
		HAL_Delay(300);
 80025e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025e8:	f000 fa90 	bl	8002b0c <HAL_Delay>
		escreve_string(0x83, capsula[4].nome);
 80025ec:	4958      	ldr	r1, [pc, #352]	; (8002750 <capsulaEscolhida+0x2d4>)
 80025ee:	2083      	movs	r0, #131	; 0x83
 80025f0:	f7fe fcca 	bl	8000f88 <escreve_string>
		confirmacao();
 80025f4:	f7ff ff38 	bl	8002468 <confirmacao>

		valor = botoes();
 80025f8:	f7ff f896 	bl	8001728 <botoes>
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]

		if(valor == 1){
 8002600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d102      	bne.n	800260e <capsulaEscolhida+0x192>
			chaGelado();
 8002608:	f7fe fa42 	bl	8000a90 <chaGelado>
		}else if(valor==4){
			sairEscrever();
		}else{
			valor = botoes();
		}
		break;
 800260c:	e098      	b.n	8002740 <capsulaEscolhida+0x2c4>
		}else if(valor==4){
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	2b04      	cmp	r3, #4
 8002614:	d102      	bne.n	800261c <capsulaEscolhida+0x1a0>
			sairEscrever();
 8002616:	f000 f9cd 	bl	80029b4 <sairEscrever>
		break;
 800261a:	e091      	b.n	8002740 <capsulaEscolhida+0x2c4>
			valor = botoes();
 800261c:	f7ff f884 	bl	8001728 <botoes>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
		break;
 8002624:	e08c      	b.n	8002740 <capsulaEscolhida+0x2c4>
	case 4:
		limpar();
 8002626:	f7fe fc35 	bl	8000e94 <limpar>
		escreve_string(0x83, capsula[5].nome);
 800262a:	494a      	ldr	r1, [pc, #296]	; (8002754 <capsulaEscolhida+0x2d8>)
 800262c:	2083      	movs	r0, #131	; 0x83
 800262e:	f7fe fcab 	bl	8000f88 <escreve_string>
		confirmacao();
 8002632:	f7ff ff19 	bl	8002468 <confirmacao>
		HAL_Delay(1000);
 8002636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800263a:	f000 fa67 	bl	8002b0c <HAL_Delay>

		limpar();
 800263e:	f7fe fc29 	bl	8000e94 <limpar>
		HAL_Delay(300);
 8002642:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002646:	f000 fa61 	bl	8002b0c <HAL_Delay>
		escreve_string(0x83, capsula[5].nome);
 800264a:	4942      	ldr	r1, [pc, #264]	; (8002754 <capsulaEscolhida+0x2d8>)
 800264c:	2083      	movs	r0, #131	; 0x83
 800264e:	f7fe fc9b 	bl	8000f88 <escreve_string>
		confirmacao();
 8002652:	f7ff ff09 	bl	8002468 <confirmacao>
		HAL_Delay(1000);
 8002656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800265a:	f000 fa57 	bl	8002b0c <HAL_Delay>

		limpar();
 800265e:	f7fe fc19 	bl	8000e94 <limpar>
		HAL_Delay(300);
 8002662:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002666:	f000 fa51 	bl	8002b0c <HAL_Delay>
		escreve_string(0x83, capsula[5].nome);
 800266a:	493a      	ldr	r1, [pc, #232]	; (8002754 <capsulaEscolhida+0x2d8>)
 800266c:	2083      	movs	r0, #131	; 0x83
 800266e:	f7fe fc8b 	bl	8000f88 <escreve_string>
		confirmacao();
 8002672:	f7ff fef9 	bl	8002468 <confirmacao>


		valor = botoes();
 8002676:	f7ff f857 	bl	8001728 <botoes>
 800267a:	4603      	mov	r3, r0
 800267c:	73fb      	strb	r3, [r7, #15]

		if(valor == 1){
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d102      	bne.n	800268c <capsulaEscolhida+0x210>
			chaQuente();
 8002686:	f7fe fa35 	bl	8000af4 <chaQuente>
		}else if(valor==4){
			sairEscrever();
		}else{
			valor = botoes();
		}
		break;
 800268a:	e059      	b.n	8002740 <capsulaEscolhida+0x2c4>
		}else if(valor==4){
 800268c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d102      	bne.n	800269a <capsulaEscolhida+0x21e>
			sairEscrever();
 8002694:	f000 f98e 	bl	80029b4 <sairEscrever>
		break;
 8002698:	e052      	b.n	8002740 <capsulaEscolhida+0x2c4>
			valor = botoes();
 800269a:	f7ff f845 	bl	8001728 <botoes>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]
		break;
 80026a2:	e04d      	b.n	8002740 <capsulaEscolhida+0x2c4>
	case 5:
		limpar();
 80026a4:	f7fe fbf6 	bl	8000e94 <limpar>
		escreve_string(0x82, capsula[6].nome);
 80026a8:	492b      	ldr	r1, [pc, #172]	; (8002758 <capsulaEscolhida+0x2dc>)
 80026aa:	2082      	movs	r0, #130	; 0x82
 80026ac:	f7fe fc6c 	bl	8000f88 <escreve_string>
		confirmacao();
 80026b0:	f7ff feda 	bl	8002468 <confirmacao>
		HAL_Delay(1000);
 80026b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b8:	f000 fa28 	bl	8002b0c <HAL_Delay>

		limpar();
 80026bc:	f7fe fbea 	bl	8000e94 <limpar>
		HAL_Delay(300);
 80026c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026c4:	f000 fa22 	bl	8002b0c <HAL_Delay>
		escreve_string(0x82, capsula[6].nome);
 80026c8:	4923      	ldr	r1, [pc, #140]	; (8002758 <capsulaEscolhida+0x2dc>)
 80026ca:	2082      	movs	r0, #130	; 0x82
 80026cc:	f7fe fc5c 	bl	8000f88 <escreve_string>
		confirmacao();
 80026d0:	f7ff feca 	bl	8002468 <confirmacao>
		HAL_Delay(1000);
 80026d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d8:	f000 fa18 	bl	8002b0c <HAL_Delay>

		limpar();
 80026dc:	f7fe fbda 	bl	8000e94 <limpar>
		HAL_Delay(300);
 80026e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026e4:	f000 fa12 	bl	8002b0c <HAL_Delay>
		escreve_string(0x82, capsula[6].nome);
 80026e8:	491b      	ldr	r1, [pc, #108]	; (8002758 <capsulaEscolhida+0x2dc>)
 80026ea:	2082      	movs	r0, #130	; 0x82
 80026ec:	f7fe fc4c 	bl	8000f88 <escreve_string>
		confirmacao();
 80026f0:	f7ff feba 	bl	8002468 <confirmacao>


		valor = botoes();
 80026f4:	f7ff f818 	bl	8001728 <botoes>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]

		if(valor == 1){
 80026fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <capsulaEscolhida+0x28e>
			refrigerante();
 8002704:	f7fe fa5c 	bl	8000bc0 <refrigerante>
		}else if(valor==4){
			sairEscrever();
		}else{
			valor = botoes();
		}
		break;
 8002708:	e01a      	b.n	8002740 <capsulaEscolhida+0x2c4>
		}else if(valor==4){
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d102      	bne.n	8002718 <capsulaEscolhida+0x29c>
			sairEscrever();
 8002712:	f000 f94f 	bl	80029b4 <sairEscrever>
		break;
 8002716:	e013      	b.n	8002740 <capsulaEscolhida+0x2c4>
			valor = botoes();
 8002718:	f7ff f806 	bl	8001728 <botoes>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
		break;
 8002720:	e00e      	b.n	8002740 <capsulaEscolhida+0x2c4>
	default:
		limpar();
 8002722:	f7fe fbb7 	bl	8000e94 <limpar>
		escreve_string(0x80, "Capsula vazia");
 8002726:	490d      	ldr	r1, [pc, #52]	; (800275c <capsulaEscolhida+0x2e0>)
 8002728:	2080      	movs	r0, #128	; 0x80
 800272a:	f7fe fc2d 	bl	8000f88 <escreve_string>
		HAL_Delay(5000);
 800272e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002732:	f000 f9eb 	bl	8002b0c <HAL_Delay>
		limpar();
 8002736:	f7fe fbad 	bl	8000e94 <limpar>
		relogio();
 800273a:	f000 f8a3 	bl	8002884 <relogio>
		break;
 800273e:	bf00      	nop
	}
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200002b0 	.word	0x200002b0
 800274c:	20000310 	.word	0x20000310
 8002750:	20000330 	.word	0x20000330
 8002754:	20000350 	.word	0x20000350
 8002758:	20000370 	.word	0x20000370
 800275c:	0800575c 	.word	0x0800575c

08002760 <filtroSaturado>:
/**
 * @brief Display: Filtro Saturado
 *
 * Essa função mostra quando o filtro de agua está saturado
 */
void filtroSaturado(void){
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	limpar();
 8002764:	f7fe fb96 	bl	8000e94 <limpar>
	escreve_string(0x80, "Filtro saturado");
 8002768:	491a      	ldr	r1, [pc, #104]	; (80027d4 <filtroSaturado+0x74>)
 800276a:	2080      	movs	r0, #128	; 0x80
 800276c:	f7fe fc0c 	bl	8000f88 <escreve_string>
	HAL_Delay(1000);
 8002770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002774:	f000 f9ca 	bl	8002b0c <HAL_Delay>

	limpar();
 8002778:	f7fe fb8c 	bl	8000e94 <limpar>
	HAL_Delay(300);
 800277c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002780:	f000 f9c4 	bl	8002b0c <HAL_Delay>
	escreve_string(0x80, "Filtro saturado");
 8002784:	4913      	ldr	r1, [pc, #76]	; (80027d4 <filtroSaturado+0x74>)
 8002786:	2080      	movs	r0, #128	; 0x80
 8002788:	f7fe fbfe 	bl	8000f88 <escreve_string>
	HAL_Delay(1000);
 800278c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002790:	f000 f9bc 	bl	8002b0c <HAL_Delay>

	limpar();
 8002794:	f7fe fb7e 	bl	8000e94 <limpar>
	HAL_Delay(300);
 8002798:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800279c:	f000 f9b6 	bl	8002b0c <HAL_Delay>
	escreve_string(0x80, "Filtro saturado");
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <filtroSaturado+0x74>)
 80027a2:	2080      	movs	r0, #128	; 0x80
 80027a4:	f7fe fbf0 	bl	8000f88 <escreve_string>
	HAL_Delay(1000);
 80027a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ac:	f000 f9ae 	bl	8002b0c <HAL_Delay>

	limpar();
 80027b0:	f7fe fb70 	bl	8000e94 <limpar>
	HAL_Delay(300);
 80027b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027b8:	f000 f9a8 	bl	8002b0c <HAL_Delay>
	escreve_string(0x80, "Filtro saturado");
 80027bc:	4905      	ldr	r1, [pc, #20]	; (80027d4 <filtroSaturado+0x74>)
 80027be:	2080      	movs	r0, #128	; 0x80
 80027c0:	f7fe fbe2 	bl	8000f88 <escreve_string>
	HAL_Delay(1000);
 80027c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027c8:	f000 f9a0 	bl	8002b0c <HAL_Delay>
	limpar();
 80027cc:	f7fe fb62 	bl	8000e94 <limpar>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	0800576c 	.word	0x0800576c

080027d8 <CO2Saturado>:
/**
 * @brief Display: CO2 Vazio]
 *
 * Essa função mostra quando o o cilindro de CO2 está vazio
 */
void CO2Saturado(void){
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	limpar();
 80027dc:	f7fe fb5a 	bl	8000e94 <limpar>
	escreve_string(0x80, "CO2 vazio");
 80027e0:	491a      	ldr	r1, [pc, #104]	; (800284c <CO2Saturado+0x74>)
 80027e2:	2080      	movs	r0, #128	; 0x80
 80027e4:	f7fe fbd0 	bl	8000f88 <escreve_string>
	HAL_Delay(1000);
 80027e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ec:	f000 f98e 	bl	8002b0c <HAL_Delay>

	limpar();
 80027f0:	f7fe fb50 	bl	8000e94 <limpar>
	HAL_Delay(300);
 80027f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027f8:	f000 f988 	bl	8002b0c <HAL_Delay>
	escreve_string(0x80, "CO2 vazio");
 80027fc:	4913      	ldr	r1, [pc, #76]	; (800284c <CO2Saturado+0x74>)
 80027fe:	2080      	movs	r0, #128	; 0x80
 8002800:	f7fe fbc2 	bl	8000f88 <escreve_string>
	HAL_Delay(1000);
 8002804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002808:	f000 f980 	bl	8002b0c <HAL_Delay>

	limpar();
 800280c:	f7fe fb42 	bl	8000e94 <limpar>
	HAL_Delay(300);
 8002810:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002814:	f000 f97a 	bl	8002b0c <HAL_Delay>
	escreve_string(0x80, "CO2 vazio");
 8002818:	490c      	ldr	r1, [pc, #48]	; (800284c <CO2Saturado+0x74>)
 800281a:	2080      	movs	r0, #128	; 0x80
 800281c:	f7fe fbb4 	bl	8000f88 <escreve_string>
	HAL_Delay(1000);
 8002820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002824:	f000 f972 	bl	8002b0c <HAL_Delay>

	limpar();
 8002828:	f7fe fb34 	bl	8000e94 <limpar>
	HAL_Delay(300);
 800282c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002830:	f000 f96c 	bl	8002b0c <HAL_Delay>
	escreve_string(0x80, "CO2 vazio");
 8002834:	4905      	ldr	r1, [pc, #20]	; (800284c <CO2Saturado+0x74>)
 8002836:	2080      	movs	r0, #128	; 0x80
 8002838:	f7fe fba6 	bl	8000f88 <escreve_string>
	HAL_Delay(1000);
 800283c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002840:	f000 f964 	bl	8002b0c <HAL_Delay>
	limpar();
 8002844:	f7fe fb26 	bl	8000e94 <limpar>
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0800577c 	.word	0x0800577c

08002850 <final>:
/**
 * @brief Display: Bebida pronta/
 *
 * Essa função mostra quando a bebida está pronta.
 */
void final(void){
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	limpar();
 8002854:	f7fe fb1e 	bl	8000e94 <limpar>
	escreve_string(0x80, "Sua bebida esta");
 8002858:	4908      	ldr	r1, [pc, #32]	; (800287c <final+0x2c>)
 800285a:	2080      	movs	r0, #128	; 0x80
 800285c:	f7fe fb94 	bl	8000f88 <escreve_string>
	escreve_string(0xc5, "pronta!");
 8002860:	4907      	ldr	r1, [pc, #28]	; (8002880 <final+0x30>)
 8002862:	20c5      	movs	r0, #197	; 0xc5
 8002864:	f7fe fb90 	bl	8000f88 <escreve_string>
	HAL_Delay(5000);
 8002868:	f241 3088 	movw	r0, #5000	; 0x1388
 800286c:	f000 f94e 	bl	8002b0c <HAL_Delay>
	limpar();
 8002870:	f7fe fb10 	bl	8000e94 <limpar>
	relogio();
 8002874:	f000 f806 	bl	8002884 <relogio>
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	08005788 	.word	0x08005788
 8002880:	08005798 	.word	0x08005798

08002884 <relogio>:
/**
 * @brief Display: Relogio
 * Esssa função é responsavel por mostrar o relogio no display alem de testar os valor do Bn1 para saber quando uma capsula foi inserida.
 *
 */
void relogio(void){
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	while (1){
		lerBits();
 8002888:	f7fe ff7c 	bl	8001784 <lerBits>
		if(bn1 >= 1){
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <relogio+0xcc>)
 800288e:	f993 3000 	ldrsb.w	r3, [r3]
 8002892:	2b00      	cmp	r3, #0
 8002894:	dd06      	ble.n	80028a4 <relogio+0x20>
			capsulaEscolhida(bn1);
 8002896:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <relogio+0xcc>)
 8002898:	f993 3000 	ldrsb.w	r3, [r3]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fded 	bl	800247c <capsulaEscolhida>
 80028a2:	e7f1      	b.n	8002888 <relogio+0x4>
		}else{
			if(horas < 10){
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <relogio+0xd0>)
 80028a6:	f993 3000 	ldrsb.w	r3, [r3]
 80028aa:	2b09      	cmp	r3, #9
 80028ac:	dc0b      	bgt.n	80028c6 <relogio+0x42>
				escreve_string(0x84, "0");
 80028ae:	492a      	ldr	r1, [pc, #168]	; (8002958 <relogio+0xd4>)
 80028b0:	2084      	movs	r0, #132	; 0x84
 80028b2:	f7fe fb69 	bl	8000f88 <escreve_string>
				variaveis(0x85, horas);
 80028b6:	4b27      	ldr	r3, [pc, #156]	; (8002954 <relogio+0xd0>)
 80028b8:	f993 3000 	ldrsb.w	r3, [r3]
 80028bc:	4619      	mov	r1, r3
 80028be:	2085      	movs	r0, #133	; 0x85
 80028c0:	f7fe fbdc 	bl	800107c <variaveis>
 80028c4:	e006      	b.n	80028d4 <relogio+0x50>

			}else{
				variaveis(0x84, horas);
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <relogio+0xd0>)
 80028c8:	f993 3000 	ldrsb.w	r3, [r3]
 80028cc:	4619      	mov	r1, r3
 80028ce:	2084      	movs	r0, #132	; 0x84
 80028d0:	f7fe fbd4 	bl	800107c <variaveis>
			}
			escreve_string(0x86, ":");
 80028d4:	4921      	ldr	r1, [pc, #132]	; (800295c <relogio+0xd8>)
 80028d6:	2086      	movs	r0, #134	; 0x86
 80028d8:	f7fe fb56 	bl	8000f88 <escreve_string>
			if(minutos < 10){
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <relogio+0xdc>)
 80028de:	f993 3000 	ldrsb.w	r3, [r3]
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	dc0b      	bgt.n	80028fe <relogio+0x7a>
				escreve_string(0x87, "0");
 80028e6:	491c      	ldr	r1, [pc, #112]	; (8002958 <relogio+0xd4>)
 80028e8:	2087      	movs	r0, #135	; 0x87
 80028ea:	f7fe fb4d 	bl	8000f88 <escreve_string>
				variaveis(0x88, minutos);
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <relogio+0xdc>)
 80028f0:	f993 3000 	ldrsb.w	r3, [r3]
 80028f4:	4619      	mov	r1, r3
 80028f6:	2088      	movs	r0, #136	; 0x88
 80028f8:	f7fe fbc0 	bl	800107c <variaveis>
 80028fc:	e006      	b.n	800290c <relogio+0x88>
			}else{
				variaveis(0x87, minutos);
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <relogio+0xdc>)
 8002900:	f993 3000 	ldrsb.w	r3, [r3]
 8002904:	4619      	mov	r1, r3
 8002906:	2087      	movs	r0, #135	; 0x87
 8002908:	f7fe fbb8 	bl	800107c <variaveis>
			}
			escreve_string(0x89, ":");
 800290c:	4913      	ldr	r1, [pc, #76]	; (800295c <relogio+0xd8>)
 800290e:	2089      	movs	r0, #137	; 0x89
 8002910:	f7fe fb3a 	bl	8000f88 <escreve_string>
			if(segundos < 10){
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <relogio+0xe0>)
 8002916:	f993 3000 	ldrsb.w	r3, [r3]
 800291a:	2b09      	cmp	r3, #9
 800291c:	dc0b      	bgt.n	8002936 <relogio+0xb2>
				escreve_string(0x8A, "0");
 800291e:	490e      	ldr	r1, [pc, #56]	; (8002958 <relogio+0xd4>)
 8002920:	208a      	movs	r0, #138	; 0x8a
 8002922:	f7fe fb31 	bl	8000f88 <escreve_string>
				variaveis(0x8B, segundos);
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <relogio+0xe0>)
 8002928:	f993 3000 	ldrsb.w	r3, [r3]
 800292c:	4619      	mov	r1, r3
 800292e:	208b      	movs	r0, #139	; 0x8b
 8002930:	f7fe fba4 	bl	800107c <variaveis>
 8002934:	e006      	b.n	8002944 <relogio+0xc0>
			}else{
				variaveis(0x8A, segundos);
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <relogio+0xe0>)
 8002938:	f993 3000 	ldrsb.w	r3, [r3]
 800293c:	4619      	mov	r1, r3
 800293e:	208a      	movs	r0, #138	; 0x8a
 8002940:	f7fe fb9c 	bl	800107c <variaveis>
			}
			escreve_string(0x8C, "    ");
 8002944:	4908      	ldr	r1, [pc, #32]	; (8002968 <relogio+0xe4>)
 8002946:	208c      	movs	r0, #140	; 0x8c
 8002948:	f7fe fb1e 	bl	8000f88 <escreve_string>
	while (1){
 800294c:	e79c      	b.n	8002888 <relogio+0x4>
 800294e:	bf00      	nop
 8002950:	200002ad 	.word	0x200002ad
 8002954:	20000234 	.word	0x20000234
 8002958:	080057a0 	.word	0x080057a0
 800295c:	080057a4 	.word	0x080057a4
 8002960:	200003b0 	.word	0x200003b0
 8002964:	20000236 	.word	0x20000236
 8002968:	080057a8 	.word	0x080057a8

0800296c <aguagEscrita>:
/**
 * @brief Display: Agua gelada
 *
 * Essa função é chamada pelo menu de agua para escrever agua gelada no display
 */
void aguagEscrita(void){
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	limpar();
 8002970:	f7fe fa90 	bl	8000e94 <limpar>
	escreve_string(0x80, "agua gelada  ");
 8002974:	4904      	ldr	r1, [pc, #16]	; (8002988 <aguagEscrita+0x1c>)
 8002976:	2080      	movs	r0, #128	; 0x80
 8002978:	f7fe fb06 	bl	8000f88 <escreve_string>
	escreve_string(0xc0, "Conf.| + - |Sair");
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <aguagEscrita+0x20>)
 800297e:	20c0      	movs	r0, #192	; 0xc0
 8002980:	f7fe fb02 	bl	8000f88 <escreve_string>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	080057b0 	.word	0x080057b0
 800298c:	08005724 	.word	0x08005724

08002990 <aguaqEscrita>:
/**
 * @brief Display: Agua quente
 *
 * Essa função é chamada pelo menu de agua para escrever agua quente no display
 */
void aguaqEscrita(void){
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	limpar();
 8002994:	f7fe fa7e 	bl	8000e94 <limpar>
	escreve_string(0x80, "agua quente   ");
 8002998:	4904      	ldr	r1, [pc, #16]	; (80029ac <aguaqEscrita+0x1c>)
 800299a:	2080      	movs	r0, #128	; 0x80
 800299c:	f7fe faf4 	bl	8000f88 <escreve_string>
	escreve_string(0xc0, "Conf.| + - |Sair");
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <aguaqEscrita+0x20>)
 80029a2:	20c0      	movs	r0, #192	; 0xc0
 80029a4:	f7fe faf0 	bl	8000f88 <escreve_string>
	}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	080057c0 	.word	0x080057c0
 80029b0:	08005724 	.word	0x08005724

080029b4 <sairEscrever>:
/**
 * @brief Cancelar
 *
 * Essa função avisa o usuario para tirar a capsula quando cancelar a produção do liquido.
 */
void sairEscrever(void){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	limpar();
 80029b8:	f7fe fa6c 	bl	8000e94 <limpar>
	escreve_string(0x80, "Retire a capsula");
 80029bc:	4905      	ldr	r1, [pc, #20]	; (80029d4 <sairEscrever+0x20>)
 80029be:	2080      	movs	r0, #128	; 0x80
 80029c0:	f7fe fae2 	bl	8000f88 <escreve_string>
	HAL_Delay(5000);
 80029c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80029c8:	f000 f8a0 	bl	8002b0c <HAL_Delay>
	limpar();
 80029cc:	f7fe fa62 	bl	8000e94 <limpar>
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	080057d0 	.word	0x080057d0

080029d8 <aguanEscrita>:
/**
 * @brief Display: Agua natural
 *
 * Essa função é chamada pelo menu de agua para escrever agua natural(em temperatura ambiente) no display
 */
void aguanEscrita(void){
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	limpar();
 80029dc:	f7fe fa5a 	bl	8000e94 <limpar>
	escreve_string(0x80, "agua natural    ");
 80029e0:	4904      	ldr	r1, [pc, #16]	; (80029f4 <aguanEscrita+0x1c>)
 80029e2:	2080      	movs	r0, #128	; 0x80
 80029e4:	f7fe fad0 	bl	8000f88 <escreve_string>
	escreve_string(0xc0, "Conf.| + - |Sair");
 80029e8:	4903      	ldr	r1, [pc, #12]	; (80029f8 <aguanEscrita+0x20>)
 80029ea:	20c0      	movs	r0, #192	; 0xc0
 80029ec:	f7fe facc 	bl	8000f88 <escreve_string>
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	080057e4 	.word	0x080057e4
 80029f8:	08005724 	.word	0x08005724

080029fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029fe:	e003      	b.n	8002a08 <LoopCopyDataInit>

08002a00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a06:	3104      	adds	r1, #4

08002a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a08:	480a      	ldr	r0, [pc, #40]	; (8002a34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a10:	d3f6      	bcc.n	8002a00 <CopyDataInit>
  ldr r2, =_sbss
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a14:	e002      	b.n	8002a1c <LoopFillZerobss>

08002a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a18:	f842 3b04 	str.w	r3, [r2], #4

08002a1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a20:	d3f9      	bcc.n	8002a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a22:	f7ff fc6f 	bl	8002304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a26:	f002 fcd1 	bl	80053cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2a:	f7fe fed9 	bl	80017e0 <main>
  bx lr
 8002a2e:	4770      	bx	lr
  ldr r3, =_sidata
 8002a30:	08005954 	.word	0x08005954
  ldr r0, =_sdata
 8002a34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a38:	20000218 	.word	0x20000218
  ldr r2, =_sbss
 8002a3c:	20000218 	.word	0x20000218
  ldr r3, = _ebss
 8002a40:	200004d0 	.word	0x200004d0

08002a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a44:	e7fe      	b.n	8002a44 <ADC1_2_IRQHandler>
	...

08002a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_Init+0x28>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <HAL_Init+0x28>)
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a58:	2003      	movs	r0, #3
 8002a5a:	f000 fcf7 	bl	800344c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f000 f808 	bl	8002a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a64:	f7ff faae 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000

08002a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_InitTick+0x54>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_InitTick+0x58>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fd0f 	bl	80034b6 <HAL_SYSTICK_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00e      	b.n	8002ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b0f      	cmp	r3, #15
 8002aa6:	d80a      	bhi.n	8002abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f000 fcd7 	bl	8003462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab4:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <HAL_InitTick+0x5c>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	2000003c 	.word	0x2000003c
 8002acc:	20000044 	.word	0x20000044
 8002ad0:	20000040 	.word	0x20000040

08002ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_IncTick+0x1c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x20>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4a03      	ldr	r2, [pc, #12]	; (8002af4 <HAL_IncTick+0x20>)
 8002ae6:	6013      	str	r3, [r2, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	20000044 	.word	0x20000044
 8002af4:	200004cc 	.word	0x200004cc

08002af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b02      	ldr	r3, [pc, #8]	; (8002b08 <HAL_GetTick+0x10>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	200004cc 	.word	0x200004cc

08002b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d005      	beq.n	8002b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_Delay+0x40>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b32:	bf00      	nop
 8002b34:	f7ff ffe0 	bl	8002af8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d8f7      	bhi.n	8002b34 <HAL_Delay+0x28>
  {
  }
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000044 	.word	0x20000044

08002b50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0be      	b.n	8002cf0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fa4a 	bl	8002028 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 faed 	bl	8003174 <ADC_ConversionStop_Disable>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 8099 	bne.w	8002cde <HAL_ADC_Init+0x18e>
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f040 8095 	bne.w	8002cde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bbc:	f023 0302 	bic.w	r3, r3, #2
 8002bc0:	f043 0202 	orr.w	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7b1b      	ldrb	r3, [r3, #12]
 8002bd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be8:	d003      	beq.n	8002bf2 <HAL_ADC_Init+0xa2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d102      	bne.n	8002bf8 <HAL_ADC_Init+0xa8>
 8002bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf6:	e000      	b.n	8002bfa <HAL_ADC_Init+0xaa>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7d1b      	ldrb	r3, [r3, #20]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d119      	bne.n	8002c3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7b1b      	ldrb	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	035a      	lsls	r2, r3, #13
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	e00b      	b.n	8002c3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <HAL_ADC_Init+0x1a8>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6c:	d003      	beq.n	8002c76 <HAL_ADC_Init+0x126>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d104      	bne.n	8002c80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_ADC_Init+0x1ac>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d10b      	bne.n	8002cbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cba:	e018      	b.n	8002cee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f023 0312 	bic.w	r3, r3, #18
 8002cc4:	f043 0210 	orr.w	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cdc:	e007      	b.n	8002cee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	f043 0210 	orr.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	ffe1f7fd 	.word	0xffe1f7fd
 8002cfc:	ff1f0efe 	.word	0xff1f0efe

08002d00 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a64      	ldr	r2, [pc, #400]	; (8002ea8 <HAL_ADC_Start_DMA+0x1a8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_ADC_Start_DMA+0x24>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a63      	ldr	r2, [pc, #396]	; (8002eac <HAL_ADC_Start_DMA+0x1ac>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d106      	bne.n	8002d32 <HAL_ADC_Start_DMA+0x32>
 8002d24:	4b60      	ldr	r3, [pc, #384]	; (8002ea8 <HAL_ADC_Start_DMA+0x1a8>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 80b3 	bne.w	8002e98 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_Start_DMA+0x40>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0ae      	b.n	8002e9e <HAL_ADC_Start_DMA+0x19e>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f9c1 	bl	80030d0 <ADC_Enable>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 809a 	bne.w	8002e8e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <HAL_ADC_Start_DMA+0x1ac>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d105      	bne.n	8002d84 <HAL_ADC_Start_DMA+0x84>
 8002d78:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_ADC_Start_DMA+0x1a8>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d115      	bne.n	8002db0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d026      	beq.n	8002dec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002da6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dae:	e01d      	b.n	8002dec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a39      	ldr	r2, [pc, #228]	; (8002ea8 <HAL_ADC_Start_DMA+0x1a8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADC_Start_DMA+0xd0>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a38      	ldr	r2, [pc, #224]	; (8002eac <HAL_ADC_Start_DMA+0x1ac>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10d      	bne.n	8002dec <HAL_ADC_Start_DMA+0xec>
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_ADC_Start_DMA+0x1a8>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002de4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	f023 0206 	bic.w	r2, r3, #6
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e04:	e002      	b.n	8002e0c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <HAL_ADC_Start_DMA+0x1b0>)
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4a24      	ldr	r2, [pc, #144]	; (8002eb4 <HAL_ADC_Start_DMA+0x1b4>)
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <HAL_ADC_Start_DMA+0x1b8>)
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0202 	mvn.w	r2, #2
 8002e34:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e44:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a18      	ldr	r0, [r3, #32]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	334c      	adds	r3, #76	; 0x4c
 8002e50:	4619      	mov	r1, r3
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f000 fb95 	bl	8003584 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e68:	d108      	bne.n	8002e7c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e78:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e7a:	e00f      	b.n	8002e9c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e8a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e8c:	e006      	b.n	8002e9c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002e96:	e001      	b.n	8002e9c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40012400 	.word	0x40012400
 8002eac:	40012800 	.word	0x40012800
 8002eb0:	080031e9 	.word	0x080031e9
 8002eb4:	08003265 	.word	0x08003265
 8002eb8:	08003281 	.word	0x08003281

08002ebc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x20>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0dc      	b.n	80030ba <HAL_ADC_ConfigChannel+0x1da>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d81c      	bhi.n	8002f4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b05      	subs	r3, #5
 8002f22:	221f      	movs	r2, #31
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	4019      	ands	r1, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b05      	subs	r3, #5
 8002f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	635a      	str	r2, [r3, #52]	; 0x34
 8002f48:	e03c      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	d81c      	bhi.n	8002f8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3b23      	subs	r3, #35	; 0x23
 8002f64:	221f      	movs	r2, #31
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	4019      	ands	r1, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b23      	subs	r3, #35	; 0x23
 8002f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
 8002f8a:	e01b      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b41      	subs	r3, #65	; 0x41
 8002f9e:	221f      	movs	r2, #31
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	4019      	ands	r1, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b41      	subs	r3, #65	; 0x41
 8002fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	d91c      	bls.n	8003006 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68d9      	ldr	r1, [r3, #12]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	2207      	movs	r2, #7
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4019      	ands	r1, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6898      	ldr	r0, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b1e      	subs	r3, #30
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]
 8003004:	e019      	b.n	800303a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6919      	ldr	r1, [r3, #16]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	2207      	movs	r2, #7
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	4019      	ands	r1, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6898      	ldr	r0, [r3, #8]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	fa00 f203 	lsl.w	r2, r0, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b10      	cmp	r3, #16
 8003040:	d003      	beq.n	800304a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003046:	2b11      	cmp	r3, #17
 8003048:	d132      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d125      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d126      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003070:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b10      	cmp	r3, #16
 8003078:	d11a      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a13      	ldr	r2, [pc, #76]	; (80030cc <HAL_ADC_ConfigChannel+0x1ec>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	0c9a      	lsrs	r2, r3, #18
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003090:	e002      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x1b2>
 800309e:	e007      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40012400 	.word	0x40012400
 80030c8:	2000003c 	.word	0x2000003c
 80030cc:	431bde83 	.word	0x431bde83

080030d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d039      	beq.n	8003162 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <ADC_Enable+0x9c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <ADC_Enable+0xa0>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	0c9b      	lsrs	r3, r3, #18
 800310a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800310c:	e002      	b.n	8003114 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3b01      	subs	r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f9      	bne.n	800310e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800311a:	f7ff fced 	bl	8002af8 <HAL_GetTick>
 800311e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003120:	e018      	b.n	8003154 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003122:	f7ff fce9 	bl	8002af8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d911      	bls.n	8003154 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d1df      	bne.n	8003122 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2000003c 	.word	0x2000003c
 8003170:	431bde83 	.word	0x431bde83

08003174 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d127      	bne.n	80031de <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800319e:	f7ff fcab 	bl	8002af8 <HAL_GetTick>
 80031a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031a4:	e014      	b.n	80031d0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031a6:	f7ff fca7 	bl	8002af8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d90d      	bls.n	80031d0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f043 0210 	orr.w	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e007      	b.n	80031e0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d0e3      	beq.n	80031a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d127      	bne.n	8003252 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003218:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800321c:	d115      	bne.n	800324a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003222:	2b00      	cmp	r3, #0
 8003224:	d111      	bne.n	800324a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7fe fea6 	bl	8001f9c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003250:	e004      	b.n	800325c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff fe22 	bl	8002ebc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff fe11 	bl	8002ece <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e6:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	60d3      	str	r3, [r2, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <__NVIC_GetPriorityGrouping+0x18>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	f003 0307 	and.w	r3, r3, #7
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	2b00      	cmp	r3, #0
 8003328:	db0b      	blt.n	8003342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	4906      	ldr	r1, [pc, #24]	; (800334c <__NVIC_EnableIRQ+0x34>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2001      	movs	r0, #1
 800333a:	fa00 f202 	lsl.w	r2, r0, r2
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100

08003350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	2b00      	cmp	r3, #0
 8003362:	db0a      	blt.n	800337a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	490c      	ldr	r1, [pc, #48]	; (800339c <__NVIC_SetPriority+0x4c>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	440b      	add	r3, r1
 8003374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003378:	e00a      	b.n	8003390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <__NVIC_SetPriority+0x50>)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	3b04      	subs	r3, #4
 8003388:	0112      	lsls	r2, r2, #4
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	440b      	add	r3, r1
 800338e:	761a      	strb	r2, [r3, #24]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f1c3 0307 	rsb	r3, r3, #7
 80033be:	2b04      	cmp	r3, #4
 80033c0:	bf28      	it	cs
 80033c2:	2304      	movcs	r3, #4
 80033c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d902      	bls.n	80033d4 <NVIC_EncodePriority+0x30>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3b03      	subs	r3, #3
 80033d2:	e000      	b.n	80033d6 <NVIC_EncodePriority+0x32>
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ec:	f04f 31ff 	mov.w	r1, #4294967295
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43d9      	mvns	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	4313      	orrs	r3, r2
         );
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ff90 	bl	8003350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff2d 	bl	80032b4 <__NVIC_SetPriorityGrouping>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003474:	f7ff ff42 	bl	80032fc <__NVIC_GetPriorityGrouping>
 8003478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7ff ff90 	bl	80033a4 <NVIC_EncodePriority>
 8003484:	4602      	mov	r2, r0
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff5f 	bl	8003350 <__NVIC_SetPriority>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff35 	bl	8003318 <__NVIC_EnableIRQ>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffa2 	bl	8003408 <SysTick_Config>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e043      	b.n	800356e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_DMA_Init+0xa8>)
 80034ee:	4413      	add	r3, r2
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <HAL_DMA_Init+0xac>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	009a      	lsls	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_DMA_Init+0xb0>)
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800351a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800351e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	bffdfff8 	.word	0xbffdfff8
 800357c:	cccccccd 	.word	0xcccccccd
 8003580:	40020000 	.word	0x40020000

08003584 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_DMA_Start_IT+0x20>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e04a      	b.n	800363a <HAL_DMA_Start_IT+0xb6>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d13a      	bne.n	800362c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f938 	bl	8003850 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 020e 	orr.w	r2, r2, #14
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e00f      	b.n	800361a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0204 	bic.w	r2, r2, #4
 8003608:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 020a 	orr.w	r2, r2, #10
 8003618:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e005      	b.n	8003638 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003634:	2302      	movs	r3, #2
 8003636:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	2204      	movs	r2, #4
 8003662:	409a      	lsls	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d04f      	beq.n	800370c <HAL_DMA_IRQHandler+0xc8>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d04a      	beq.n	800370c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0204 	bic.w	r2, r2, #4
 8003692:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a66      	ldr	r2, [pc, #408]	; (8003834 <HAL_DMA_IRQHandler+0x1f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d029      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xae>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_DMA_IRQHandler+0x1f4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_DMA_IRQHandler+0xaa>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a63      	ldr	r2, [pc, #396]	; (800383c <HAL_DMA_IRQHandler+0x1f8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01a      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xa4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a62      	ldr	r2, [pc, #392]	; (8003840 <HAL_DMA_IRQHandler+0x1fc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d012      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x9e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a60      	ldr	r2, [pc, #384]	; (8003844 <HAL_DMA_IRQHandler+0x200>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00a      	beq.n	80036dc <HAL_DMA_IRQHandler+0x98>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a5f      	ldr	r2, [pc, #380]	; (8003848 <HAL_DMA_IRQHandler+0x204>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x92>
 80036d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036d4:	e00e      	b.n	80036f4 <HAL_DMA_IRQHandler+0xb0>
 80036d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036da:	e00b      	b.n	80036f4 <HAL_DMA_IRQHandler+0xb0>
 80036dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036e0:	e008      	b.n	80036f4 <HAL_DMA_IRQHandler+0xb0>
 80036e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036e6:	e005      	b.n	80036f4 <HAL_DMA_IRQHandler+0xb0>
 80036e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ec:	e002      	b.n	80036f4 <HAL_DMA_IRQHandler+0xb0>
 80036ee:	2340      	movs	r3, #64	; 0x40
 80036f0:	e000      	b.n	80036f4 <HAL_DMA_IRQHandler+0xb0>
 80036f2:	2304      	movs	r3, #4
 80036f4:	4a55      	ldr	r2, [pc, #340]	; (800384c <HAL_DMA_IRQHandler+0x208>)
 80036f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8094 	beq.w	800382a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800370a:	e08e      	b.n	800382a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	2202      	movs	r2, #2
 8003712:	409a      	lsls	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d056      	beq.n	80037ca <HAL_DMA_IRQHandler+0x186>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d051      	beq.n	80037ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 020a 	bic.w	r2, r2, #10
 8003742:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a38      	ldr	r2, [pc, #224]	; (8003834 <HAL_DMA_IRQHandler+0x1f0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d029      	beq.n	80037aa <HAL_DMA_IRQHandler+0x166>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a37      	ldr	r2, [pc, #220]	; (8003838 <HAL_DMA_IRQHandler+0x1f4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d022      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x162>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a35      	ldr	r2, [pc, #212]	; (800383c <HAL_DMA_IRQHandler+0x1f8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01a      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x15c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a34      	ldr	r2, [pc, #208]	; (8003840 <HAL_DMA_IRQHandler+0x1fc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d012      	beq.n	800379a <HAL_DMA_IRQHandler+0x156>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a32      	ldr	r2, [pc, #200]	; (8003844 <HAL_DMA_IRQHandler+0x200>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00a      	beq.n	8003794 <HAL_DMA_IRQHandler+0x150>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_DMA_IRQHandler+0x204>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d102      	bne.n	800378e <HAL_DMA_IRQHandler+0x14a>
 8003788:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800378c:	e00e      	b.n	80037ac <HAL_DMA_IRQHandler+0x168>
 800378e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003792:	e00b      	b.n	80037ac <HAL_DMA_IRQHandler+0x168>
 8003794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003798:	e008      	b.n	80037ac <HAL_DMA_IRQHandler+0x168>
 800379a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800379e:	e005      	b.n	80037ac <HAL_DMA_IRQHandler+0x168>
 80037a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a4:	e002      	b.n	80037ac <HAL_DMA_IRQHandler+0x168>
 80037a6:	2320      	movs	r3, #32
 80037a8:	e000      	b.n	80037ac <HAL_DMA_IRQHandler+0x168>
 80037aa:	2302      	movs	r3, #2
 80037ac:	4a27      	ldr	r2, [pc, #156]	; (800384c <HAL_DMA_IRQHandler+0x208>)
 80037ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d034      	beq.n	800382a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037c8:	e02f      	b.n	800382a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2208      	movs	r2, #8
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d028      	beq.n	800382c <HAL_DMA_IRQHandler+0x1e8>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d023      	beq.n	800382c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 020e 	bic.w	r2, r2, #14
 80037f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
    }
  }
  return;
 800382a:	bf00      	nop
 800382c:	bf00      	nop
}
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40020008 	.word	0x40020008
 8003838:	4002001c 	.word	0x4002001c
 800383c:	40020030 	.word	0x40020030
 8003840:	40020044 	.word	0x40020044
 8003844:	40020058 	.word	0x40020058
 8003848:	4002006c 	.word	0x4002006c
 800384c:	40020000 	.word	0x40020000

08003850 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f202 	lsl.w	r2, r1, r2
 800386c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b10      	cmp	r3, #16
 800387c:	d108      	bne.n	8003890 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800388e:	e007      	b.n	80038a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b08b      	sub	sp, #44	; 0x2c
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038ba:	2300      	movs	r3, #0
 80038bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038be:	e127      	b.n	8003b10 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038c0:	2201      	movs	r2, #1
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	429a      	cmp	r2, r3
 80038da:	f040 8116 	bne.w	8003b0a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b12      	cmp	r3, #18
 80038e4:	d034      	beq.n	8003950 <HAL_GPIO_Init+0xa4>
 80038e6:	2b12      	cmp	r3, #18
 80038e8:	d80d      	bhi.n	8003906 <HAL_GPIO_Init+0x5a>
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d02b      	beq.n	8003946 <HAL_GPIO_Init+0x9a>
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d804      	bhi.n	80038fc <HAL_GPIO_Init+0x50>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d031      	beq.n	800395a <HAL_GPIO_Init+0xae>
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d01c      	beq.n	8003934 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038fa:	e048      	b.n	800398e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d043      	beq.n	8003988 <HAL_GPIO_Init+0xdc>
 8003900:	2b11      	cmp	r3, #17
 8003902:	d01b      	beq.n	800393c <HAL_GPIO_Init+0x90>
          break;
 8003904:	e043      	b.n	800398e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003906:	4a89      	ldr	r2, [pc, #548]	; (8003b2c <HAL_GPIO_Init+0x280>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d026      	beq.n	800395a <HAL_GPIO_Init+0xae>
 800390c:	4a87      	ldr	r2, [pc, #540]	; (8003b2c <HAL_GPIO_Init+0x280>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d806      	bhi.n	8003920 <HAL_GPIO_Init+0x74>
 8003912:	4a87      	ldr	r2, [pc, #540]	; (8003b30 <HAL_GPIO_Init+0x284>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d020      	beq.n	800395a <HAL_GPIO_Init+0xae>
 8003918:	4a86      	ldr	r2, [pc, #536]	; (8003b34 <HAL_GPIO_Init+0x288>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01d      	beq.n	800395a <HAL_GPIO_Init+0xae>
          break;
 800391e:	e036      	b.n	800398e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003920:	4a85      	ldr	r2, [pc, #532]	; (8003b38 <HAL_GPIO_Init+0x28c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d019      	beq.n	800395a <HAL_GPIO_Init+0xae>
 8003926:	4a85      	ldr	r2, [pc, #532]	; (8003b3c <HAL_GPIO_Init+0x290>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d016      	beq.n	800395a <HAL_GPIO_Init+0xae>
 800392c:	4a84      	ldr	r2, [pc, #528]	; (8003b40 <HAL_GPIO_Init+0x294>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0xae>
          break;
 8003932:	e02c      	b.n	800398e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	623b      	str	r3, [r7, #32]
          break;
 800393a:	e028      	b.n	800398e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	3304      	adds	r3, #4
 8003942:	623b      	str	r3, [r7, #32]
          break;
 8003944:	e023      	b.n	800398e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	3308      	adds	r3, #8
 800394c:	623b      	str	r3, [r7, #32]
          break;
 800394e:	e01e      	b.n	800398e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	330c      	adds	r3, #12
 8003956:	623b      	str	r3, [r7, #32]
          break;
 8003958:	e019      	b.n	800398e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003962:	2304      	movs	r3, #4
 8003964:	623b      	str	r3, [r7, #32]
          break;
 8003966:	e012      	b.n	800398e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003970:	2308      	movs	r3, #8
 8003972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	611a      	str	r2, [r3, #16]
          break;
 800397a:	e008      	b.n	800398e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800397c:	2308      	movs	r3, #8
 800397e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	615a      	str	r2, [r3, #20]
          break;
 8003986:	e002      	b.n	800398e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003988:	2300      	movs	r3, #0
 800398a:	623b      	str	r3, [r7, #32]
          break;
 800398c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2bff      	cmp	r3, #255	; 0xff
 8003992:	d801      	bhi.n	8003998 <HAL_GPIO_Init+0xec>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	e001      	b.n	800399c <HAL_GPIO_Init+0xf0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2bff      	cmp	r3, #255	; 0xff
 80039a2:	d802      	bhi.n	80039aa <HAL_GPIO_Init+0xfe>
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	e002      	b.n	80039b0 <HAL_GPIO_Init+0x104>
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	3b08      	subs	r3, #8
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	210f      	movs	r1, #15
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	401a      	ands	r2, r3
 80039c2:	6a39      	ldr	r1, [r7, #32]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	431a      	orrs	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8096 	beq.w	8003b0a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039de:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_GPIO_Init+0x298>)
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_GPIO_Init+0x298>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6193      	str	r3, [r2, #24]
 80039ea:	4b56      	ldr	r3, [pc, #344]	; (8003b44 <HAL_GPIO_Init+0x298>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039f6:	4a54      	ldr	r2, [pc, #336]	; (8003b48 <HAL_GPIO_Init+0x29c>)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	3302      	adds	r3, #2
 80039fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a02:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4013      	ands	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4b      	ldr	r2, [pc, #300]	; (8003b4c <HAL_GPIO_Init+0x2a0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_GPIO_Init+0x19e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4a      	ldr	r2, [pc, #296]	; (8003b50 <HAL_GPIO_Init+0x2a4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00d      	beq.n	8003a46 <HAL_GPIO_Init+0x19a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a49      	ldr	r2, [pc, #292]	; (8003b54 <HAL_GPIO_Init+0x2a8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <HAL_GPIO_Init+0x196>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a48      	ldr	r2, [pc, #288]	; (8003b58 <HAL_GPIO_Init+0x2ac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_GPIO_Init+0x192>
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e006      	b.n	8003a4c <HAL_GPIO_Init+0x1a0>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e004      	b.n	8003a4c <HAL_GPIO_Init+0x1a0>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e002      	b.n	8003a4c <HAL_GPIO_Init+0x1a0>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_GPIO_Init+0x1a0>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	f002 0203 	and.w	r2, r2, #3
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	4093      	lsls	r3, r2
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a5c:	493a      	ldr	r1, [pc, #232]	; (8003b48 <HAL_GPIO_Init+0x29c>)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	3302      	adds	r3, #2
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4938      	ldr	r1, [pc, #224]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]
 8003a82:	e006      	b.n	8003a92 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a84:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	4933      	ldr	r1, [pc, #204]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	492e      	ldr	r1, [pc, #184]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
 8003aaa:	e006      	b.n	8003aba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	4929      	ldr	r1, [pc, #164]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	4924      	ldr	r1, [pc, #144]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
 8003ad2:	e006      	b.n	8003ae2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	491a      	ldr	r1, [pc, #104]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60cb      	str	r3, [r1, #12]
 8003afa:	e006      	b.n	8003b0a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003afc:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	4915      	ldr	r1, [pc, #84]	; (8003b5c <HAL_GPIO_Init+0x2b0>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f47f aed0 	bne.w	80038c0 <HAL_GPIO_Init+0x14>
  }
}
 8003b20:	bf00      	nop
 8003b22:	372c      	adds	r7, #44	; 0x2c
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	10210000 	.word	0x10210000
 8003b30:	10110000 	.word	0x10110000
 8003b34:	10120000 	.word	0x10120000
 8003b38:	10310000 	.word	0x10310000
 8003b3c:	10320000 	.word	0x10320000
 8003b40:	10220000 	.word	0x10220000
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	40010c00 	.word	0x40010c00
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	40010400 	.word	0x40010400

08003b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e001      	b.n	8003b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	807b      	strh	r3, [r7, #2]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b9e:	787b      	ldrb	r3, [r7, #1]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba4:	887a      	ldrh	r2, [r7, #2]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003baa:	e003      	b.n	8003bb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	041a      	lsls	r2, r3, #16
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	611a      	str	r2, [r3, #16]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bd0:	887a      	ldrh	r2, [r7, #2]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	041a      	lsls	r2, r3, #16
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	887b      	ldrh	r3, [r7, #2]
 8003bde:	400b      	ands	r3, r1
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	611a      	str	r2, [r3, #16]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e26c      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8087 	beq.w	8003d1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c10:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 030c 	and.w	r3, r3, #12
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d00c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c1c:	4b8f      	ldr	r3, [pc, #572]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d112      	bne.n	8003c4e <HAL_RCC_OscConfig+0x5e>
 8003c28:	4b8c      	ldr	r3, [pc, #560]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c36:	4b89      	ldr	r3, [pc, #548]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d06c      	beq.n	8003d1c <HAL_RCC_OscConfig+0x12c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d168      	bne.n	8003d1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e246      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x76>
 8003c58:	4b80      	ldr	r3, [pc, #512]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7f      	ldr	r2, [pc, #508]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	e02e      	b.n	8003cc4 <HAL_RCC_OscConfig+0xd4>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x98>
 8003c6e:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7a      	ldr	r2, [pc, #488]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	4b78      	ldr	r3, [pc, #480]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a77      	ldr	r2, [pc, #476]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e01d      	b.n	8003cc4 <HAL_RCC_OscConfig+0xd4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0xbc>
 8003c92:	4b72      	ldr	r3, [pc, #456]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a71      	ldr	r2, [pc, #452]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a6e      	ldr	r2, [pc, #440]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xd4>
 8003cac:	4b6b      	ldr	r3, [pc, #428]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6a      	ldr	r2, [pc, #424]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe ff14 	bl	8002af8 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fe ff10 	bl	8002af8 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e1fa      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b5d      	ldr	r3, [pc, #372]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xe4>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe ff00 	bl	8002af8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fe fefc 	bl	8002af8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1e6      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	4b53      	ldr	r3, [pc, #332]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x10c>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d063      	beq.n	8003df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d2a:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d36:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d11c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x18c>
 8003d42:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d116      	bne.n	8003d7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_OscConfig+0x176>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e1ba      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4939      	ldr	r1, [pc, #228]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	e03a      	b.n	8003df2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d020      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d84:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <HAL_RCC_OscConfig+0x270>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fe feb5 	bl	8002af8 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d92:	f7fe feb1 	bl	8002af8 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e19b      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4927      	ldr	r1, [pc, #156]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	e015      	b.n	8003df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fe94 	bl	8002af8 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd4:	f7fe fe90 	bl	8002af8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e17a      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d03a      	beq.n	8003e74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d019      	beq.n	8003e3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <HAL_RCC_OscConfig+0x274>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fe74 	bl	8002af8 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e14:	f7fe fe70 	bl	8002af8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e15a      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f000 faa8 	bl	8004388 <RCC_Delay>
 8003e38:	e01c      	b.n	8003e74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e40:	f7fe fe5a 	bl	8002af8 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e46:	e00f      	b.n	8003e68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e48:	f7fe fe56 	bl	8002af8 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d908      	bls.n	8003e68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e140      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	42420000 	.word	0x42420000
 8003e64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e68:	4b9e      	ldr	r3, [pc, #632]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e9      	bne.n	8003e48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80a6 	beq.w	8003fce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	4b97      	ldr	r3, [pc, #604]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4b94      	ldr	r3, [pc, #592]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	4a93      	ldr	r2, [pc, #588]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	61d3      	str	r3, [r2, #28]
 8003e9e:	4b91      	ldr	r3, [pc, #580]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b8e      	ldr	r3, [pc, #568]	; (80040e8 <HAL_RCC_OscConfig+0x4f8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b8b      	ldr	r3, [pc, #556]	; (80040e8 <HAL_RCC_OscConfig+0x4f8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a8a      	ldr	r2, [pc, #552]	; (80040e8 <HAL_RCC_OscConfig+0x4f8>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fe17 	bl	8002af8 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fe fe13 	bl	8002af8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b64      	cmp	r3, #100	; 0x64
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0fd      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b81      	ldr	r3, [pc, #516]	; (80040e8 <HAL_RCC_OscConfig+0x4f8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x312>
 8003ef4:	4b7b      	ldr	r3, [pc, #492]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4a7a      	ldr	r2, [pc, #488]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6213      	str	r3, [r2, #32]
 8003f00:	e02d      	b.n	8003f5e <HAL_RCC_OscConfig+0x36e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x334>
 8003f0a:	4b76      	ldr	r3, [pc, #472]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4a75      	ldr	r2, [pc, #468]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6213      	str	r3, [r2, #32]
 8003f16:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	4a72      	ldr	r2, [pc, #456]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	6213      	str	r3, [r2, #32]
 8003f22:	e01c      	b.n	8003f5e <HAL_RCC_OscConfig+0x36e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCC_OscConfig+0x356>
 8003f2c:	4b6d      	ldr	r3, [pc, #436]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a6c      	ldr	r2, [pc, #432]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6213      	str	r3, [r2, #32]
 8003f38:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4a69      	ldr	r2, [pc, #420]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6213      	str	r3, [r2, #32]
 8003f44:	e00b      	b.n	8003f5e <HAL_RCC_OscConfig+0x36e>
 8003f46:	4b67      	ldr	r3, [pc, #412]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4a66      	ldr	r2, [pc, #408]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6213      	str	r3, [r2, #32]
 8003f52:	4b64      	ldr	r3, [pc, #400]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4a63      	ldr	r2, [pc, #396]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d015      	beq.n	8003f92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fe fdc7 	bl	8002af8 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fe fdc3 	bl	8002af8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e0ab      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ee      	beq.n	8003f6e <HAL_RCC_OscConfig+0x37e>
 8003f90:	e014      	b.n	8003fbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f92:	f7fe fdb1 	bl	8002af8 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe fdad 	bl	8002af8 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e095      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb0:	4b4c      	ldr	r3, [pc, #304]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ee      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc2:	4b48      	ldr	r3, [pc, #288]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4a47      	ldr	r2, [pc, #284]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8081 	beq.w	80040da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fd8:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d061      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d146      	bne.n	800407a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <HAL_RCC_OscConfig+0x4fc>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe fd81 	bl	8002af8 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fe fd7d 	bl	8002af8 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e067      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400c:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d108      	bne.n	8004034 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004022:	4b30      	ldr	r3, [pc, #192]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	492d      	ldr	r1, [pc, #180]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004034:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a19      	ldr	r1, [r3, #32]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	430b      	orrs	r3, r1
 8004046:	4927      	ldr	r1, [pc, #156]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <HAL_RCC_OscConfig+0x4fc>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fe fd51 	bl	8002af8 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe fd4d 	bl	8002af8 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e037      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x46a>
 8004078:	e02f      	b.n	80040da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <HAL_RCC_OscConfig+0x4fc>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe fd3a 	bl	8002af8 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004088:	f7fe fd36 	bl	8002af8 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e020      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x498>
 80040a6:	e018      	b.n	80040da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e013      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_OscConfig+0x4f4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d001      	beq.n	80040da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42420060 	.word	0x42420060

080040f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0d0      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004104:	4b6a      	ldr	r3, [pc, #424]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d910      	bls.n	8004134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b67      	ldr	r3, [pc, #412]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 0207 	bic.w	r2, r3, #7
 800411a:	4965      	ldr	r1, [pc, #404]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b63      	ldr	r3, [pc, #396]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0b8      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d020      	beq.n	8004182 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800414c:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a58      	ldr	r2, [pc, #352]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004156:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004164:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4a52      	ldr	r2, [pc, #328]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800416a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800416e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	4b50      	ldr	r3, [pc, #320]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	494d      	ldr	r1, [pc, #308]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d040      	beq.n	8004210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d115      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e07f      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ae:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e073      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041be:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06b      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ce:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4936      	ldr	r1, [pc, #216]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e0:	f7fe fc8a 	bl	8002af8 <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e8:	f7fe fc86 	bl	8002af8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e053      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 020c 	and.w	r2, r3, #12
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	429a      	cmp	r2, r3
 800420e:	d1eb      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004210:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d210      	bcs.n	8004240 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0207 	bic.w	r2, r3, #7
 8004226:	4922      	ldr	r1, [pc, #136]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e032      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424c:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4916      	ldr	r1, [pc, #88]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	490e      	ldr	r1, [pc, #56]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800427e:	f000 f821 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8004282:	4601      	mov	r1, r0
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004290:	5cd3      	ldrb	r3, [r2, r3]
 8004292:	fa21 f303 	lsr.w	r3, r1, r3
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <HAL_RCC_ClockConfig+0x1cc>)
 8004298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1d0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fbe8 	bl	8002a74 <HAL_InitTick>

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40021000 	.word	0x40021000
 80042b8:	0800580c 	.word	0x0800580c
 80042bc:	2000003c 	.word	0x2000003c
 80042c0:	20000040 	.word	0x20000040

080042c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	b490      	push	{r4, r7}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042cc:	1d3c      	adds	r4, r7, #4
 80042ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042d4:	4b28      	ldr	r3, [pc, #160]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	2300      	movs	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042ee:	4b23      	ldr	r3, [pc, #140]	; (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d002      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x40>
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d003      	beq.n	800430a <HAL_RCC_GetSysClockFreq+0x46>
 8004302:	e02d      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004304:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004306:	623b      	str	r3, [r7, #32]
      break;
 8004308:	e02d      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	0c9b      	lsrs	r3, r3, #18
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004316:	4413      	add	r3, r2
 8004318:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800431c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <HAL_RCC_GetSysClockFreq+0xb8>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	0c5b      	lsrs	r3, r3, #17
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004336:	4413      	add	r3, r2
 8004338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800433c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	4a0f      	ldr	r2, [pc, #60]	; (8004380 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004342:	fb02 f203 	mul.w	r2, r2, r3
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	e004      	b.n	800435a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	623b      	str	r3, [r7, #32]
      break;
 800435e:	e002      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004362:	623b      	str	r3, [r7, #32]
      break;
 8004364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004366:	6a3b      	ldr	r3, [r7, #32]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3728      	adds	r7, #40	; 0x28
 800436c:	46bd      	mov	sp, r7
 800436e:	bc90      	pop	{r4, r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	080057f8 	.word	0x080057f8
 8004378:	08005808 	.word	0x08005808
 800437c:	40021000 	.word	0x40021000
 8004380:	007a1200 	.word	0x007a1200
 8004384:	003d0900 	.word	0x003d0900

08004388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <RCC_Delay+0x34>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <RCC_Delay+0x38>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0a5b      	lsrs	r3, r3, #9
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043a4:	bf00      	nop
  }
  while (Delay --);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1e5a      	subs	r2, r3, #1
 80043aa:	60fa      	str	r2, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f9      	bne.n	80043a4 <RCC_Delay+0x1c>
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000003c 	.word	0x2000003c
 80043c0:	10624dd3 	.word	0x10624dd3

080043c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d07d      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e4:	4b4f      	ldr	r3, [pc, #316]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f0:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4a4b      	ldr	r2, [pc, #300]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fa:	61d3      	str	r3, [r2, #28]
 80043fc:	4b49      	ldr	r3, [pc, #292]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004408:	2301      	movs	r3, #1
 800440a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	4b46      	ldr	r3, [pc, #280]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d118      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004418:	4b43      	ldr	r3, [pc, #268]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a42      	ldr	r2, [pc, #264]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004424:	f7fe fb68 	bl	8002af8 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	e008      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442c:	f7fe fb64 	bl	8002af8 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e06d      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443e:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800444a:	4b36      	ldr	r3, [pc, #216]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d02e      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	429a      	cmp	r2, r3
 8004466:	d027      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004468:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004470:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004478:	4b2c      	ldr	r3, [pc, #176]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800447e:	4a29      	ldr	r2, [pc, #164]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d014      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fe fb33 	bl	8002af8 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004494:	e00a      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fe fb2f 	bl	8002af8 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e036      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ee      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b8:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	4917      	ldr	r1, [pc, #92]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	490b      	ldr	r1, [pc, #44]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	4904      	ldr	r1, [pc, #16]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	40007000 	.word	0x40007000
 800452c:	42420440 	.word	0x42420440

08004530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e041      	b.n	80045c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd fdea 	bl	8002130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fc14 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e03a      	b.n	800465e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a18      	ldr	r2, [pc, #96]	; (8004668 <HAL_TIM_Base_Start_IT+0x98>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x58>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d009      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x58>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a14      	ldr	r2, [pc, #80]	; (800466c <HAL_TIM_Base_Start_IT+0x9c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x58>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a13      	ldr	r2, [pc, #76]	; (8004670 <HAL_TIM_Base_Start_IT+0xa0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d111      	bne.n	800464c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d010      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464a:	e007      	b.n	800465c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800

08004674 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e041      	b.n	800470a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fd2c 	bl	80020f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f000 fb72 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_TIM_PWM_Start+0x24>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e022      	b.n	800477e <HAL_TIM_PWM_Start+0x6a>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b04      	cmp	r3, #4
 800473c:	d109      	bne.n	8004752 <HAL_TIM_PWM_Start+0x3e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	bf14      	ite	ne
 800474a:	2301      	movne	r3, #1
 800474c:	2300      	moveq	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	e015      	b.n	800477e <HAL_TIM_PWM_Start+0x6a>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d109      	bne.n	800476c <HAL_TIM_PWM_Start+0x58>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e008      	b.n	800477e <HAL_TIM_PWM_Start+0x6a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e05e      	b.n	8004844 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0x82>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	e013      	b.n	80047be <HAL_TIM_PWM_Start+0xaa>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x92>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a4:	e00b      	b.n	80047be <HAL_TIM_PWM_Start+0xaa>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_PWM_Start+0xa2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b4:	e003      	b.n	80047be <HAL_TIM_PWM_Start+0xaa>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	6839      	ldr	r1, [r7, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fd68 	bl	800529c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1e      	ldr	r2, [pc, #120]	; (800484c <HAL_TIM_PWM_Start+0x138>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d107      	bne.n	80047e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_TIM_PWM_Start+0x138>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIM_PWM_Start+0xfa>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f8:	d009      	beq.n	800480e <HAL_TIM_PWM_Start+0xfa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a14      	ldr	r2, [pc, #80]	; (8004850 <HAL_TIM_PWM_Start+0x13c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIM_PWM_Start+0xfa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a12      	ldr	r2, [pc, #72]	; (8004854 <HAL_TIM_PWM_Start+0x140>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d111      	bne.n	8004832 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b06      	cmp	r3, #6
 800481e:	d010      	beq.n	8004842 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004830:	e007      	b.n	8004842 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40012c00 	.word	0x40012c00
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800

08004858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0202 	mvn.w	r2, #2
 8004884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa62 	bl	8004d64 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa55 	bl	8004d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fa64 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0204 	mvn.w	r2, #4
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa38 	bl	8004d64 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa2b 	bl	8004d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fa3a 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b08      	cmp	r3, #8
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0208 	mvn.w	r2, #8
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2204      	movs	r2, #4
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa0e 	bl	8004d64 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa01 	bl	8004d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa10 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b10      	cmp	r3, #16
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b10      	cmp	r3, #16
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0210 	mvn.w	r2, #16
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2208      	movs	r2, #8
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9e4 	bl	8004d64 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9d7 	bl	8004d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f9e6 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d10e      	bne.n	80049dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0201 	mvn.w	r2, #1
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd fa8c 	bl	8001ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d10e      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d107      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fcd5 	bl	80053b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d10e      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d107      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9aa 	bl	8004d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0220 	mvn.w	r2, #32
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fca0 	bl	80053a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0ac      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	f200 809f 	bhi.w	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004bd1 	.word	0x08004bd1
 8004aa0:	08004bd1 	.word	0x08004bd1
 8004aa4:	08004bd1 	.word	0x08004bd1
 8004aa8:	08004b0d 	.word	0x08004b0d
 8004aac:	08004bd1 	.word	0x08004bd1
 8004ab0:	08004bd1 	.word	0x08004bd1
 8004ab4:	08004bd1 	.word	0x08004bd1
 8004ab8:	08004b4f 	.word	0x08004b4f
 8004abc:	08004bd1 	.word	0x08004bd1
 8004ac0:	08004bd1 	.word	0x08004bd1
 8004ac4:	08004bd1 	.word	0x08004bd1
 8004ac8:	08004b8f 	.word	0x08004b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f9c4 	bl	8004e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0204 	bic.w	r2, r2, #4
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	619a      	str	r2, [r3, #24]
      break;
 8004b0a:	e062      	b.n	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fa0a 	bl	8004f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6999      	ldr	r1, [r3, #24]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	021a      	lsls	r2, r3, #8
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	619a      	str	r2, [r3, #24]
      break;
 8004b4c:	e041      	b.n	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fa53 	bl	8005000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0208 	orr.w	r2, r2, #8
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0204 	bic.w	r2, r2, #4
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	61da      	str	r2, [r3, #28]
      break;
 8004b8c:	e021      	b.n	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fa9d 	bl	80050d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	61da      	str	r2, [r3, #28]
      break;
 8004bce:	e000      	b.n	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004bd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_ConfigClockSource+0x18>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e0a6      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x166>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d067      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0x120>
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d80b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x6c>
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d073      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0x140>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d802      	bhi.n	8004c46 <HAL_TIM_ConfigClockSource+0x62>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d06f      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c44:	e078      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d06c      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0x140>
 8004c4a:	2b30      	cmp	r3, #48	; 0x30
 8004c4c:	d06a      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c4e:	e073      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c50:	2b70      	cmp	r3, #112	; 0x70
 8004c52:	d00d      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0x8c>
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d804      	bhi.n	8004c62 <HAL_TIM_ConfigClockSource+0x7e>
 8004c58:	2b50      	cmp	r3, #80	; 0x50
 8004c5a:	d033      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0xe0>
 8004c5c:	2b60      	cmp	r3, #96	; 0x60
 8004c5e:	d041      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c60:	e06a      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c66:	d066      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x152>
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6c:	d017      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c6e:	e063      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6899      	ldr	r1, [r3, #8]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f000 faed 	bl	800525e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	609a      	str	r2, [r3, #8]
      break;
 8004c9c:	e04c      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6899      	ldr	r1, [r3, #8]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f000 fad6 	bl	800525e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc0:	609a      	str	r2, [r3, #8]
      break;
 8004cc2:	e039      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f000 fa4d 	bl	8005170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2150      	movs	r1, #80	; 0x50
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 faa4 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004ce2:	e029      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f000 fa6b 	bl	80051cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2160      	movs	r1, #96	; 0x60
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fa94 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004d02:	e019      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	461a      	mov	r2, r3
 8004d12:	f000 fa2d 	bl	8005170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2140      	movs	r1, #64	; 0x40
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fa84 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004d22:	e009      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f000 fa7b 	bl	800522a <TIM_ITRx_SetConfig>
        break;
 8004d34:	e000      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
	...

08004d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a29      	ldr	r2, [pc, #164]	; (8004e54 <TIM_Base_SetConfig+0xb8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_Base_SetConfig+0x30>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d007      	beq.n	8004dcc <TIM_Base_SetConfig+0x30>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <TIM_Base_SetConfig+0xbc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0x30>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a25      	ldr	r2, [pc, #148]	; (8004e5c <TIM_Base_SetConfig+0xc0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d108      	bne.n	8004dde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <TIM_Base_SetConfig+0xb8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00b      	beq.n	8004dfe <TIM_Base_SetConfig+0x62>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d007      	beq.n	8004dfe <TIM_Base_SetConfig+0x62>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <TIM_Base_SetConfig+0xbc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <TIM_Base_SetConfig+0x62>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <TIM_Base_SetConfig+0xc0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d108      	bne.n	8004e10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a07      	ldr	r2, [pc, #28]	; (8004e54 <TIM_Base_SetConfig+0xb8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d103      	bne.n	8004e44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	615a      	str	r2, [r3, #20]
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800

08004e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f023 0201 	bic.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 0302 	bic.w	r3, r3, #2
 8004ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <TIM_OC1_SetConfig+0xc8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10c      	bne.n	8004ed6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0308 	bic.w	r3, r3, #8
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <TIM_OC1_SetConfig+0xc8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d111      	bne.n	8004f02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	621a      	str	r2, [r3, #32]
}
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40012c00 	.word	0x40012c00

08004f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0210 	bic.w	r2, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0320 	bic.w	r3, r3, #32
 8004f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <TIM_OC2_SetConfig+0xd0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10d      	bne.n	8004fa8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <TIM_OC2_SetConfig+0xd0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d113      	bne.n	8004fd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00

08005000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <TIM_OC3_SetConfig+0xd0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10d      	bne.n	800507a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <TIM_OC3_SetConfig+0xd0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d113      	bne.n	80050aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40012c00 	.word	0x40012c00

080050d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800511e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	031b      	lsls	r3, r3, #12
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a0f      	ldr	r2, [pc, #60]	; (800516c <TIM_OC4_SetConfig+0x98>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d109      	bne.n	8005148 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800513a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	019b      	lsls	r3, r3, #6
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	40012c00 	.word	0x40012c00

08005170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800519a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f023 030a 	bic.w	r3, r3, #10
 80051ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f023 0210 	bic.w	r2, r3, #16
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	031b      	lsls	r3, r3, #12
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005208:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	621a      	str	r2, [r3, #32]
}
 8005220:	bf00      	nop
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	f043 0307 	orr.w	r3, r3, #7
 800524c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800525e:	b480      	push	{r7}
 8005260:	b087      	sub	sp, #28
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005278:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	021a      	lsls	r2, r3, #8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	431a      	orrs	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4313      	orrs	r3, r2
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	609a      	str	r2, [r3, #8]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2201      	movs	r2, #1
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1a      	ldr	r2, [r3, #32]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	43db      	mvns	r3, r3
 80052be:	401a      	ands	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e046      	b.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005348:	d009      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a10      	ldr	r2, [pc, #64]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10c      	bne.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4313      	orrs	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800

080053a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <atoi>:
 80053c4:	220a      	movs	r2, #10
 80053c6:	2100      	movs	r1, #0
 80053c8:	f000 b8ca 	b.w	8005560 <strtol>

080053cc <__libc_init_array>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	2500      	movs	r5, #0
 80053d0:	4e0c      	ldr	r6, [pc, #48]	; (8005404 <__libc_init_array+0x38>)
 80053d2:	4c0d      	ldr	r4, [pc, #52]	; (8005408 <__libc_init_array+0x3c>)
 80053d4:	1ba4      	subs	r4, r4, r6
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	42a5      	cmp	r5, r4
 80053da:	d109      	bne.n	80053f0 <__libc_init_array+0x24>
 80053dc:	f000 f936 	bl	800564c <_init>
 80053e0:	2500      	movs	r5, #0
 80053e2:	4e0a      	ldr	r6, [pc, #40]	; (800540c <__libc_init_array+0x40>)
 80053e4:	4c0a      	ldr	r4, [pc, #40]	; (8005410 <__libc_init_array+0x44>)
 80053e6:	1ba4      	subs	r4, r4, r6
 80053e8:	10a4      	asrs	r4, r4, #2
 80053ea:	42a5      	cmp	r5, r4
 80053ec:	d105      	bne.n	80053fa <__libc_init_array+0x2e>
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053f4:	4798      	blx	r3
 80053f6:	3501      	adds	r5, #1
 80053f8:	e7ee      	b.n	80053d8 <__libc_init_array+0xc>
 80053fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053fe:	4798      	blx	r3
 8005400:	3501      	adds	r5, #1
 8005402:	e7f2      	b.n	80053ea <__libc_init_array+0x1e>
 8005404:	0800594c 	.word	0x0800594c
 8005408:	0800594c 	.word	0x0800594c
 800540c:	0800594c 	.word	0x0800594c
 8005410:	08005950 	.word	0x08005950

08005414 <__itoa>:
 8005414:	1e93      	subs	r3, r2, #2
 8005416:	2b22      	cmp	r3, #34	; 0x22
 8005418:	b510      	push	{r4, lr}
 800541a:	460c      	mov	r4, r1
 800541c:	d904      	bls.n	8005428 <__itoa+0x14>
 800541e:	2300      	movs	r3, #0
 8005420:	461c      	mov	r4, r3
 8005422:	700b      	strb	r3, [r1, #0]
 8005424:	4620      	mov	r0, r4
 8005426:	bd10      	pop	{r4, pc}
 8005428:	2a0a      	cmp	r2, #10
 800542a:	d109      	bne.n	8005440 <__itoa+0x2c>
 800542c:	2800      	cmp	r0, #0
 800542e:	da07      	bge.n	8005440 <__itoa+0x2c>
 8005430:	232d      	movs	r3, #45	; 0x2d
 8005432:	700b      	strb	r3, [r1, #0]
 8005434:	2101      	movs	r1, #1
 8005436:	4240      	negs	r0, r0
 8005438:	4421      	add	r1, r4
 800543a:	f000 f8a7 	bl	800558c <__utoa>
 800543e:	e7f1      	b.n	8005424 <__itoa+0x10>
 8005440:	2100      	movs	r1, #0
 8005442:	e7f9      	b.n	8005438 <__itoa+0x24>

08005444 <itoa>:
 8005444:	f7ff bfe6 	b.w	8005414 <__itoa>

08005448 <memset>:
 8005448:	4603      	mov	r3, r0
 800544a:	4402      	add	r2, r0
 800544c:	4293      	cmp	r3, r2
 800544e:	d100      	bne.n	8005452 <memset+0xa>
 8005450:	4770      	bx	lr
 8005452:	f803 1b01 	strb.w	r1, [r3], #1
 8005456:	e7f9      	b.n	800544c <memset+0x4>

08005458 <strcpy>:
 8005458:	4603      	mov	r3, r0
 800545a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545e:	f803 2b01 	strb.w	r2, [r3], #1
 8005462:	2a00      	cmp	r2, #0
 8005464:	d1f9      	bne.n	800545a <strcpy+0x2>
 8005466:	4770      	bx	lr

08005468 <_strtol_l.isra.0>:
 8005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	4680      	mov	r8, r0
 800546e:	4689      	mov	r9, r1
 8005470:	4692      	mov	sl, r2
 8005472:	461e      	mov	r6, r3
 8005474:	460f      	mov	r7, r1
 8005476:	463d      	mov	r5, r7
 8005478:	9808      	ldr	r0, [sp, #32]
 800547a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800547e:	f000 f8c3 	bl	8005608 <__locale_ctype_ptr_l>
 8005482:	4420      	add	r0, r4
 8005484:	7843      	ldrb	r3, [r0, #1]
 8005486:	f013 0308 	ands.w	r3, r3, #8
 800548a:	d132      	bne.n	80054f2 <_strtol_l.isra.0+0x8a>
 800548c:	2c2d      	cmp	r4, #45	; 0x2d
 800548e:	d132      	bne.n	80054f6 <_strtol_l.isra.0+0x8e>
 8005490:	2201      	movs	r2, #1
 8005492:	787c      	ldrb	r4, [r7, #1]
 8005494:	1cbd      	adds	r5, r7, #2
 8005496:	2e00      	cmp	r6, #0
 8005498:	d05d      	beq.n	8005556 <_strtol_l.isra.0+0xee>
 800549a:	2e10      	cmp	r6, #16
 800549c:	d109      	bne.n	80054b2 <_strtol_l.isra.0+0x4a>
 800549e:	2c30      	cmp	r4, #48	; 0x30
 80054a0:	d107      	bne.n	80054b2 <_strtol_l.isra.0+0x4a>
 80054a2:	782b      	ldrb	r3, [r5, #0]
 80054a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80054a8:	2b58      	cmp	r3, #88	; 0x58
 80054aa:	d14f      	bne.n	800554c <_strtol_l.isra.0+0xe4>
 80054ac:	2610      	movs	r6, #16
 80054ae:	786c      	ldrb	r4, [r5, #1]
 80054b0:	3502      	adds	r5, #2
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	bf14      	ite	ne
 80054b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80054ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80054be:	2700      	movs	r7, #0
 80054c0:	fbb1 fcf6 	udiv	ip, r1, r6
 80054c4:	4638      	mov	r0, r7
 80054c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80054ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80054ce:	2b09      	cmp	r3, #9
 80054d0:	d817      	bhi.n	8005502 <_strtol_l.isra.0+0x9a>
 80054d2:	461c      	mov	r4, r3
 80054d4:	42a6      	cmp	r6, r4
 80054d6:	dd23      	ble.n	8005520 <_strtol_l.isra.0+0xb8>
 80054d8:	1c7b      	adds	r3, r7, #1
 80054da:	d007      	beq.n	80054ec <_strtol_l.isra.0+0x84>
 80054dc:	4584      	cmp	ip, r0
 80054de:	d31c      	bcc.n	800551a <_strtol_l.isra.0+0xb2>
 80054e0:	d101      	bne.n	80054e6 <_strtol_l.isra.0+0x7e>
 80054e2:	45a6      	cmp	lr, r4
 80054e4:	db19      	blt.n	800551a <_strtol_l.isra.0+0xb2>
 80054e6:	2701      	movs	r7, #1
 80054e8:	fb00 4006 	mla	r0, r0, r6, r4
 80054ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054f0:	e7eb      	b.n	80054ca <_strtol_l.isra.0+0x62>
 80054f2:	462f      	mov	r7, r5
 80054f4:	e7bf      	b.n	8005476 <_strtol_l.isra.0+0xe>
 80054f6:	2c2b      	cmp	r4, #43	; 0x2b
 80054f8:	bf04      	itt	eq
 80054fa:	1cbd      	addeq	r5, r7, #2
 80054fc:	787c      	ldrbeq	r4, [r7, #1]
 80054fe:	461a      	mov	r2, r3
 8005500:	e7c9      	b.n	8005496 <_strtol_l.isra.0+0x2e>
 8005502:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005506:	2b19      	cmp	r3, #25
 8005508:	d801      	bhi.n	800550e <_strtol_l.isra.0+0xa6>
 800550a:	3c37      	subs	r4, #55	; 0x37
 800550c:	e7e2      	b.n	80054d4 <_strtol_l.isra.0+0x6c>
 800550e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005512:	2b19      	cmp	r3, #25
 8005514:	d804      	bhi.n	8005520 <_strtol_l.isra.0+0xb8>
 8005516:	3c57      	subs	r4, #87	; 0x57
 8005518:	e7dc      	b.n	80054d4 <_strtol_l.isra.0+0x6c>
 800551a:	f04f 37ff 	mov.w	r7, #4294967295
 800551e:	e7e5      	b.n	80054ec <_strtol_l.isra.0+0x84>
 8005520:	1c7b      	adds	r3, r7, #1
 8005522:	d108      	bne.n	8005536 <_strtol_l.isra.0+0xce>
 8005524:	2322      	movs	r3, #34	; 0x22
 8005526:	4608      	mov	r0, r1
 8005528:	f8c8 3000 	str.w	r3, [r8]
 800552c:	f1ba 0f00 	cmp.w	sl, #0
 8005530:	d107      	bne.n	8005542 <_strtol_l.isra.0+0xda>
 8005532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005536:	b102      	cbz	r2, 800553a <_strtol_l.isra.0+0xd2>
 8005538:	4240      	negs	r0, r0
 800553a:	f1ba 0f00 	cmp.w	sl, #0
 800553e:	d0f8      	beq.n	8005532 <_strtol_l.isra.0+0xca>
 8005540:	b10f      	cbz	r7, 8005546 <_strtol_l.isra.0+0xde>
 8005542:	f105 39ff 	add.w	r9, r5, #4294967295
 8005546:	f8ca 9000 	str.w	r9, [sl]
 800554a:	e7f2      	b.n	8005532 <_strtol_l.isra.0+0xca>
 800554c:	2430      	movs	r4, #48	; 0x30
 800554e:	2e00      	cmp	r6, #0
 8005550:	d1af      	bne.n	80054b2 <_strtol_l.isra.0+0x4a>
 8005552:	2608      	movs	r6, #8
 8005554:	e7ad      	b.n	80054b2 <_strtol_l.isra.0+0x4a>
 8005556:	2c30      	cmp	r4, #48	; 0x30
 8005558:	d0a3      	beq.n	80054a2 <_strtol_l.isra.0+0x3a>
 800555a:	260a      	movs	r6, #10
 800555c:	e7a9      	b.n	80054b2 <_strtol_l.isra.0+0x4a>
	...

08005560 <strtol>:
 8005560:	4b08      	ldr	r3, [pc, #32]	; (8005584 <strtol+0x24>)
 8005562:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005564:	681c      	ldr	r4, [r3, #0]
 8005566:	4d08      	ldr	r5, [pc, #32]	; (8005588 <strtol+0x28>)
 8005568:	6a23      	ldr	r3, [r4, #32]
 800556a:	2b00      	cmp	r3, #0
 800556c:	bf08      	it	eq
 800556e:	462b      	moveq	r3, r5
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4613      	mov	r3, r2
 8005574:	460a      	mov	r2, r1
 8005576:	4601      	mov	r1, r0
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff ff75 	bl	8005468 <_strtol_l.isra.0>
 800557e:	b003      	add	sp, #12
 8005580:	bd30      	pop	{r4, r5, pc}
 8005582:	bf00      	nop
 8005584:	20000048 	.word	0x20000048
 8005588:	200000ac 	.word	0x200000ac

0800558c <__utoa>:
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	b08b      	sub	sp, #44	; 0x2c
 8005590:	4605      	mov	r5, r0
 8005592:	460c      	mov	r4, r1
 8005594:	466e      	mov	r6, sp
 8005596:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <__utoa+0x78>)
 8005598:	f103 0c20 	add.w	ip, r3, #32
 800559c:	4637      	mov	r7, r6
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	3308      	adds	r3, #8
 80055a4:	c703      	stmia	r7!, {r0, r1}
 80055a6:	4563      	cmp	r3, ip
 80055a8:	463e      	mov	r6, r7
 80055aa:	d1f7      	bne.n	800559c <__utoa+0x10>
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	791b      	ldrb	r3, [r3, #4]
 80055b0:	6038      	str	r0, [r7, #0]
 80055b2:	713b      	strb	r3, [r7, #4]
 80055b4:	1e93      	subs	r3, r2, #2
 80055b6:	2b22      	cmp	r3, #34	; 0x22
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	d904      	bls.n	80055c8 <__utoa+0x3c>
 80055be:	7023      	strb	r3, [r4, #0]
 80055c0:	461c      	mov	r4, r3
 80055c2:	4620      	mov	r0, r4
 80055c4:	b00b      	add	sp, #44	; 0x2c
 80055c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c8:	1e66      	subs	r6, r4, #1
 80055ca:	fbb5 f0f2 	udiv	r0, r5, r2
 80055ce:	fb02 5510 	mls	r5, r2, r0, r5
 80055d2:	af0a      	add	r7, sp, #40	; 0x28
 80055d4:	443d      	add	r5, r7
 80055d6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80055da:	1c59      	adds	r1, r3, #1
 80055dc:	f806 5f01 	strb.w	r5, [r6, #1]!
 80055e0:	4605      	mov	r5, r0
 80055e2:	b968      	cbnz	r0, 8005600 <__utoa+0x74>
 80055e4:	4622      	mov	r2, r4
 80055e6:	5460      	strb	r0, [r4, r1]
 80055e8:	4423      	add	r3, r4
 80055ea:	1b19      	subs	r1, r3, r4
 80055ec:	1b10      	subs	r0, r2, r4
 80055ee:	4281      	cmp	r1, r0
 80055f0:	dde7      	ble.n	80055c2 <__utoa+0x36>
 80055f2:	7811      	ldrb	r1, [r2, #0]
 80055f4:	7818      	ldrb	r0, [r3, #0]
 80055f6:	f802 0b01 	strb.w	r0, [r2], #1
 80055fa:	f803 1901 	strb.w	r1, [r3], #-1
 80055fe:	e7f4      	b.n	80055ea <__utoa+0x5e>
 8005600:	460b      	mov	r3, r1
 8005602:	e7e2      	b.n	80055ca <__utoa+0x3e>
 8005604:	0800581c 	.word	0x0800581c

08005608 <__locale_ctype_ptr_l>:
 8005608:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800560c:	4770      	bx	lr

0800560e <__ascii_mbtowc>:
 800560e:	b082      	sub	sp, #8
 8005610:	b901      	cbnz	r1, 8005614 <__ascii_mbtowc+0x6>
 8005612:	a901      	add	r1, sp, #4
 8005614:	b142      	cbz	r2, 8005628 <__ascii_mbtowc+0x1a>
 8005616:	b14b      	cbz	r3, 800562c <__ascii_mbtowc+0x1e>
 8005618:	7813      	ldrb	r3, [r2, #0]
 800561a:	600b      	str	r3, [r1, #0]
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	1c10      	adds	r0, r2, #0
 8005620:	bf18      	it	ne
 8005622:	2001      	movne	r0, #1
 8005624:	b002      	add	sp, #8
 8005626:	4770      	bx	lr
 8005628:	4610      	mov	r0, r2
 800562a:	e7fb      	b.n	8005624 <__ascii_mbtowc+0x16>
 800562c:	f06f 0001 	mvn.w	r0, #1
 8005630:	e7f8      	b.n	8005624 <__ascii_mbtowc+0x16>

08005632 <__ascii_wctomb>:
 8005632:	b149      	cbz	r1, 8005648 <__ascii_wctomb+0x16>
 8005634:	2aff      	cmp	r2, #255	; 0xff
 8005636:	bf8b      	itete	hi
 8005638:	238a      	movhi	r3, #138	; 0x8a
 800563a:	700a      	strbls	r2, [r1, #0]
 800563c:	6003      	strhi	r3, [r0, #0]
 800563e:	2001      	movls	r0, #1
 8005640:	bf88      	it	hi
 8005642:	f04f 30ff 	movhi.w	r0, #4294967295
 8005646:	4770      	bx	lr
 8005648:	4608      	mov	r0, r1
 800564a:	4770      	bx	lr

0800564c <_init>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr

08005658 <_fini>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr
